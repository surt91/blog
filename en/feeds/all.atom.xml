<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>möchte­gern­geek</title><link href="https://blog.schawe.me/en/" rel="alternate"></link><link href="https://blog.schawe.me/feeds/all.atom.xml" rel="self"></link><id>https://blog.schawe.me/en/</id><updated>2023-09-23T19:45:00+02:00</updated><entry><title>Nightmare before Easter</title><link href="https://blog.schawe.me/en/easter.html" rel="alternate"></link><published>2023-09-23T19:45:00+02:00</published><updated>2023-09-23T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2023-09-23:/en/easter.html</id><summary type="html">&lt;p&gt;Easter is a holiday whose time is determined with an unnecessarily complicated rule. The first Sunday after the first full moon in Spring. Most people have no other choice than to look its date up in a calendar and trust in the calendar manufacturer. But not anymore! I will stick …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Easter is a holiday whose time is determined with an unnecessarily complicated rule. The first Sunday after the first full moon in Spring. Most people have no other choice than to look its date up in a calendar and trust in the calendar manufacturer. But not anymore! I will stick it to Big Calendar and reveal the secret formula to calculate the date of&amp;nbsp;easter!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# golden number&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;# century&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;             &lt;span class="c1"&gt;# correction: dropped leap years&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;# correction: synchronize with moon&amp;#39;s orbit&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;         &lt;span class="c1"&gt;# find sunday&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# epact&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;                        &lt;span class="c1"&gt;# full moon in march&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;           &lt;span class="c1"&gt;# advance to next sunday&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My favorite thing about it is that each line becomes more horrendous than the&amp;nbsp;previous.&lt;/p&gt;
&lt;p&gt;This algorithm was developed by Lilius and Clavius at the end of the 16th Century. I became aware of it through a mention in an exercise in Donald Knuth&amp;#8217;s &lt;em&gt;The Art of Computer Programming 1&lt;/em&gt; (Third edition, p.&amp;nbsp;159f).&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category></entry><entry><title>Osteralbtraum</title><link href="https://blog.schawe.me/easter.html" rel="alternate"></link><published>2023-09-23T19:45:00+02:00</published><updated>2023-09-23T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2023-09-23:/easter.html</id><summary type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller zu verlassen. Aber nicht mit mir! Ich werde es Big-Calendar zeigen und hier die geheime Formel veröffentlichen, mit der man das Osterdatum&amp;nbsp;berechnet!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# golden number&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;# century&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;             &lt;span class="c1"&gt;# correction: dropped leap years&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;# correction: synchronize with moon&amp;#39;s orbit&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;         &lt;span class="c1"&gt;# find sunday&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# epact&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;                        &lt;span class="c1"&gt;# full moon in march&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;           &lt;span class="c1"&gt;# advance to next sunday&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mir persönlich gefällt besonders gut, dass jede Zeile schlimmer ist als die&amp;nbsp;vorherige.&lt;/p&gt;
&lt;p&gt;Dieser Algorithmus ist übrigens von Lilius und Clavius Ende des 16. Jahrunderts entwickelt worden. Ich bin durch eine Erwähnung in einer Übungsaufgabe in Donald Knuths &lt;em&gt;The Art of Computer Programming 1&lt;/em&gt; (Third edition, S. 159f) darauf&amp;nbsp;gestoßen.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category></entry><entry><title>git subtree</title><link href="https://blog.schawe.me/en/git-subtree.html" rel="alternate"></link><published>2022-07-24T17:31:00+02:00</published><updated>2022-07-24T17:31:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2022-07-24:/en/git-subtree.html</id><summary type="html">&lt;p&gt;Who does not know this common situation: We have a new Idea to extend our existing Project &lt;code&gt;old&lt;/code&gt;. So we create a subdirectory &lt;code&gt;newIdea&lt;/code&gt; in the corresponding repository. It turns out that the idea was so good that it would also be useful outside of the project &lt;code&gt;old&lt;/code&gt;. It would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who does not know this common situation: We have a new Idea to extend our existing Project &lt;code&gt;old&lt;/code&gt;. So we create a subdirectory &lt;code&gt;newIdea&lt;/code&gt; in the corresponding repository. It turns out that the idea was so good that it would also be useful outside of the project &lt;code&gt;old&lt;/code&gt;. It would be sensible to create a new repository &lt;code&gt;new&lt;/code&gt; which should only contain the subdirectory &lt;code&gt;newIdea&lt;/code&gt;. In fact, this problem seems to be so common that there is a special git subcommand since 2012 for this purpose (and more complicated cases): &lt;code&gt;git subtree&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;New repository from&amp;nbsp;subdirectory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ newIdea/
│  ├─ lib.rs
├─ main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So inside the directory &lt;code&gt;old&lt;/code&gt; we execute the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;newIdea/&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="o"&gt;=&lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new Branch &lt;code&gt;onlyNewIdeaBranch&lt;/code&gt; which only contains the contents of &lt;code&gt;newIdea&lt;/code&gt;, i.e., a new root directory. So this branch has a newly written history consisting only of commits with influence on files below of &lt;code&gt;newIdea/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we can create the new repository &lt;code&gt;new&lt;/code&gt; and pull the newly created branch.Branch&amp;nbsp;pullen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new
git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maybe we want to delete the &lt;code&gt;newIdea&lt;/code&gt; subdirectory from the &lt;code&gt;old&lt;/code&gt; repository. Probably we have to change infrastructure code in the &lt;code&gt;new&lt;/code&gt; repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ main.rs
new/
├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Move a subdirectory into an existing&amp;nbsp;repository&lt;/h2&gt;
&lt;p&gt;Possibly we notice that the code would fit better into an existing repository instead of a new one? Perhaps because we are in the process of moving our code into a monorepo? No problem at&amp;nbsp;all!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ newIdea/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We already created the &lt;code&gt;onlyNewIdeaBranch&lt;/code&gt;, which we want to move into the subdirectory &lt;code&gt;goodIdea&lt;/code&gt; of the &lt;code&gt;monorepo&lt;/code&gt;. Again, we can solve it with &lt;code&gt;git subtree&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;monorepo
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;withGoodIdeadBranch
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;withGoodIdeadBranch
git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;goodIdea/&lt;span class="w"&gt; &lt;/span&gt;../old&lt;span class="w"&gt; &lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As soon as we ensured that our new Branch &lt;code&gt;withGoodIdeadBranch&lt;/code&gt; looks good and we modified the infrastructure code, we can merge it into&amp;nbsp;main.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
├─ goodIdea/
│  ├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>git subtree</title><link href="https://blog.schawe.me/git-subtree.html" rel="alternate"></link><published>2022-07-24T17:31:00+02:00</published><updated>2022-07-24T17:31:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2022-07-24:/git-subtree.html</id><summary type="html">&lt;p&gt;Wir alle kennen die Situation: Eine neue Idee, mit der wir unser bestehendes Projekt mit dem Namen &lt;code&gt;alt&lt;/code&gt; erweitern, sodass wir sogleich im zugehörigen Repository ein Unterverzeichnis &lt;code&gt;neueIdee&lt;/code&gt; anlegen. Die Idee stellt sich dann als so gut heraus, dass sie auch außerhalb des Projektes &lt;code&gt;alt&lt;/code&gt; nützlich wäre. Es wäre also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wir alle kennen die Situation: Eine neue Idee, mit der wir unser bestehendes Projekt mit dem Namen &lt;code&gt;alt&lt;/code&gt; erweitern, sodass wir sogleich im zugehörigen Repository ein Unterverzeichnis &lt;code&gt;neueIdee&lt;/code&gt; anlegen. Die Idee stellt sich dann als so gut heraus, dass sie auch außerhalb des Projektes &lt;code&gt;alt&lt;/code&gt; nützlich wäre. Es wäre also sehr sinnvoll ein neues Repository &lt;code&gt;neu&lt;/code&gt; anzulegen, das nur den Inhalt des Unterverzeichnisses &lt;code&gt;neueIdee&lt;/code&gt; enthalten soll. Tatsächlich scheint dieses Problem wohl so oft vorzukommen, dass es seit 2012 ein extra git Subcommand für diesen Zweck (und etwas kompliziertere Fälle) gibt: &lt;code&gt;git subtree&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Neues Repository aus einem&amp;nbsp;Unterverzeichnis&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wir wechseln also in das Repository &lt;code&gt;alt&lt;/code&gt; führen dort folgendes Kommando&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;neueIdee/&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="o"&gt;=&lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies erzeugt in diesem Repository zunächst einen neuen Branch &lt;code&gt;nurNeueIdeeBranch&lt;/code&gt;, der nur den Inhalt von &lt;code&gt;neueIdee&lt;/code&gt; hat &amp;#8212; also ein anderes Wurzelverzeichnis. Dieser Branch enthält also eine neu geschriebene History, die nur aus Commits besteht, die (auch) Einfluss auf Dateien unterhalb von &lt;code&gt;neueIdee&lt;/code&gt; hatten.&lt;/p&gt;
&lt;p&gt;Nun können wir unser neues Repository &lt;code&gt;neu&lt;/code&gt; anlegen und den soeben erzeugten Branch&amp;nbsp;pullen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;neu&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;neu
git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und schon haben wir ein neues Repository, das nur den gewünschten Inhalt&amp;nbsp;hat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ main.rs
neu/
├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Möglicherweise wollen wir noch einen Commit im alten Repository tätigen, der das &lt;code&gt;neueIdee&lt;/code&gt; Unterverzeichnis löscht. Möglicherweise müssen wir im neuen Repository noch Änderungen am Infrastrukturcode&amp;nbsp;vornehmen.&lt;/p&gt;
&lt;h2&gt;Verschieben eines Unterverzeichnisses in ein bestehendes&amp;nbsp;Repository&lt;/h2&gt;
&lt;p&gt;Womöglich fällt uns aber auch auf, dass der Code besser in ein anderes Repository statt eines Neuen passt? Vielleicht weil wir gerade dabei sind unseren Code in einem Monorepo zu sammeln? Auch kein&amp;nbsp;Problem!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wir haben oben  bereits den &lt;code&gt;nurNeueIdeeBranch&lt;/code&gt; erstellt, den wir nun in das Unterverzeichnis &lt;code&gt;guteIdee&lt;/code&gt;des Repositorys &lt;code&gt;monorepo&lt;/code&gt; einfügen wollen. Auch hier hilft uns wieder &lt;code&gt;git subtree&lt;/code&gt; weiter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;monorepo
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;mitGuterIdeeBranch
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;mitGuterIdeeBranch
git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;guteIdee/&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sobald wir uns in dem neuen Branch &lt;code&gt;mitGuterIdeeBranch&lt;/code&gt; überzeugt haben, dass alles zu unserer Zufriedenheit geklappt hat und wir möglicherweise noch Infrastrukturcode angepasst haben, können wir den Branch nach &lt;code&gt;main&lt;/code&gt; mergen und sind&amp;nbsp;fertig.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
├─ guteIdee/
│  ├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Perfect Snake</title><link href="https://blog.schawe.me/en/perfect-snake.html" rel="alternate"></link><published>2022-05-21T11:03:00+02:00</published><updated>2022-05-21T11:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-21:/en/perfect-snake.html</id><summary type="html">&lt;p&gt;I like the game snake &amp;#8212; not so much playing it, but implementing it. The natural consequence
is an autopilot. This way I can just watch instead of playing. On the German version of this
blog, there are already quite a few implementations with different heuristics, but nothing
particularly good at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like the game snake &amp;#8212; not so much playing it, but implementing it. The natural consequence
is an autopilot. This way I can just watch instead of playing. On the German version of this
blog, there are already quite a few implementations with different heuristics, but nothing
particularly good at playing&amp;nbsp;Snake.&lt;/p&gt;
&lt;p&gt;But now I present an autopilot which can (at least sometimes) play a perfect game of&amp;nbsp;Snake.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A perfect game of Snake" src="/img/perfectsnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;In case this gif does not convince you, this autopilot can run directly in the browser
at &lt;a href="https://snake.schawe.me/"&gt;snake.schawe.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, how does it&amp;nbsp;work?&lt;/p&gt;
&lt;h2&gt;Neural&amp;nbsp;Networks&lt;/h2&gt;
&lt;p&gt;If one does not know how to solve something, try to make a neural net come up with a solution.
One example of this applied to classic Atari games was &lt;a href="https://arxiv.org/abs/1312.5602"&gt;this paper&lt;/a&gt;,
from ten years ago. We will apply this idea of reinforcement learning to snake in this post
(but of course others have done this already
[&lt;a href="https://github.com/pawel-kieliszczyk/snake-reinforcement-learning"&gt;8&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/learning-to-play-snake-at-1-million-fps-4aae8d36d2f1"&gt;9&lt;/a&gt;]).&lt;/p&gt;
&lt;p&gt;The fundamental idea of reinforcement learning is quite simple. Just reward the model for
good decision, such that it may learn to make good decisions. So here we will use the score
defined as the length of the snake at the end of the game as the objective which is
maximized by good&amp;nbsp;decisions.&lt;/p&gt;
&lt;p&gt;Fortunately, there is already a lot of literature how reinforcement learning can be
implemented. We will use the actor-critic approach. So we construct a neural network
which takes the current state of the game as input and splits into two heads. One
head is the &lt;em&gt;Actor&lt;/em&gt; with 3 outputs, which correspond to the next action to take: &amp;#8220;right&amp;#8221;,
&amp;#8220;left&amp;#8221; or &amp;#8220;straight ahead&amp;#8221;. The other head is the &lt;em&gt;Critic&lt;/em&gt; with one output representing
an estimate of how long the snake can grow from the current&amp;nbsp;situation.&lt;/p&gt;
&lt;p&gt;For training a full game is played by following the advice of the Actor plus a bit of noise
to explore new strategies. Then the Critic is trained with all encountered game states
to produce estimates for the final score, which should predict the score that was indeed
reached.
For training the Actor, we take states of the game, make a different decision and
ask the Critic how good the resulting situation is. Depending on the estimated quality,
we teach the actor to make this decision more or less often.
So Actor and Critic help each other at getting better and
the common part of the neural net should gain an &amp;#8220;Understanding&amp;#8221; of the game which both
can base their output on.&amp;nbsp;Ingenious!&lt;/p&gt;
&lt;h2&gt;Technical&amp;nbsp;Trivialities&lt;/h2&gt;
&lt;p&gt;My Implementation uses the Python libraries Keras and Tensorflow for training and
&lt;a href="https://blog.schawe.me/multijsnake.html"&gt;multiJSnake (German post)&lt;/a&gt; as
the &lt;em&gt;environment&lt;/em&gt;. It is a strange decision to implement the environment in Java.
The reason is that it already existed and the combination offered the opportunity
to write a post on the
&lt;a href="https://blog.codecentric.de/en/2021/11/java-classes-python/"&gt;blog of my employer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this post, we will just treat the environment as a black box, which enforces the
rules of&amp;nbsp;Snake.&lt;/p&gt;
&lt;h2&gt;Lokal&amp;nbsp;Information&lt;/h2&gt;
&lt;p&gt;One of the most important decisions when designing the model is to determine
the nature of the input. The simplest option, which is quite suited for testing,
is using the local information around the head of the snake: three neurons (0 or 1)
indicating whether the field right, left and ahead are occupied by a wall or the
snake body (and eight more for the diagonals and two fields, left, right, ahead and behind
for a bit more farsightedness). Also we have to indicate where the food is, which
we solve with 4 further neurons (0 or 1) representing whether the food is left,
right, in or against the direction of the snake&amp;#8217;s&amp;nbsp;movement.&lt;/p&gt;
&lt;p&gt;Behind the input we build a fully connected layer and behind that we
connect directly the two&amp;nbsp;heads.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout of the local neural network (Visualisierung: netron)" src="/img/nn_local.svg"&gt;&lt;/p&gt;
&lt;p&gt;And after a few thousand training games
the snake moves directly towards the food and avoids itself. But it is not
yet clever enough to avoid catching itself in loops.
Well, even the heuristic of &lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake (German post)&lt;/a&gt;
was&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A few games with local information" src="/img/nn_local_game.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Global&amp;nbsp;Information&lt;/h2&gt;
&lt;p&gt;To avoid the snake trapping itself, we should give it global information of the
playing field &amp;#8212; it is only fair, since humans do see the whole field, too.
But even with a &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field, there would be at least 100 input neurons,
such that fully connected layers would lead to very large models. Instead,
&lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;&lt;em&gt;convolutional&lt;/em&gt; neural networks&lt;/a&gt;
seem like a very good fit to solve this problem, especially since our input is
of two-dimensional nature. To make life for our artificial intelligence a bit
easier, we split our playing field in three&amp;nbsp;channels&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the Head: only the position of the head has a 1, otherwise&amp;nbsp;0&lt;/li&gt;
&lt;li&gt;the body: the  positions of the body have a value corresponding to the number of timesteps they will be&amp;nbsp;occupied&lt;/li&gt;
&lt;li&gt;the food: only the position of the food has a 1, otherwise&amp;nbsp;0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="The human view and what we show our neural net" src="/img/nn_snake_channels.png"&gt;&lt;/p&gt;
&lt;p&gt;This is not even an advantage for the snake, since a human player also sees with three
color&amp;nbsp;channels.&lt;/p&gt;
&lt;p&gt;And to make life for our snake even easier, we change the output of the actor from
three relative (left, right, ahead) to four absolute (north, east, south, west)&amp;nbsp;directions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout of the convolutional neural networks (Visualisierung: netron)" src="/img/nn_global.svg"&gt;&lt;/p&gt;
&lt;p&gt;This model layout deserves to be called &lt;em&gt;deep learning&lt;/em&gt;. The other model parameters
can be looked up at &lt;a href="https://github.com/surt91/multiJSnake"&gt;github.com/surt91/multiJSnake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And after a few tenthousand training games this model works well enough to
routinely play perfect games on a &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field.
And since I only trained it on a  &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field, it fails on every other&amp;nbsp;size.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Python"></category><category term="Neural Networks"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Perfect Snake</title><link href="https://blog.schawe.me/perfect-snake.html" rel="alternate"></link><published>2022-05-21T11:03:00+02:00</published><updated>2022-05-21T11:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-21:/perfect-snake.html</id><summary type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/en/snake-de.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/msnake-de.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/jsnake-de.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/restfulsnake-de.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/multijsnake-de.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/en/pysnake-de.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/rsnake-de.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/en/snake-de.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/msnake-de.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/jsnake-de.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/restfulsnake-de.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/multijsnake-de.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/en/pysnake-de.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/en/rsnake-de.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel verspricht, schafft es dieser Autopilot (zumindest manchmal) perfekte Spiele zu&amp;nbsp;spielen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eine perfekte Partie Snake" src="/img/perfectsnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Und falls dieses gif nicht überzeugt, kann man den Autopiloten online
&amp;#8212; dank TensorFlow.js &amp;#8212; direkt im Browser ausprobieren auf &lt;a href="https://snake.schawe.me/"&gt;snake.schawe.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aber was steckt&amp;nbsp;dahinter?&lt;/p&gt;
&lt;h2&gt;Neuronale&amp;nbsp;Netze&lt;/h2&gt;
&lt;p&gt;Wenn man nicht clever genug ist, eine direkte Lösung für ein Problem zu finden, kann man
versuchen ein neuronales Netz auf die Lösung des Problems zu trainieren. Vor einigen Jahren
hat ein &lt;a href="https://arxiv.org/abs/1312.5602"&gt;Artikel&lt;/a&gt;, in dem ein neuronales Netz trainiert
wurde alte Atari-Spiele zu spielen, für mediale Aufmerksamkeit gesorgt. Und die gleiche
Idee des &lt;em&gt;Reinforcement Learning&lt;/em&gt; werde ich hier (nicht als erster
[&lt;a href="https://github.com/pawel-kieliszczyk/snake-reinforcement-learning"&gt;8&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/learning-to-play-snake-at-1-million-fps-4aae8d36d2f1"&gt;9&lt;/a&gt;])
auf Snake&amp;nbsp;anwenden.&lt;/p&gt;
&lt;p&gt;Die grundlegende Idee von Reinforcement Learning ist relativ einsichtig: Wir belohnen
das Modell für gute Entscheidungen, sodass es lernt mehr gute Entscheidungen zu treffen.
In unserem Fall werden gute Entscheidungen dadurch definiert, dass sie zu einer
hohen Punktzahl, also Länge der Schlange am Spielende,&amp;nbsp;führen.&lt;/p&gt;
&lt;p&gt;Glücklicherweise können wir auf die Literatur zurückgreifen, wie wir diese grundsätzliche
Idee umsetzen können. Das Modell, für das ich mich entschieden habe, ist ein Actor-Critic
Ansatz. Dabei nutze ich ein neuronales Netz, das als Input den aktuellen Zustand des
Spielfeldes bekommt &amp;#8212; wie genau dieser Zustand aussieht, diskutieren wir weiter unten.
Dann geht es durch ein paar Schichten und endet in zwei &amp;#8220;Köpfen&amp;#8221;. Einer ist der &lt;em&gt;Actor&lt;/em&gt;,
mit drei Output-Neuronen, die für &amp;#8220;nach links&amp;#8221;, &amp;#8220;nach rechts&amp;#8221; und &amp;#8220;geradeaus weiter&amp;#8221; stehen.
Der andere ist der &lt;em&gt;Critic&lt;/em&gt;, der ein Output-Neuron hat, das abschätzt wie lang die
Schlange, ausgehend von der aktuellen Situation, noch werden kann &amp;#8212; also wie gut die aktuelle
Situation&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Das Training läuft dann so ab, dass ein ganzes Spiel gespielt wird, folgend den Vorschlägen
des Actors mit etwas rauschen, um neue Strategien zu erkunden. Sobald es beendet ist, weil
die Schlange sich oder eine Wand gebissen hat, wird
der Critic mit allen Zuständen des Spielverlaufs darauf trainiert, Schätzungen
abzugeben, die möglichst gut zu der tatsächlich erreichten Länge am Spielende passen.
Außerdem wird der Actor darauf trainiert gute Entscheidungen zu treffen, indem zu den
Zuständen des Spielverlaufs andere Entscheidungen getroffen werden und die Bewertung
des Critic der resultierenden Situationen als Qualität der Entscheidung genutzt wird.
Actor und Critic helfen sich also gegenseitig besser zu werden.
Der gemeinsame Teil des neuronalen Netzes sollte im Idealfall nach genügend gespielten
Spielen dabei ein &amp;#8220;Verständnis&amp;#8221; für Snake entwickeln.&amp;nbsp;Genial!&lt;/p&gt;
&lt;h2&gt;Technische&amp;nbsp;Nebensächlichkeiten&lt;/h2&gt;
&lt;p&gt;Meine Implementierung benutzt die Python Bibliotheken Keras und Tensorflow zum Training
und &lt;a href="https://blog.schawe.me/en/multijsnake-de.html"&gt;multiJSnake&lt;/a&gt; als &lt;em&gt;Environment&lt;/em&gt;. Wir steuern also einen
Java-Prozess, um unser neuronales Netz in Python zu trainieren.
Diese Entscheidung ist etwas unorthodox, aber bot Potential für einen Blogpost auf dem
&lt;a href="https://blog.codecentric.de/2021/11/java-klassen-python/"&gt;Blog meines Arbeitgebers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wir können das Environment getrost als Black-Box betrachten, die dafür sorgt, dass die Regeln
von Snake befolgt&amp;nbsp;werden.&lt;/p&gt;
&lt;h2&gt;Lokale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Eine der wichtigsten Entscheidungen ist nun, wie der Input in das Modell aussieht.
Die einfachste Variante, die sich auch gut zum Testen eignet, ist die lokale
Information rund um den Kopf der Schlange: Drei Neuronen, die jeweils 1 oder 0 sind,
wenn das Feld links, rechts und geradeaus vom Kopf belegt sind (und acht weitere für
etwas mehr Weitsicht auf die Diagonalen und übernächste Felder vorne, rechts, links und
diesmal auch zurück). Damit die Schlange
auch das Futter finden kann, fügen wir noch 4 weitere Neuronen hinzu, die per 1 oder 0
anzeigen, ob das Futter in, rechts, links oder entgegengesetzt der Bewegungsrichtung
der Schlange&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Mit diesem Input füttern wir eine einzelne vollvernetzte Schicht, hinter der wir
direkt die Actor und Critic Köpfe&amp;nbsp;anschließen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des neuronalen Netzes mit lokaler Information (Visualisierung: netron)" class="invertable" src="/img/nn_local.svg"&gt;&lt;/p&gt;
&lt;p&gt;Das reicht aus, damit die Schlange nach ein paar tausend Trainingsspielen zielstrebig auf das Futter
zusteuert und sich selbst ausweicht. Allerdings reicht es noch nicht, um zu verhindern,
dass sie sich selbst in Schlaufen fängt. Da war der Autopilot von
&lt;a href="https://blog.schawe.me/en/rsnake-de.html"&gt;rsnake&lt;/a&gt;&amp;nbsp;besser.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein paar Spiele mit lokaler Information" src="/img/nn_local_game.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Globale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Um der Schlange eine Chance zu geben zu erkennen, dass sie sich gerade selbst fängt,
sollte man ihr erlauben das ganze Spielfeld zu sehen &amp;#8212; schließlich sehen menschliche
Spieler auch das ganze Spielfeld. Bei einem &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld haben wir also
schon mindestens 100 Input-Neuronen, sodass vollvernetzte Schichten zu sehr großen
Modellen führen würden. Stattdessen bietet es sich bei solchen zweidimensionalen
Daten an &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;&lt;em&gt;convolutional&lt;/em&gt; neuronale Netze&lt;/a&gt;
zu nutzen. Um es unserer Schlange etwas einfacher zu machen, werden wir unser Spielfeld
in drei Kanäle&amp;nbsp;aufteilen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;der Kopf: nur an der Position des Kopfes ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;li&gt;der Körper: die Positionen an denen sich der Körper befindet zeigen wie viele Zeitschritte der Körper noch an dieser Position sein&amp;nbsp;wird&lt;/li&gt;
&lt;li&gt;das Futter: nur an der Position des Futters ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Was ein Mensch sieht und was wir unserem neuronalen Netz zeigen" src="/img/nn_snake_channels.png"&gt;&lt;/p&gt;
&lt;p&gt;Dies ist auch kein unfairer Vorteil, schließlich sehen menschliche Spieler das Bild auch
mit drei&amp;nbsp;Farbkanälen.&lt;/p&gt;
&lt;p&gt;Und damit die Schlange nicht auch noch lernen muss was rechts und links bedeutet,
geben wir dem Actor 4 Outputs, die für Norden, Osten, Süden und Westen&amp;nbsp;stehen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des Convolutional-Neural-Networks (Visualisierung: netron)" class="invertable" src="/img/nn_global.svg"&gt;&lt;/p&gt;
&lt;p&gt;Dieses Modell-Layout verdient es dann schon eher als &lt;em&gt;Deep Learning&lt;/em&gt; bezeichnet zu werden.
Weitere Modell-Parameter, können auf &lt;a href="https://github.com/surt91/multiJSnake"&gt;github.com/surt91/multiJSnake&lt;/a&gt;
nachgeschlagen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Nach einigen zehntausend Trainingsspielen funktioniert dieses Modell dann
tatsächlich gut genug, um regelmäßig perfekte Spiele auf einem
&lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld zu erreichen. Aber da ich es nur auf  &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt;
Feldern trainiert habe, versagt es leider auf jeder anderen&amp;nbsp;Größe.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Python"></category><category term="Neural Networks"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Welcome to my Blog!</title><link href="https://blog.schawe.me/en/welcome.html" rel="alternate"></link><published>2021-05-21T20:37:00+02:00</published><updated>2021-05-21T20:37:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-21:/en/welcome.html</id><summary type="html">&lt;p&gt;Here I publish posts in irregular intervals
about things I do or want to be able to look up&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I suggest new visitors to take a look at the following highlights
instead of scrolling&amp;nbsp;chronologically.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   about a academic publication, of which I am co-author …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here I publish posts in irregular intervals
about things I do or want to be able to look up&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I suggest new visitors to take a look at the following highlights
instead of scrolling&amp;nbsp;chronologically.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   about a academic publication, of which I am co-author, and its central&amp;nbsp;algorithm&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/perfect-snake.html"&gt;Perfect Snake&lt;/a&gt; presents an implementation of the
   game snake with a neural net based&amp;nbsp;autopilot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, most content is only available on the &lt;a href="https://blog.schawe.me"&gt;German version of this blog&lt;/a&gt;.
But even if you do not speak German, &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;this post about fractals&lt;/a&gt;
should be nice to look at&amp;nbsp;anyway.&lt;/p&gt;</content><category term="Meta"></category></entry><entry><title>Willkommen auf meinem Blog!</title><link href="https://blog.schawe.me/welcome.html" rel="alternate"></link><published>2021-05-21T20:37:00+02:00</published><updated>2021-05-21T20:37:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-21:/welcome.html</id><summary type="html">&lt;p&gt;Hier veröffentliche ich unregelmäßig
Artikel über Dinge, mit denen ich mich beschäftige, oder die ich
so nützlich finde, dass ich sie später nachschlagen&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Neuen Besuchern möchte ich eine handvoll Beiträge empfehlen, anstatt
chronologisch&amp;nbsp;herunterzuscrollen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/randomFractals-de.html"&gt;A Fractal A Day&lt;/a&gt;
   zeigt hübsche Fraktale meines Twitter Bots &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/paper-lis2.html"&gt;Number of longest increasing …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Hier veröffentliche ich unregelmäßig
Artikel über Dinge, mit denen ich mich beschäftige, oder die ich
so nützlich finde, dass ich sie später nachschlagen&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Neuen Besuchern möchte ich eine handvoll Beiträge empfehlen, anstatt
chronologisch&amp;nbsp;herunterzuscrollen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/randomFractals-de.html"&gt;A Fractal A Day&lt;/a&gt;
   zeigt hübsche Fraktale meines Twitter Bots &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   stellt eine akademische Veröffentlichung, an der ich beteiligt war,
   und ihren zentralen Algorithmus&amp;nbsp;vor.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/perfect-snake.html"&gt;Perfect Snake&lt;/a&gt; präsentiert eine meiner
   Implementierungen des Spiels &amp;#8220;snake&amp;#8221; mitsamt einem neuronalen Netz als&amp;nbsp;Autopilot.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Meta"></category></entry><entry><title>Twitter Profile Background Colors</title><link href="https://blog.schawe.me/en/twitter-background.html" rel="alternate"></link><published>2021-05-11T18:30:00+02:00</published><updated>2021-05-11T18:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-11:/en/twitter-background.html</id><summary type="html">&lt;p&gt;I collected tweets of &lt;span class="math"&gt;\(&amp;gt;8'000'000\)&lt;/span&gt; Twitter users for an academic project.
But Twitter does not only give you the tweets, but also many more data like
the profile background color of users. It would be a shame to let these data
go to waste, so I decided to process them …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I collected tweets of &lt;span class="math"&gt;\(&amp;gt;8'000'000\)&lt;/span&gt; Twitter users for an academic project.
But Twitter does not only give you the tweets, but also many more data like
the profile background color of users. It would be a shame to let these data
go to waste, so I decided to process them into digital art. I wanted to show
all the colors in one picture and group similar colors close to each other.
This turned out to be much less trivial than I expected, since the space
in which the colors live is the three dimensional &lt;span class="caps"&gt;RGB&lt;/span&gt; cube, but my image is
only two dimensional. There is no &lt;a href="https://codegolf.stackexchange.com/q/22144"&gt;&amp;#8220;correct&amp;#8221; way to project the colors&amp;nbsp;down.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here, I decided to put a 2D &lt;a href="https://en.wikipedia.org/wiki/Hilbert_curve"&gt;Hilbert curve&lt;/a&gt;
through the image and paint the colors in the order they are encountered by
a 3D Hilbert curve in the &lt;span class="caps"&gt;RGB&lt;/span&gt; cube. Ignoring the two default colors
&lt;code&gt;#F5F8FA&lt;/code&gt; and &lt;code&gt;#C0DEED&lt;/code&gt;, this produces this&amp;nbsp;image:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/twitter_background.png"&gt;&lt;img alt="Twitter profile background colors" src="/img/twitter_background.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And thanks to the Python packages &lt;code&gt;hilbertcurve&lt;/code&gt; and &lt;code&gt;pypng&lt;/code&gt; the code needed
to generate this image is quite&amp;nbsp;harmless:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hilbertcurve.hilbertcurve&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;png&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    turn an RGB string like `#C0DEED` into a tuple of integers,&lt;/span&gt;
&lt;span class="sd"&gt;    i.e., coordinates of the RGB cube&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    `color_histogram` is a dict mapping an rgb string like `#F5F8FA`&lt;/span&gt;
&lt;span class="sd"&gt;    to the number of usages of this color&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_background_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_histogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;F5F8FA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0DEED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_histogram&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate the size of the resulting image&lt;/span&gt;
    &lt;span class="c1"&gt;# for a 2D Hilbert curve, it mus be square with a width, which is a power of 2&lt;/span&gt;
    &lt;span class="n"&gt;num_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;min_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pixels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;

    &lt;span class="c1"&gt;# output buffer for a `width x width` png, with 4 color values per pixel&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;hc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# there are 256 = 2^8 values in each direction of the RGB cube&lt;/span&gt;
    &lt;span class="n"&gt;hc3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hc3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance_from_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="c1"&gt;# get the coordinate of the next pixel&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_from_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign the RGBA values to the pixel&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RGBA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The input histogram was in my case just a simple &lt;span class="caps"&gt;SQL&lt;/span&gt; query&amp;nbsp;away:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Image"></category><category term="Twitter"></category><category term="Code"></category><category term="Python"></category></entry><entry><title>Twitter Profilhintergrundfarben</title><link href="https://blog.schawe.me/twitter-background.html" rel="alternate"></link><published>2021-05-11T18:30:00+02:00</published><updated>2021-05-11T18:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-11:/twitter-background.html</id><summary type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt hat, als ich ursprünglich angenommen
hatte: Im Idealfall sollten ähnliche Farben nahe beieinander liegen, allerdings
ist der &lt;span class="caps"&gt;RGB&lt;/span&gt; Farbraum ein dreidimensionaler Kubus, ein Bild aber nur zweidimensional,
sodass es keine
&lt;a href="https://codegolf.stackexchange.com/q/22144"&gt;&amp;#8220;richtige&amp;#8221; Art und Weise gibt, ähnliche Farben nebeneinander&amp;nbsp;anzuordnen.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich habe mich hier dafür entschieden eine 2D &lt;a href="https://de.wikipedia.org/wiki/Hilbert-Kurve"&gt;Hilbert-Kurve&lt;/a&gt;
durch mein Bild zu legen und die Farben in der Reihenfolge zu zeichnen, in der
eine 3D Hilbert-Kurve ihnen im &lt;span class="caps"&gt;RGB&lt;/span&gt;-Kubus begegnet. Wenn man dann noch die beiden
Standardhintergrundfarben &lt;code&gt;#F5F8FA&lt;/code&gt; und &lt;code&gt;#C0DEED&lt;/code&gt; ignoriert, sieht das Ergebnis so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/twitter_background.png"&gt;&lt;img alt="Twitter-Profil-Hintergrundfarbe" src="/img/twitter_background1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und dank der Python Pakete &lt;code&gt;hilbertcurve&lt;/code&gt; und &lt;code&gt;pypng&lt;/code&gt; ist der Code sogar ziemlich&amp;nbsp;harmlos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hilbertcurve.hilbertcurve&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;png&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    turn an RGB string like `#C0DEED` into a tuple of integers,&lt;/span&gt;
&lt;span class="sd"&gt;    i.e., coordinates of the RGB cube&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    `color_histogram` is a dict mapping an rgb string like `#F5F8FA`&lt;/span&gt;
&lt;span class="sd"&gt;    to the number of usages of this color&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_background_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_histogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;F5F8FA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0DEED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_histogram&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate the size of the resulting image&lt;/span&gt;
    &lt;span class="c1"&gt;# for a 2D Hilbert curve, it mus be square with a width, which is a power of 2&lt;/span&gt;
    &lt;span class="n"&gt;num_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;min_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pixels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;

    &lt;span class="c1"&gt;# output buffer for a width x width png, with 4 color values per pixel&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;hc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# there are 256 = 2^8 values in each direction of the RGB cube&lt;/span&gt;
    &lt;span class="n"&gt;hc3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hc3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance_from_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="c1"&gt;# get the coordinate of the next pixel&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_from_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign the RGBA values to the pixel&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RGBA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das Histogram, das als Input benötigt wird war in meinem Fall nur eine &lt;span class="caps"&gt;SQL&lt;/span&gt; Query&amp;nbsp;entfernt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Bild"></category><category term="Python"></category><category term="Twitter"></category><category term="Code"></category></entry><entry><title>Raspberry Router</title><link href="https://blog.schawe.me/en/raspberry-router.html" rel="alternate"></link><published>2021-05-10T20:19:00+02:00</published><updated>2021-05-10T20:19:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-10:/en/raspberry-router.html</id><summary type="html">&lt;p&gt;You need to connect something with an ethernet cable to the
internet, but there is only Wifi and all you have is a Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;No problem, all you need to do is connecting it to the Wifi, plug the
ethernet cable in and tell it to forward all traffic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You need to connect something with an ethernet cable to the
internet, but there is only Wifi and all you have is a Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;No problem, all you need to do is connecting it to the Wifi, plug the
ethernet cable in and tell it to forward all traffic from the one interface
to the other, as described in the &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;RELATED,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since our Raspberry is now a router, it should also assign &lt;span class="caps"&gt;IP&lt;/span&gt; addresses to the
devices connected to it via &lt;span class="caps"&gt;DHCP&lt;/span&gt;, for example with &lt;a href="https://wiki.archlinux.org/title/Dnsmasq"&gt;dnsmasq&lt;/a&gt;
and the following configuration in &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#disable dns
port=0

dhcp-range=192.168.13.50,192.168.13.150,12h
bind-interfaces
dhcp-option=3,0.0.0.0
dhcp-option=6,1.1.1.1,8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is also a good opportunity to route all traffic through a &lt;span class="caps"&gt;VPN&lt;/span&gt;,
by replacing the &lt;code&gt;wlan0&lt;/code&gt; interface above by the configured &lt;span class="caps"&gt;VPN&lt;/span&gt; interface
(e.g. &lt;code&gt;tun0&lt;/code&gt; for OpenVPN or &lt;code&gt;wg0&lt;/code&gt; for&amp;nbsp;WireGuard).&lt;/p&gt;</content><category term="Snip"></category></entry><entry><title>Raspberry Router</title><link href="https://blog.schawe.me/raspberry-router.html" rel="alternate"></link><published>2021-05-10T20:19:00+02:00</published><updated>2021-05-10T20:19:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-10:/raspberry-router.html</id><summary type="html">&lt;p&gt;Für die Fälle, in denen man nur per &lt;span class="caps"&gt;WLAN&lt;/span&gt; einen Zugang
zum Internet und nur einen Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt; dabei hat, aber dennoch
kabelgebundenes Internet braucht, notiere ich diesen Eintrag.
Für weitergehende Informationen ist das &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;,
wie immer,&amp;nbsp;empfehlenswert.&lt;/p&gt;
&lt;p&gt;Wir müssen unseren Raspberry nur mit dem &lt;span class="caps"&gt;WLAN&lt;/span&gt; verbinden, das …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Für die Fälle, in denen man nur per &lt;span class="caps"&gt;WLAN&lt;/span&gt; einen Zugang
zum Internet und nur einen Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt; dabei hat, aber dennoch
kabelgebundenes Internet braucht, notiere ich diesen Eintrag.
Für weitergehende Informationen ist das &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;,
wie immer,&amp;nbsp;empfehlenswert.&lt;/p&gt;
&lt;p&gt;Wir müssen unseren Raspberry nur mit dem &lt;span class="caps"&gt;WLAN&lt;/span&gt; verbinden, das Ethernetkabel
einstecken und spezifizieren, dass der Traffic vom einen zum
anderen weitergeleitet werden&amp;nbsp;sollen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;RELATED,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Da unser Raspberry jetzt ein Router ist, muss er natürlich auch die üblichen Aufgaben
eines Routers übernehmen und die Geräte, die per Ethernet verbunden werden
per &lt;span class="caps"&gt;DHCP&lt;/span&gt; mit &lt;span class="caps"&gt;IP&lt;/span&gt; Adressen versorgen, beispielsweise mittels &lt;a href="https://wiki.archlinux.org/title/Dnsmasq"&gt;dnsmasq&lt;/a&gt;
mit folgender Konfiguration in &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#disable dns
port=0

dhcp-range=192.168.13.50,192.168.13.150,12h
bind-interfaces
dhcp-option=3,0.0.0.0
dhcp-option=6,1.1.1.1,8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bei der Gelegenheit kann man auch dafür sorgen, dass sämtlicher Traffic
durch ein &lt;span class="caps"&gt;VPN&lt;/span&gt; geleitet wird, indem man das &lt;code&gt;wlan0&lt;/code&gt; Interface oben durch
das konfigurierte &lt;span class="caps"&gt;VPN&lt;/span&gt;-Interface austauscht (zB. durch &lt;code&gt;tun0&lt;/code&gt; für OpenVPN
oder &lt;code&gt;wg0&lt;/code&gt; für&amp;nbsp;WireGuard).&lt;/p&gt;</content><category term="Snip"></category></entry><entry><title>inline-python</title><link href="https://blog.schawe.me/en/inline-python.html" rel="alternate"></link><published>2021-05-05T20:31:00+02:00</published><updated>2021-05-05T20:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-05:/en/inline-python.html</id><summary type="html">&lt;p&gt;Use the right tool for the job. In my everyday life, this means writing simulations
in Rust and visualize the results in Python. Thanks to &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
this process works extremely&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Use the right tool for the job. In my everyday life, this means writing simulations
in Rust and visualize the results in Python. Thanks to &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
this process works extremely&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This minimal example is useless of course. But I already used this
crate productively to simulate dynamics on a &lt;a href="https://docs.rs/petgraph/"&gt;petgraph&lt;/a&gt;
graph and visualize its state via &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph state visualized with graph-tool" class="invertable" src="/img/inlinepy_graph.png"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Python"></category></entry><entry><title>inline-python</title><link href="https://blog.schawe.me/inline-python.html" rel="alternate"></link><published>2021-05-05T20:31:00+02:00</published><updated>2021-05-05T20:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-05:/inline-python.html</id><summary type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dieses Minimalbeispiel ist natürlich nicht nützlich, aber ich habe es bereits produktiv
genutzt, um Dynamik auf &lt;a href="https://docs.rs/petgraph/"&gt;petgraph&lt;/a&gt; Graphen zu
simulieren und ihren Zustand per &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; zu&amp;nbsp;visualisieren.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph state visualized with graph-tool" class="invertable" src="/img/inlinepy_graph.png"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Python"></category></entry><entry><title>Number of longest increasing subsequences</title><link href="https://blog.schawe.me/en/paper-lis2.html" rel="alternate"></link><published>2020-06-02T11:11:00+02:00</published><updated>2020-06-02T11:11:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-06-02:/en/paper-lis2.html</id><summary type="html">&lt;p&gt;My favorite problems are those which seem simple but exhibit unexpected depth. A prime
example is the &lt;a href="https://blog.schawe.me/en/paper-tsp-pt.html"&gt;Traveling Salesperson Problem&lt;/a&gt;: It is simple to understand
that the garbage truck needs to collect every garbage container, while trying to take the shortest&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;But here, I want to talk about the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My favorite problems are those which seem simple but exhibit unexpected depth. A prime
example is the &lt;a href="https://blog.schawe.me/en/paper-tsp-pt.html"&gt;Traveling Salesperson Problem&lt;/a&gt;: It is simple to understand
that the garbage truck needs to collect every garbage container, while trying to take the shortest&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;But here, I want to talk about the problem of the &lt;em&gt;longest increasing subsequence&lt;/em&gt; (&lt;span class="caps"&gt;LIS&lt;/span&gt;): For a
given sequence of numbers, find the subsequence consisting of increasing numbers, which is&amp;nbsp;longest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A longest increasing subsequence is marked in a sequence" class="invertable" src="/img/lis_example.png"&gt;&lt;/p&gt;
&lt;p&gt;This problem is so simple that it was first studied almost as a placeholder by Stanisław Ulam in a
book chapter describing the Monte Carlo method. And judging by the google results, it seems to
be a common problem posed to university students. I am wondering how many job applicants were distressed
when trying to solve it in front of a&amp;nbsp;whiteboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Surprising Mathematics of Longest Increasing Subsequences -- Dan Romik" src="/img/romik.jpg"&gt;&lt;/p&gt;
&lt;p&gt;However, apparently one can write whole books about this problem. It turns out that there are
surprising connections to seemingly independent problems. For example, the length &lt;span class="math"&gt;\(L\)&lt;/span&gt; of a &lt;span class="caps"&gt;LIS&lt;/span&gt;
of a permutation fluctuates the same way as the
&lt;a href="https://en.wikipedia.org/wiki/Kardar%E2%80%93Parisi%E2%80%93Zhang_equation"&gt;distance from the center to the border of a coffee stain&lt;/a&gt;
or the &lt;a href="https://www.quantamagazine.org/beyond-the-bell-curve-a-new-universal-law-20141015/"&gt;largest eigenvalues of random matrices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution of this problem is not unique: A Sequence can contain multiple longest increasing
subsequences. Indeed, their number grows exponentially with the length of the original&amp;nbsp;sequence.&lt;/p&gt;
&lt;p&gt;![Different longest increasing subsequences within the same sequence](/img/lis_alternatives.png]{:&amp;nbsp;.invertable}&lt;/p&gt;
&lt;p&gt;But up to now, there did not exist any results about the precise number of different &lt;span class="caps"&gt;LIS&lt;/span&gt;.
A common sentiment is that counting all &lt;span class="caps"&gt;LIS&lt;/span&gt; was infeasible, since there are exponentially many.
And that would be true if we would want to enumerate them. But since we only want to now
the number, we can use dynamic programming to determine it efficiently. The basic idea
is that we calculate for each element that can appear at position &lt;span class="math"&gt;\(x\)&lt;/span&gt; in a &lt;span class="caps"&gt;LIS&lt;/span&gt; of how many
increasing subsequences of length &lt;span class="math"&gt;\(L-x\)&lt;/span&gt; it is the first&amp;nbsp;element.&lt;/p&gt;
&lt;p&gt;This becomes easy thanks to a datastructure encoding which elements can be subsequent in a &lt;span class="caps"&gt;LIS&lt;/span&gt;.
For this we extend &lt;a href="https://en.wikipedia.org/wiki/Patience_sorting"&gt;Patience Sort&lt;/a&gt;. Since the algorithm
is called after a game of cards, it is adequate to describe it with cards: We write each element of
our sequence on a card and sort the deck according to the sequence such that the first element is on
top. Then we take cards from the top of the deck. We put the topmost card on the table opening a stack.
We put the next card on the first stack whose top card is larger than it or open a new stack right of
the currently rightmost stack. Each time we put a card on the table, we also add pointers to all cards
of the stack left of the placed card which are smaller. These are the cards which could be its predecessor
in a &lt;span class="caps"&gt;LIS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation of Patience Sort" src="/img/patience.gif"&gt;&lt;/p&gt;
&lt;p&gt;In the end there are &lt;span class="math"&gt;\(L\)&lt;/span&gt; stacks, where &lt;span class="math"&gt;\(L\)&lt;/span&gt; is the length of the &lt;span class="caps"&gt;LIS&lt;/span&gt;. We can start from the rightmost
stack, select an arbitrary element and follow the pointers to build a &lt;span class="caps"&gt;LIS&lt;/span&gt;. If we were only
&lt;a href="https://doi.org/10.1103/PhysRevE.101.062109"&gt;interested in the length&lt;/a&gt;, we could disregard all but the top card of every
stack and could simply the&amp;nbsp;algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;lis_len&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nb"&gt;Ord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered non-unique element in sequence!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But we want more, therefore we annotate each card of the rightmost stack with the number of increasing
subsequences of length &lt;span class="math"&gt;\(x=1\)&lt;/span&gt; of which they are the first element, which is trivially 1 for each card.
Then we continue with the stack left of it and annotate how many increasing subsequences of length 2
start with them. We can calculate this easily by following the pointers backwards and add up the
annotations of all predecessor cards. After repeating this and annotating the leftmost stack, we
can sum all annotations of the leftmost stack to get the total number of distinct &lt;span class="caps"&gt;LIS&lt;/span&gt;: here &lt;span class="math"&gt;\(7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of the datastructure to count LIS" class="invertable" src="/img/lis_backpointer.png"&gt;&lt;/p&gt;
&lt;p&gt;About the behavior for longer sequences from different random ensembles we published an
&lt;a href="https://hendrik.schawe.me/pdf/2020_liscount_PRE.pdf"&gt;article&lt;/a&gt;.&lt;/p&gt;</content><category term="Phys"></category><category term="Publication"></category><category term="Physics"></category><category term="Image"></category></entry><entry><title>Number of longest increasing subsequences</title><link href="https://blog.schawe.me/paper-lis2.html" rel="alternate"></link><published>2020-06-02T11:11:00+02:00</published><updated>2020-06-02T11:11:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-06-02:/paper-lis2.html</id><summary type="html">&lt;p&gt;Meine liebsten Probleme sind solche, die einfach scheinen aber sehr tief sind. Natürlich gehört
das &lt;a href="https://blog.schawe.me/paper-tsp-pt.html"&gt;Problem des Handlungsreisenden&lt;/a&gt; dazu: Es ist einfach zu verstehen,
dass der Müllmann bei jeder Mülltonne vorbei muss und dabei möglichst wenig Strecke fahren will.
Gerade deshalb ist es das Paradebeispiel für &lt;span class="caps"&gt;NP&lt;/span&gt;-schwere Probleme (technisch …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meine liebsten Probleme sind solche, die einfach scheinen aber sehr tief sind. Natürlich gehört
das &lt;a href="https://blog.schawe.me/paper-tsp-pt.html"&gt;Problem des Handlungsreisenden&lt;/a&gt; dazu: Es ist einfach zu verstehen,
dass der Müllmann bei jeder Mülltonne vorbei muss und dabei möglichst wenig Strecke fahren will.
Gerade deshalb ist es das Paradebeispiel für &lt;span class="caps"&gt;NP&lt;/span&gt;-schwere Probleme (technisch gesehen ist nur seine
Entscheidungs-Version &amp;#8220;Gibt es eine Tour, die kürzer ist als &lt;span class="math"&gt;\(X\)&lt;/span&gt;&amp;#8221; &lt;span class="caps"&gt;NP&lt;/span&gt;-schwer und nicht die typische
Optimierungsversion: &amp;#8220;Welche ist die kürzeste&amp;nbsp;Tour&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Aber fast noch besser gefällt mir das Problem der &lt;em&gt;längsten aufsteigenden Teilfolge&lt;/em&gt;, oder auf englisch,
&lt;em&gt;longest increasing subsequence&lt;/em&gt; (&lt;span class="caps"&gt;LIS&lt;/span&gt;): Gegeben eine
Folge von Zahlen &lt;span class="math"&gt;\(S_i\)&lt;/span&gt;, welche Teilfolge ist am längsten unter der Bedingung, dass die Zahlen&amp;nbsp;aufsteigen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eine längste aufsteigende Teilfolge ist in einer Folge markiert" class="invertable" src="img/lis_example.png"&gt;&lt;/p&gt;
&lt;p&gt;Dieses Problem ist so einfach, dass es erstmals von Stanisław Ulam als Fingerübung beschrieben wurde und nach meinem
Eindruck heutzutage als Übung für dynamische Programmierung in Universitäten verwendet wird. Wer weiß
wie viele Bewerber vor einem Whiteboard ins Schwitzen geraten sind bei dem Versuch es aus dem Stegreif zu&amp;nbsp;lösen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Surprising Mathematics of Longest Increasing Subsequences -- Dan Romik" src="/img/romik.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Auf der anderen Seite ist es aber offenbar tief genug, dass man ganze Bücher darüber schreiben kann.
Es zeigen sich überraschende Querverbindungen zu scheinbar unabhängigen Problemen.
Denn die Länge &lt;span class="math"&gt;\(L\)&lt;/span&gt; der &lt;span class="caps"&gt;LIS&lt;/span&gt; einer Permutation fluktuiert genauso wie der &lt;a href="https://en.wikipedia.org/wiki/Kardar%E2%80%93Parisi%E2%80%93Zhang_equation"&gt;Abstand von der Mitte zum Rand eines Kaffeeflecks&lt;/a&gt; oder die &lt;a href="https://www.quantamagazine.org/beyond-the-bell-curve-a-new-universal-law-20141015/"&gt;größten Eigenwerte von Zufallsmatrizen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nun ist die Lösung dieses Problems nicht eindeutig: Es kann viele längste aufsteigende Teilfolgen
geben. Tatsächlich wächst die Anzahl sogar exponentiell mit der Länge der ursprünglichen&amp;nbsp;Sequenz.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Verschiedene längste aufsteigende Teilfolgen der gleichen Folge" class="invertable" src="/img/lis_alternatives.png"&gt;&lt;/p&gt;
&lt;p&gt;Allerdings wurde bisher nie untersucht wie viele genau. Oftmals hört man, es sei nicht praktikabel
alle durchzuzählen, da es exponentiell viele seien. Und wenn es darum ginge alle zu enumerieren,
würde das stimmen. Aber wir wollen an dieser Stelle nur die Anzahl wissen, die wir mittels
dynamischer Programmierung effizient bestimmen können. Die Idee ist, dass wir für jedes Element,
das an Position &lt;span class="math"&gt;\(x\)&lt;/span&gt; in einer &lt;span class="caps"&gt;LIS&lt;/span&gt; auftauchen kann, berechnen, wie viele aufsteigende Teilfolgen
der Länge &lt;span class="math"&gt;\(L-x\)&lt;/span&gt; mit diesem Element&amp;nbsp;beginnen.&lt;/p&gt;
&lt;p&gt;Besonders einfach geht das, wenn wir zuerst eine Datenstruktur aufbauen, die kodiert welche
Elemente in einer &lt;span class="caps"&gt;LIS&lt;/span&gt; aufeinander folgen können. Dazu erweitern wir
&lt;a href="https://en.wikipedia.org/wiki/Patience_sorting"&gt;Patience Sort&lt;/a&gt;, und da dieser Algorithmus nach einem
Kartenspiel benannt ist, werden wir es auch mit Karten visualisieren: Wir schreiben jedes Element
unserer Sequenz auf eine Karte und legen die Karten auf einen Stapel, sodass das erste Element der Sequenz
oben liegt. Dann nehmen wir Karten von oben ab und legen sie auf verschiedene Stapel. Die erste Karte legen
wir auf den ersten, noch leeren Stapel. Die folgenden Karten legen wir auf den ersten Stapel, dessen
oberstes Element größer ist als die aktuelle Karte und ansonsten machen wir einen neuen Stapel rechts
davon auf. Jedes mal wenn wir eine Karte ablegen, lassen wir sie auf alle Karten, die aktuell auf dem
Vorgängerstapel liegen und kleiner sind, zeigen &amp;#8212; dies sind die Karten die in einer aufsteigenden
längsten Teilfolge direkt vor ihr auftauchen&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation von Patience Sort" class="invertable" src="/img/patience.gif"&gt;&lt;/p&gt;
&lt;p&gt;Am Ende haben wir &lt;span class="math"&gt;\(L\)&lt;/span&gt; Stapel, wobei &lt;span class="math"&gt;\(L\)&lt;/span&gt; die Länge der &lt;span class="caps"&gt;LIS&lt;/span&gt; ist, und wir können vom Stapel ganz rechts starten
und den Pfeilen folgen, um eine &lt;span class="caps"&gt;LIS&lt;/span&gt; zusammenzubauen. Wenn wir nur an der
&lt;a href="https://doi.org/10.1103/PhysRevE.101.062109"&gt;Länge interessiert wären&lt;/a&gt;, müssten wir uns über den Inhalt der Stapel keine Gedanken machen und der Algorithmus ließe sich sehr kompakt&amp;nbsp;darstellen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;lis_len&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nb"&gt;Ord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered non-unique element in sequence!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aber wir wollen mehr, deshalb notieren wir uns im nächsten Schritt bei allen Karten des
rechtesten Stapels wie viele aufsteigende Teilfolgen
der Länge &lt;span class="math"&gt;\(x=1\)&lt;/span&gt; mit ihnen starten, was trivialerweise je eine ist. Dann notieren wir bei allen Karten des
Stapels links davon wie viele aufsteigenden Teilfolgen der Länge 2 mit ihnen anfangen. Das können wir berechnen,
indem wir den Pfeilen rückwärts folgen und die Annotationen jeweils aufaddieren. Nachdem wir dies für
alle Stapel wiederholt haben und den linkesten Stapel beschriftet haben, können wir alle Annotationen des
linkesten Stapels aufaddieren, um die gesamte Anzahl &lt;span class="caps"&gt;LIS&lt;/span&gt; zu erhalten: hier &lt;span class="math"&gt;\(7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Beispiel der Datenstruktur zum Zählen der unterschiedlichen LIS" class="invertable" src="/img/lis_backpointer.png"&gt;&lt;/p&gt;
&lt;p&gt;Wie sich das ganze für längere Sequenzen aus unterschiedlichen Zufallsensembles im Detail verhält
haben wir in einem &lt;a href="https://hendrik.schawe.me/pdf/2020_liscount_PRE.pdf"&gt;Artikel&lt;/a&gt;&amp;nbsp;veröffentlicht.&lt;/p&gt;</content><category term="Phys"></category><category term="Veröffentlichung"></category><category term="Physik"></category><category term="Bild"></category></entry><entry><title>compress-pdf</title><link href="https://blog.schawe.me/en/compress-pdf.html" rel="alternate"></link><published>2020-04-12T10:26:00+02:00</published><updated>2020-04-12T10:26:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2020-04-12:/en/compress-pdf.html</id><summary type="html">&lt;p&gt;To compress of a &lt;code&gt;pdf&lt;/code&gt; with many high resolution images
to a sensible filesize (by downscaling and reencoding the images),
one can use&amp;nbsp;ghostscript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The available presets are &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;To compress of a &lt;code&gt;pdf&lt;/code&gt; with many high resolution images
to a sensible filesize (by downscaling and reencoding the images),
one can use&amp;nbsp;ghostscript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The available presets are &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook&lt;/code&gt;, &lt;code&gt;printer&lt;/code&gt;, &lt;code&gt;prepress&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;.
More options can be listed&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currentpagedevice { exch ==only ( ) print == } forall&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>compress-pdf</title><link href="https://blog.schawe.me/compress-pdf.html" rel="alternate"></link><published>2020-04-12T10:26:00+02:00</published><updated>2020-04-12T10:26:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2020-04-12:/compress-pdf.html</id><summary type="html">&lt;p&gt;Um ein &lt;code&gt;pdf&lt;/code&gt; mit vielen zu hoch aufgelösten Bildern auf eine angemessene
Dateigröße zu bringen (durch das Herunterskalieren und gegebenenfalls
Neukodieren der Bilder), kann einfach ghostscript genutzt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Qualitätspresets …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Um ein &lt;code&gt;pdf&lt;/code&gt; mit vielen zu hoch aufgelösten Bildern auf eine angemessene
Dateigröße zu bringen (durch das Herunterskalieren und gegebenenfalls
Neukodieren der Bilder), kann einfach ghostscript genutzt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Qualitätspresets sind &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook&lt;/code&gt;, &lt;code&gt;printer&lt;/code&gt;, &lt;code&gt;prepress&lt;/code&gt; und &lt;code&gt;default&lt;/code&gt;.
Weitere Optionsnamen können durch folgendes Kommando ermittelt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currentpagedevice { exch ==only ( ) print == } forall&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>smartphone webcam</title><link href="https://blog.schawe.me/en/smartphone-webcam.html" rel="alternate"></link><published>2020-04-04T10:59:00+02:00</published><updated>2020-04-04T10:59:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-04-04:/en/smartphone-webcam.html</id><summary type="html">&lt;p&gt;To use the camera of a smartphone for a video conference on a computer, first
an app is needed, which provides the image of the camera as a &lt;code&gt;http&lt;/code&gt; stream,
for example &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=en"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Linux we can use &lt;code&gt;v4l2loopback&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt; to use the stream as a virtual
webcam …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To use the camera of a smartphone for a video conference on a computer, first
an app is needed, which provides the image of the camera as a &lt;code&gt;http&lt;/code&gt; stream,
for example &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=en"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Linux we can use &lt;code&gt;v4l2loopback&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt; to use the stream as a virtual
webcam (here for the case that the smartphone has the &lt;span class="caps"&gt;IP&lt;/span&gt; &lt;code&gt;192.168.1.127&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;modprobe&lt;span class="w"&gt; &lt;/span&gt;v4l2loopback
ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:v&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-vf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, one can use any filter &lt;code&gt;ffmpeg&lt;/code&gt; offers, for example a &lt;code&gt;colorkey&lt;/code&gt;
or &lt;code&gt;chromakey&lt;/code&gt;, to use any image &lt;code&gt;background.jpg&lt;/code&gt; as a virtual background.
Here for the case that a white sheet is used as a &amp;#8220;green&amp;nbsp;screen&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;images/background.jpg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-filter_complex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[1:v]colorkey=0xbbbbbb:0.3:0.2[foregroud];[0:v][foregroud]overlay[composite];[composite]format=yuv420p[out]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[out]:v&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, one can use the microphone of the smartphone as audio input for the
computer. Here using &lt;code&gt;pulseaudio&lt;/code&gt; and &lt;code&gt;gstreamer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pactl&lt;span class="w"&gt; &lt;/span&gt;load-module&lt;span class="w"&gt; &lt;/span&gt;module-null-sink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
pactl&lt;span class="w"&gt; &lt;/span&gt;set-default-source&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam.monitor&amp;quot;&lt;/span&gt;
gst-launch-1.0&lt;span class="w"&gt; &lt;/span&gt;souphttpsrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.1.127:8080/audio.wav&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is-live&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;audio/x-raw,format&lt;span class="o"&gt;=&lt;/span&gt;S16LE,layout&lt;span class="o"&gt;=&lt;/span&gt;interleaved,rate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44100&lt;/span&gt;,channels&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;queue&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;pulsesink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>smartphone webcam</title><link href="https://blog.schawe.me/smartphone-webcam.html" rel="alternate"></link><published>2020-04-04T10:59:00+02:00</published><updated>2020-04-04T10:59:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-04-04:/smartphone-webcam.html</id><summary type="html">&lt;p&gt;Um die Kamera eines Smartphones als Webcam für eine Videokonferenz auf dem Computer zu nutzen,
braucht man zuerst eine App, die das Bild der Kamera als &lt;code&gt;http&lt;/code&gt;-Stream bereit
stellt, bspw. &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=de"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Für Linux existieren die Projekte &lt;code&gt;v4l2loopback&lt;/code&gt; und &lt;code&gt;ffmpeg&lt;/code&gt; mit deren Hilfe
der Stream als Webcam input genutzt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Um die Kamera eines Smartphones als Webcam für eine Videokonferenz auf dem Computer zu nutzen,
braucht man zuerst eine App, die das Bild der Kamera als &lt;code&gt;http&lt;/code&gt;-Stream bereit
stellt, bspw. &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=de"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Für Linux existieren die Projekte &lt;code&gt;v4l2loopback&lt;/code&gt; und &lt;code&gt;ffmpeg&lt;/code&gt; mit deren Hilfe
der Stream als Webcam input genutzt werden kann (hier für den Fall, dass das
Smartphone die &lt;span class="caps"&gt;IP&lt;/span&gt; &lt;code&gt;192.168.1.127&lt;/code&gt; hat):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;modprobe&lt;span class="w"&gt; &lt;/span&gt;v4l2loopback
ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:v&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-vf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Natürlich kann man beliebige Filter von &lt;code&gt;ffmpeg&lt;/code&gt; anwenden, zum Beispiel einen
&lt;code&gt;colorkey&lt;/code&gt; oder &lt;code&gt;chromakey&lt;/code&gt;, um ein beliebiges Bild &lt;code&gt;background.jpg&lt;/code&gt; als
virtuellen Hintergrund zu nutzen. Hier für den Fall, dass ein weißes Bettlaken
als &amp;#8220;green screen&amp;#8221; genutzt&amp;nbsp;wird:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;images/background.jpg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-filter_complex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[1:v]colorkey=0xbbbbbb:0.3:0.2[foregroud];[0:v][foregroud]overlay[composite];[composite]format=yuv420p[out]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[out]:v&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ähnlich kann auch das Smartphone-Mikrophon als Mikrophon für den Computer genutzt
werden. Hier mithilfe von &lt;code&gt;pulseaudio&lt;/code&gt; und &lt;code&gt;gstreamer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pactl&lt;span class="w"&gt; &lt;/span&gt;load-module&lt;span class="w"&gt; &lt;/span&gt;module-null-sink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
pactl&lt;span class="w"&gt; &lt;/span&gt;set-default-source&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam.monitor&amp;quot;&lt;/span&gt;
gst-launch-1.0&lt;span class="w"&gt; &lt;/span&gt;souphttpsrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.1.127:8080/audio.wav&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is-live&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;audio/x-raw,format&lt;span class="o"&gt;=&lt;/span&gt;S16LE,layout&lt;span class="o"&gt;=&lt;/span&gt;interleaved,rate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44100&lt;/span&gt;,channels&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;queue&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;pulsesink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Phase Transitions of Traveling Salesperson Problems solved with Linear Programming and Cutting Planes</title><link href="https://blog.schawe.me/en/paper-tsp-pt.html" rel="alternate"></link><published>2018-07-31T06:28:00+02:00</published><updated>2018-07-31T06:28:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-07-31:/en/paper-tsp-pt.html</id><summary type="html">&lt;p&gt;In this Article, we introduce an ensemble of the Traveling Salesperson problem (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
that can be tuned with a parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; from the trivial case of cities
equidistant on a circle to the random Euclidean &lt;span class="caps"&gt;TSP&lt;/span&gt; in a&amp;nbsp;plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;For this ensemble we determine some phase transitions from an &amp;#8220;easy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this Article, we introduce an ensemble of the Traveling Salesperson problem (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
that can be tuned with a parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; from the trivial case of cities
equidistant on a circle to the random Euclidean &lt;span class="caps"&gt;TSP&lt;/span&gt; in a&amp;nbsp;plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;For this ensemble we determine some phase transitions from an &amp;#8220;easy&amp;#8221; phase to
a &amp;#8220;not-that-easy&amp;#8221; phase using linear programming. For each of these transitions
we present structural properties of the optimal solution, which change at these
points characteristically. Since the optimal solution is independent of the
solution method, those phase transitions are not only relevant for the specific
linear program respectively the solver implementation used to solve them, but
a fundamental property of this &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;ensemble.&lt;/p&gt;
&lt;p&gt;We used the classical linear program of&amp;nbsp;Dantzig:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \label{eq:objective}
    &amp;amp;\text{minimize}     &amp;amp;  \sum_i \sum_{j&amp;lt;i} c_{ij} x_{ij}\\
    \label{eq:int}
    &amp;amp;\text{subject to}   &amp;amp;  x_{ij}                                &amp;amp;\in \{0,1\}\\ %\mathbb{Z}\\
    \label{eq:inout}
    &amp;amp;                    &amp;amp;  \sum_{j} x_{ij}                       &amp;amp;= 2&amp;amp;            &amp;amp; \forall i \in V \\
    \label{eq:sec}
    &amp;amp;                    &amp;amp;  \sum_{i \in S, j \notin S} x_{ij}     &amp;amp;\ge 2&amp;amp;          &amp;amp; \forall S \varsubsetneq V, S \ne \varnothing
\end{align}&lt;/div&gt;
&lt;p&gt;Here &lt;span class="math"&gt;\(c_{ij}\)&lt;/span&gt; is the distance matrix between all pairs of cities
of &lt;span class="math"&gt;\(V\)&lt;/span&gt; and &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt; is the adjacency matrix, i.e., &lt;span class="math"&gt;\(x_{ij} = 1\)&lt;/span&gt;,
if &lt;span class="math"&gt;\(i\)&lt;/span&gt; and &lt;span class="math"&gt;\(j\)&lt;/span&gt; are consecutive in the tour and &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt; otherwise.
Therefore, the first line minimizes the length of the tour.
To avoid that we conclude that &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt;, i.e., staying at home,
is identified as the optimal tour, we introduce the third line to
force each city to have two connections, enough to enter and leave.
But our salesman is clever and can trick us by choosing
&lt;span class="math"&gt;\(x_{ij} = 0.5\)&lt;/span&gt;. Since we can not interpret this, we introduce line 2
to force all &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt; to integers.
Still valid are two unconnected tours, which we forbid with
the fourth line, the &lt;em&gt;subtour elimination constraints&lt;/em&gt;.
Well, the careful reader might already see that we defined
one constraint for each subset of the cities, which are exponentially
many in the number of cities. But we can solve this by starting
without this class of constraints and only adding the ones which
are actually violated by a solution. The violated ones can luckily
be found easily by calculating the &lt;a href="https://en.wikipedia.org/wiki/Minimum_cut"&gt;minimum cut&lt;/a&gt; of the proposed solution. The corresponding
constraint can be added and the procedure is repeated until no
subtour elimination constraint is violated&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;So does that mean that we found an efficient algorithm to solve
the traveling salesperson problem? No, unfortunately we can not
claim the &lt;a href="https://en.wikipedia.org/wiki/Millennium_Prize_Problems#P_versus_NP"&gt;Millenium Prize&lt;/a&gt; yet. There is no known
algorithm which can efficiently solve this problem under the
integer constraint.
But if we drop this constraint, we can use efficient algorithms
of linear programming to solve the
&lt;a href="https://en.wikipedia.org/wiki/Linear_programming_relaxation"&gt;relaxation&lt;/a&gt;. The resulting length will always
be a lower bound on the actual solution and if we, by chance, find
an integer solution, we can be sure that it is actually the
optimal&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;As the order parameter of the transitions from easy to hard we use the probability that a simplex
solver yields an integer, and therefore optimal, solution. Without  the Subtour Elimination Constraints,
the transition occurs at the point at which the optimal solution deviates
from the order of the cities on the initial circle. With the Subtour
Elimination Constraints the transition coincides with the point at which
the optimal tour changes from a zig-zag course to larger meandering arcs.
This is measured by the&amp;nbsp;tortuosity
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \tau = \frac{n-1}{L} \sum_{i=1}^{n} \left( \frac{L_i}{S_i}-1 \right).
\end{align*}&lt;/div&gt;
&lt;p&gt;
which is maximal at this point. For the tortuosity the tour is divided in &lt;span class="math"&gt;\(N\)&lt;/span&gt;
parts of same-sign-curvature. For each part the ratio of the direct end-to-end
distance &lt;span class="math"&gt;\(S_i\)&lt;/span&gt; to the length along the arc &lt;span class="math"&gt;\(L_i\)&lt;/span&gt; is&amp;nbsp;summed.&lt;/p&gt;
&lt;p&gt;So, we detected continuous phase transitions in the hardness
of the problem with linear programming and correlated them
with structural&amp;nbsp;changes.&lt;/p&gt;</content><category term="Phys"></category><category term="Publication"></category><category term="Physics"></category></entry><entry><title>Phase Transitions of Traveling Salesperson Problems solved with Linear Programming and Cutting Planes</title><link href="https://blog.schawe.me/paper-tsp-pt.html" rel="alternate"></link><published>2018-07-31T06:28:00+02:00</published><updated>2018-07-31T06:28:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-07-31:/paper-tsp-pt.html</id><summary type="html">&lt;p&gt;In diesem Artikel wird ein Ensemble von Problemen des Handlungsreisenden (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
eingeführt, das abhängig von einem Parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; von einer trivial einfach
zu lösenden Konfiguration, nämlich Städte, die äquidistant auf einem Kreis angeordnet
sind, zum zufälligen euklidischen &lt;span class="caps"&gt;TSP&lt;/span&gt; in der Ebene&amp;nbsp;interpoliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;Danach werden mittels &lt;a href="https://de.wikipedia.org/wiki/Lineare_Optimierung"&gt;linearer Programmierung&lt;/a&gt; einige
Phasenübergänge festgestellt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In diesem Artikel wird ein Ensemble von Problemen des Handlungsreisenden (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
eingeführt, das abhängig von einem Parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; von einer trivial einfach
zu lösenden Konfiguration, nämlich Städte, die äquidistant auf einem Kreis angeordnet
sind, zum zufälligen euklidischen &lt;span class="caps"&gt;TSP&lt;/span&gt; in der Ebene&amp;nbsp;interpoliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;Danach werden mittels &lt;a href="https://de.wikipedia.org/wiki/Lineare_Optimierung"&gt;linearer Programmierung&lt;/a&gt; einige
Phasenübergänge festgestellt, ab welchen Werten von &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; das Problem
schwierig zu lösen wird. Zu zwei dieser Übergänge werden strukturelle
Eigenschaften der optimalen Lösung gefunden, die sich an dieser Stelle
ebenfalls charakteristisch ändern. Da die optimale Lösung nicht von der
Lösungsmethode abhängt, sind diese Phasenübergänge also nicht nur von Bedeutung
für das spezielle Lineare Programm bzw. den Algorithmus der zu dessen Lösung
genutzt wurde, sondern fundamentale Eigenschaft dieses &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;Ensembles.&lt;/p&gt;
&lt;p&gt;Im Detail haben wir die klassische Formulierung von Dantzig&amp;nbsp;genutzt:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \label{eq:objective}
    &amp;amp;\text{minimize}     &amp;amp;  \sum_i \sum_{j&amp;lt;i} c_{ij} x_{ij}\\
    \label{eq:int}
    &amp;amp;\text{subject to}   &amp;amp;  x_{ij}                                &amp;amp;\in \{0,1\}\\ %\mathbb{Z}\\
    \label{eq:inout}
    &amp;amp;                    &amp;amp;  \sum_{j} x_{ij}                       &amp;amp;= 2&amp;amp;            &amp;amp; \forall i \in V \\
    \label{eq:sec}
    &amp;amp;                    &amp;amp;  \sum_{i \in S, j \notin S} x_{ij}     &amp;amp;\ge 2&amp;amp;          &amp;amp; \forall S \varsubsetneq V, S \ne \varnothing
\end{align*}&lt;/div&gt;
&lt;p&gt;Hier ist &lt;span class="math"&gt;\(c_{ij}\)&lt;/span&gt; die Distanzmatrix zwischen allen Paaren von Städten aus &lt;span class="math"&gt;\(V\)&lt;/span&gt; und &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt;
die gesuchte Adjazenzmatrix, also &lt;span class="math"&gt;\(x_{ij} = 1\)&lt;/span&gt;, wenn &lt;span class="math"&gt;\(i\)&lt;/span&gt; und &lt;span class="math"&gt;\(j\)&lt;/span&gt; aufeinanderfolgende Stationen
der Tour sind und &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt; sonst. Die erste Zeile minimiert also die Strecke der Tour.
Um zu vermeiden, dass wir die triviale Lösung &lt;span class="math"&gt;\(x_{ij}=0\)&lt;/span&gt;, also &amp;#8220;wenn wir zu Hause
bleiben müssen wir am wenigsten Strecke zurücklegen&amp;#8221; finden, zwingt die dritte
Zeile unseren Handlungsreisenden seine Tour so zu planen, dass in Summe zwei
Striche an jede Stadt gezeichnet werden &amp;#8212; genug, um hinein und wieder hinaus
zu reisen. Allerdings, ist unser Handlungsreisender clever und würde versuchen uns
auszutricksen, indem er halbe Striche einzeichnen würde, wie
&lt;a href="https://blog.schawe.me/en/tspview-de.html"&gt;in einem anderen Blogeintrag visualisiert&lt;/a&gt;. Deshalb ist die
Bedingung in der zweiten Zeile nötig, die die Einträge in der Adjazenzmatrix auf
ganze Zahlen beschränkt. Dann bleibt nur noch das Problem, dass mehrere Routen,
die nicht verbunden sind erlaubt wären, sodass wir sie durch die letzte Zeile
verbieten: die &lt;em&gt;Subtour Elimination Constraints&lt;/em&gt;. Der aufmerksame Leser mag
schon erkannt haben, dass es für jede Untermenge von Städten so eine Constraint
definiert, also exponentiell viele in der Anzahl der Städte. Die Lösung
zu dieses Problem liegt darin, dass nur sehr wenige wirklich gebraucht werden, sodass
man das Problem ohne diese Constraint löst, testet ob eine verletzt ist, was mittels
der Berechnung eines &lt;a href="https://en.wikipedia.org/wiki/Minimum_cut"&gt;minimum cut&lt;/a&gt; sehr
schnell geht und dann eine einzelne Constraint, die diese Konfiguration verbietet
hinzufügt. Diese Methode iterativ Constraints hinzuzufügen wird meist als &lt;em&gt;Cutting Planes&lt;/em&gt;&amp;nbsp;bezeichnet.&lt;/p&gt;
&lt;p&gt;Also haben wir einen schnellen Algorithmus für das Problem des Handlungsreisenden
gefunden? Nein, leider können wir den &lt;a href="https://en.wikipedia.org/wiki/Millennium_Prize_Problems#P_versus_NP"&gt;Millenium Preis&lt;/a&gt; noch nicht beanspruchen. Es gibt keinen bekannten Algorithmus, der dieses Problem
unter Erfüllung der zweiten Zeilen, also Beschränkung auf ganzzahlige Lösungen lösen kann.
Aber sobald wir diese Bedingung fallen lassen, können wir klassische Verfahren der
linearen Programmierung nutzen, um dieses Problem effizient zu lösen. Dies wird auch
&lt;a href="https://en.wikipedia.org/wiki/Linear_programming_relaxation"&gt;Relaxation&lt;/a&gt; genannt. Die Länge der
Strecke ist immer eine untere Schranke für die tatsächliche Lösung. Und wenn unsere
Lösung per Zufall ganzzahlig ist, können wir uns sicher sein, die Optimale Lösung
gefunden zu&amp;nbsp;haben.&lt;/p&gt;
&lt;p&gt;Als Ordnungsparameter des Phasenübergangs zwischen leichten und schweren Konfigurationen
dient uns also die Wahrscheinlichkeit, dass
mittels eines Simplex-Solvers eine ganzzahlige, und damit optimale, Lösung
gefunden wird. Ohne die Subtour Elimination Constraints,
fällt der Phasenübergang auf den Punkt, an dem sich die optimale Lösung erstmals
von der Reihenfolge der Städte des ursprünglichen Kreises unterscheidet.
Mit den Subtour Elimination Constraints, fällt der Phasenübergang auf den
Punkt, wo die optimale Tour anfängt von einem Zickzack-Kurs auf große Meander zu
wechseln. Dies wird durch die geometrische Gewundenheit, die &lt;em&gt;Tortuosität&lt;/em&gt;,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \tau = \frac{n-1}{L} \sum_{i=1}^{n} \left( \frac{L_i}{S_i}-1 \right).
\end{align*}&lt;/div&gt;
&lt;p&gt;
ermittelt, die an diesem Punkt maximal wird. Hier wird die Tour in &lt;span class="math"&gt;\(N\)&lt;/span&gt;
Teilstücke mit gleichem Vorzeichen der Krümmung unterteilt und für jedes
Teilstück das Verhältnis von direkter Ende-zu-Ende-Distanz &lt;span class="math"&gt;\(S_i\)&lt;/span&gt; zu der
Länge entlang der Tour &lt;span class="math"&gt;\(L-i\)&lt;/span&gt;&amp;nbsp;summiert.&lt;/p&gt;
&lt;p&gt;Wir haben also kontinuierliche Phasenübergänge in der Schwierigkeit dieses Problems
mittels linearer Programmierung detektiert und sie mit strukturellen Änderungen
des Verhaltens in Verbindung&amp;nbsp;gebracht.&lt;/p&gt;</content><category term="Phys"></category><category term="Veröffentlichung"></category><category term="Physik"></category></entry><entry><title>relay ssh</title><link href="https://blog.schawe.me/en/relay-ssh.html" rel="alternate"></link><published>2018-03-21T10:46:00+01:00</published><updated>2018-03-21T10:46:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-03-21:/en/relay-ssh.html</id><summary type="html">&lt;p&gt;Connect via a server &lt;code&gt;relay&lt;/code&gt; with &lt;code&gt;target&lt;/code&gt;. Useful if &lt;code&gt;target&lt;/code&gt; is behind a
firewall, but reachable from &lt;code&gt;relay&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be combined with other options. This way a port forwarding can
be established over which, e.g., &lt;code&gt;sshfs&lt;/code&gt; can be&amp;nbsp;used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Connect via a server &lt;code&gt;relay&lt;/code&gt; with &lt;code&gt;target&lt;/code&gt;. Useful if &lt;code&gt;target&lt;/code&gt; is behind a
firewall, but reachable from &lt;code&gt;relay&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be combined with other options. This way a port forwarding can
be established over which, e.g., &lt;code&gt;sshfs&lt;/code&gt; can be&amp;nbsp;used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
sshfs&lt;span class="w"&gt; &lt;/span&gt;user2@localhost:/path&lt;span class="w"&gt; &lt;/span&gt;/mountpoint&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A combination with &lt;a href="https://blog.schawe.me/en/reverse-ssh.html"&gt;reverse-ssh&lt;/a&gt;
could look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user2@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>relay ssh</title><link href="https://blog.schawe.me/relay-ssh.html" rel="alternate"></link><published>2018-03-21T10:46:00+01:00</published><updated>2018-03-21T10:46:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-03-21:/relay-ssh.html</id><summary type="html">&lt;p&gt;Um sich per Server &lt;code&gt;relay&lt;/code&gt; mit &lt;code&gt;target&lt;/code&gt; zu verbinden. Nützlich wenn &lt;code&gt;target&lt;/code&gt;
hinter einer Firewall versteckt, aber von &lt;code&gt;relay&lt;/code&gt; erreichbar&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies kann mit anderen Optionen kombiniert werden, sodass eine Portweiterleitung
stattfinden kann, über die bspw. &lt;code&gt;sshfs&lt;/code&gt; genutzt werden&amp;nbsp;kann.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Um sich per Server &lt;code&gt;relay&lt;/code&gt; mit &lt;code&gt;target&lt;/code&gt; zu verbinden. Nützlich wenn &lt;code&gt;target&lt;/code&gt;
hinter einer Firewall versteckt, aber von &lt;code&gt;relay&lt;/code&gt; erreichbar&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies kann mit anderen Optionen kombiniert werden, sodass eine Portweiterleitung
stattfinden kann, über die bspw. &lt;code&gt;sshfs&lt;/code&gt; genutzt werden&amp;nbsp;kann.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
sshfs&lt;span class="w"&gt; &lt;/span&gt;user2@localhost:/path&lt;span class="w"&gt; &lt;/span&gt;/mountpoint&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eine Kombination mit &lt;a href="https://blog.schawe.me/reverse-ssh.html"&gt;reverse-ssh&lt;/a&gt;
könnte so&amp;nbsp;aussehen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user2@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>latexdiff</title><link href="https://blog.schawe.me/en/latexdiff.html" rel="alternate"></link><published>2018-01-11T15:28:00+01:00</published><updated>2018-01-11T15:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-01-11:/en/latexdiff.html</id><content type="html">&lt;p&gt;Visualize the differences between two Latex&amp;nbsp;files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And if one is using git anyway, there is an even simpler way to compare
a given commit with the current&amp;nbsp;state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef&lt;span class="w"&gt; &lt;/span&gt;filename.tex&lt;span class="w"&gt; &lt;/span&gt;--pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>latexdiff</title><link href="https://blog.schawe.me/latexdiff.html" rel="alternate"></link><published>2018-01-11T15:28:00+01:00</published><updated>2018-01-11T15:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-01-11:/latexdiff.html</id><summary type="html">&lt;p&gt;Um die Unterschiede zwischen zwei Latex Dateien zu ermitteln, die beispielsweise
aus Git&amp;nbsp;kommen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und wenn man sowieso schon git benutzt, reicht es einfach den Hash des Commits
angeben, den man mit dem aktuellen Stand vergleichen&amp;nbsp;will.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Um die Unterschiede zwischen zwei Latex Dateien zu ermitteln, die beispielsweise
aus Git&amp;nbsp;kommen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und wenn man sowieso schon git benutzt, reicht es einfach den Hash des Commits
angeben, den man mit dem aktuellen Stand vergleichen&amp;nbsp;will.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef&lt;span class="w"&gt; &lt;/span&gt;filename.tex&lt;span class="w"&gt; &lt;/span&gt;--pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>reverse ssh</title><link href="https://blog.schawe.me/en/reverse-ssh.html" rel="alternate"></link><published>2017-12-11T15:35:00+01:00</published><updated>2017-12-11T15:35:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-11:/en/reverse-ssh.html</id><summary type="html">&lt;p&gt;On the computer &lt;code&gt;target&lt;/code&gt; behind a firewall, in which you want to login in the
future,&amp;nbsp;do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; need to be reachable and needs to have the following option
set in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;On the computer &lt;code&gt;target&lt;/code&gt; behind a firewall, in which you want to login in the
future,&amp;nbsp;do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; need to be reachable and needs to have the following option
set in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now any client can reach &lt;code&gt;target&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can also used for, e.g., &lt;code&gt;sshfs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sshfs&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server:folder&lt;span class="w"&gt; &lt;/span&gt;~/sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>reverse ssh</title><link href="https://blog.schawe.me/reverse-ssh.html" rel="alternate"></link><published>2017-12-11T15:35:00+01:00</published><updated>2017-12-11T15:35:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-11:/reverse-ssh.html</id><summary type="html">&lt;p&gt;Führe auf dem Computer &lt;code&gt;target&lt;/code&gt;, der hinter einer Firewall steht und dennoch
per &lt;span class="caps"&gt;SSH&lt;/span&gt; erreichbar sein soll folgendes&amp;nbsp;aus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; muss erreichbar sein und in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
folgende Option aktiviert&amp;nbsp;haben&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jetzt kann …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Führe auf dem Computer &lt;code&gt;target&lt;/code&gt;, der hinter einer Firewall steht und dennoch
per &lt;span class="caps"&gt;SSH&lt;/span&gt; erreichbar sein soll folgendes&amp;nbsp;aus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; muss erreichbar sein und in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
folgende Option aktiviert&amp;nbsp;haben&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jetzt kann man von beliebigen Clients auf den Computer &lt;code&gt;target&lt;/code&gt; zugreifen&amp;nbsp;per&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So kann man beispielsweise auch &lt;code&gt;sshfs&lt;/code&gt; nutzen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sshfs&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server:folder&lt;span class="w"&gt; &lt;/span&gt;~/sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2gif</title><link href="https://blog.schawe.me/en/png2gif.html" rel="alternate"></link><published>2017-10-31T11:46:00+01:00</published><updated>2017-10-31T11:46:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-10-31:/en/png2gif.html</id><content type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; into an animated &lt;code&gt;.gif&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.png&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Naturally, this works not olny for &lt;code&gt;.png&lt;/code&gt; and all other options of
Imagemagick can be used as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-resize&lt;span class="w"&gt; &lt;/span&gt;256x256&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.svg&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2gif</title><link href="https://blog.schawe.me/png2gif.html" rel="alternate"></link><published>2017-10-31T11:46:00+01:00</published><updated>2017-10-31T11:46:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-10-31:/png2gif.html</id><content type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein animiertes &lt;code&gt;.gif&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.png&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Natürlich klappt das nicht nur für &lt;code&gt;.png&lt;/code&gt; und alle anderen Optionen von
Imagemagick lassen sich&amp;nbsp;kombinieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-resize&lt;span class="w"&gt; &lt;/span&gt;256x256&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.svg&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2vp9</title><link href="https://blog.schawe.me/en/png2vp9.html" rel="alternate"></link><published>2017-08-26T11:05:00+02:00</published><updated>2017-08-26T11:05:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-08-26:/en/png2vp9.html</id><summary type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; files into a weboptimized &lt;code&gt;VP9&lt;/code&gt;, which is supported
by all &lt;a href="http://caniuse.com/webm/embed"&gt;important Browsers&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; files into a weboptimized &lt;code&gt;VP9&lt;/code&gt;, which is supported
by all &lt;a href="http://caniuse.com/webm/embed"&gt;important Browsers&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;-


ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;libopus&lt;span class="w"&gt; &lt;/span&gt;-b:a&lt;span class="w"&gt; &lt;/span&gt;64k&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;webm&lt;span class="w"&gt; &lt;/span&gt;video.webm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For maximum compatibility create a &lt;code&gt;MP4&lt;/code&gt; as&amp;nbsp;fallback.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-pix_fmt&lt;span class="w"&gt; &lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-profile:v&lt;span class="w"&gt; &lt;/span&gt;baseline&lt;span class="w"&gt; &lt;/span&gt;-level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;video.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Embed&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.webm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/webm; codecs=vp9,vorbis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2vp9</title><link href="https://blog.schawe.me/png2vp9.html" rel="alternate"></link><published>2017-08-26T11:05:00+02:00</published><updated>2017-08-26T11:05:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-08-26:/png2vp9.html</id><summary type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein zur Web-Wiedergabe geeignetes
&lt;code&gt;VP9&lt;/code&gt;, das von allen &lt;a href="http://caniuse.com/webm/embed"&gt;wichtigen Browsern unterstützt&lt;/a&gt;&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein zur Web-Wiedergabe geeignetes
&lt;code&gt;VP9&lt;/code&gt;, das von allen &lt;a href="http://caniuse.com/webm/embed"&gt;wichtigen Browsern unterstützt&lt;/a&gt;&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;-


ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;libopus&lt;span class="w"&gt; &lt;/span&gt;-b:a&lt;span class="w"&gt; &lt;/span&gt;64k&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;webm&lt;span class="w"&gt; &lt;/span&gt;video.webm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Für maximale Kompatibilität kann als Fallback noch ein &lt;code&gt;MP4&lt;/code&gt; erstellt&amp;nbsp;werden.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-pix_fmt&lt;span class="w"&gt; &lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-profile:v&lt;span class="w"&gt; &lt;/span&gt;baseline&lt;span class="w"&gt; &lt;/span&gt;-level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;video.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Einbettung erfolgt&amp;nbsp;mit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.webm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/webm; codecs=vp9,vorbis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>optipng</title><link href="https://blog.schawe.me/en/optipng.html" rel="alternate"></link><published>2016-10-02T12:56:00+02:00</published><updated>2016-10-02T12:56:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-10-02:/en/optipng.html</id><content type="html">&lt;p&gt;Optimize &lt;code&gt;.png&lt;/code&gt; images. Smaller size, no quality&amp;nbsp;loss.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;optipng&lt;span class="w"&gt; &lt;/span&gt;-o7&lt;span class="w"&gt; &lt;/span&gt;*.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>optipng</title><link href="https://blog.schawe.me/optipng.html" rel="alternate"></link><published>2016-10-02T12:56:00+02:00</published><updated>2016-10-02T12:56:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-10-02:/optipng.html</id><content type="html">&lt;p&gt;Optimiere &lt;code&gt;.png&lt;/code&gt; Bilder. Kleinere Größe, kein&amp;nbsp;Qualitätsverlust.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;optipng&lt;span class="w"&gt; &lt;/span&gt;-o7&lt;span class="w"&gt; &lt;/span&gt;*.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2mp4</title><link href="https://blog.schawe.me/en/png2mp4.html" rel="alternate"></link><published>2016-09-17T18:48:00+02:00</published><updated>2016-09-17T18:48:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/en/png2mp4.html</id><content type="html">&lt;p&gt;Convert a folder with enumerated &lt;code&gt;.png&lt;/code&gt; files into a &lt;code&gt;x264&lt;/code&gt; Video
i a &lt;code&gt;.mp4&lt;/code&gt; container with a given frame&amp;nbsp;rate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;vid.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2mp4</title><link href="https://blog.schawe.me/png2mp4.html" rel="alternate"></link><published>2016-09-17T18:48:00+02:00</published><updated>2016-09-17T18:48:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/png2mp4.html</id><content type="html">&lt;p&gt;Konvertiere einen Ordner mit passend nummerierten &lt;code&gt;.png&lt;/code&gt;
in ein &lt;code&gt;x264&lt;/code&gt; Video im &lt;code&gt;.mp4&lt;/code&gt; Format mit gegebener&amp;nbsp;Framerate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;vid.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>svg2png</title><link href="https://blog.schawe.me/en/svg2png.html" rel="alternate"></link><published>2016-09-17T18:46:00+02:00</published><updated>2016-09-17T18:46:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/en/svg2png.html</id><content type="html">&lt;p&gt;Convert &lt;code&gt;.svg&lt;/code&gt; into &lt;code&gt;.png&lt;/code&gt; with white&amp;nbsp;background.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e img.png -h 1080 img.svg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or a complete&amp;nbsp;folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.svg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e $(basename -s .svg $i).png -h 1080 $i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>svg2png</title><link href="https://blog.schawe.me/svg2png.html" rel="alternate"></link><published>2016-09-17T18:46:00+02:00</published><updated>2016-09-17T18:46:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/svg2png.html</id><content type="html">&lt;p&gt;Konvertiere &lt;code&gt;.svg&lt;/code&gt; in &lt;code&gt;.png&lt;/code&gt; mit weißem&amp;nbsp;Hintergrund.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e img.png -h 1080 img.svg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oder einen ganzen&amp;nbsp;Ordner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.svg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e $(basename -s .svg $i).png -h 1080 $i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>ssh password</title><link href="https://blog.schawe.me/en/ssh-password.html" rel="alternate"></link><published>2010-12-11T18:26:00+01:00</published><updated>2010-12-11T18:26:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-12-11:/en/ssh-password.html</id><content type="html">&lt;p&gt;Change the password of your &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;keypair.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;id_rsa&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>ssh-password</title><link href="https://blog.schawe.me/ssh-password.html" rel="alternate"></link><published>2010-12-11T18:26:00+01:00</published><updated>2010-12-11T18:26:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-12-11:/ssh-password.html</id><content type="html">&lt;p&gt;Um das Passwort des ssh-rsa-Schlüssels zu&amp;nbsp;ändern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;id_rsa&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry></feed>