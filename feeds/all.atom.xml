<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>möchte­gern­geek</title><link href="https://blog.schawe.me/" rel="alternate"></link><link href="https://blog.schawe.me/feeds/all.atom.xml" rel="self"></link><id>https://blog.schawe.me/</id><updated>2024-05-10T12:29:00+02:00</updated><entry><title>Schneckenkragen</title><link href="https://blog.schawe.me/schneckenkragen.html" rel="alternate"></link><published>2024-05-10T12:29:00+02:00</published><updated>2024-05-10T12:29:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2024-05-10:/schneckenkragen.html</id><summary type="html">&lt;p&gt;Besonders in diesem Jahr, aber zumindest in meinem Garten jedes Jahr, sind Schnecken ein
großes Problem für Hobbygärtner. Man setzt die liebevoll vorgezogenen Pflanzen von der Fenterbank
in das Beet, nur um am nächsten Tag zu sehen, dass außer Schleimspuren nichts geblieben ist.
Es gibt eine Reihe Hausmittel, die helfen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Besonders in diesem Jahr, aber zumindest in meinem Garten jedes Jahr, sind Schnecken ein
großes Problem für Hobbygärtner. Man setzt die liebevoll vorgezogenen Pflanzen von der Fenterbank
in das Beet, nur um am nächsten Tag zu sehen, dass außer Schleimspuren nichts geblieben ist.
Es gibt eine Reihe Hausmittel, die helfen sollen. Praktischerweise im
&lt;a href="https://de.wikipedia.org/wiki/Schneckenbek%C3%A4mpfung#Biologische_und_%C3%B6kologische_Mittel"&gt;Wikipedia-Artikel zur Schneckenbekämpfung&lt;/a&gt;&amp;nbsp;zusammengefasst:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bannkreise aus Eierschalen oder&amp;nbsp;Kaffeepulver&lt;/li&gt;
&lt;li&gt;Bierfallen, die alle Schnecken aus der Nachbarschaft&amp;nbsp;einladen&lt;/li&gt;
&lt;li&gt;Kupfer, das nicht nur für Schnecken giftig&amp;nbsp;ist&lt;/li&gt;
&lt;li&gt;Laufenten &amp;#8212; immerhin werden die Pflanzen dann nicht mehr von Schnecken&amp;nbsp;gefressen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drei dieser vier Strategien haben außerdem den Nachteil, dass sie nicht nur die Wegschnecken bekämpfen,
die für die meisten Fraßschäden verantwortlich sind, sondern alle Schnecken.
Tatsächlich sind Schnecken mit Gehäuse keine Gefahr für die Nutzpflanzen &amp;#8212; im Gegenteil: laut des Wikipedia-Artikels gibt es anscheindend eher den Zusammenhang, dass eine große Weinbergschneckenpopulation mit eher kleinen Populationen der schädlichen Wegschnecke korreliert ist. Und auch nicht alle Nacktschnecken sind schädlich! Meine Lieblingsnacktschnecke, &lt;a href="https://de.wikipedia.org/wiki/Tigerschnegel"&gt;der Tigerschnegel&lt;/a&gt;, frisst nicht nur Schneckeneier, sondern sogar ausgewachsene&amp;nbsp;Exemplare.&lt;/p&gt;
&lt;h2&gt;Der&amp;nbsp;Schneckenkragen&lt;/h2&gt;
&lt;p&gt;In meinem Garten hat sich &lt;a href="https://de.wikipedia.org/wiki/Schneckenkragen"&gt;der Schneckenkragen&lt;/a&gt; bewährt.
Das ist ein hohler Zylinder mit Widerhaken nach außen.
Einfacher an einem Bild zu zeigen als zu&amp;nbsp;beschreiben.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/schneckenkragen.jpg"&gt;&lt;img alt="Schneckenkragen" src="/img/schneckenkragen1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dort, wo die 3D-gedruckte Schnecke abgebildet ist, sollte keine Schnecke mehr hingelangen&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;Man steckt ihn einfach mit einer leicht drehenden Bewegung etwa 2 cm tief in den&amp;nbsp;Boden.&lt;/p&gt;
&lt;p&gt;Dabei ist unbedingt zu beachten, dass andere Pflanzen nicht zu dicht am Kragen stehen dürfen, da die Schnecken sie
ansonsten als Brücken nutzen&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;Und natürlich sollte man sicherstellen, dass sich keine Schnecke im Inneren des Schneckenkragens befindet.
Sie verstecken sich gerne unter Steinchen oder Ästen.
Am besten lockert man den Boden innerhalb des Scheckenkragens daher einmal auf
und befördert dabei zutage tretende Schnecken&amp;nbsp;heraus.&lt;/p&gt;
&lt;p&gt;Auch wenn man alles beachtet, kann es sein, dass in der Erde noch Schneckeneier sind, die innerhalb des Kragens&amp;nbsp;schlüpfen.&lt;/p&gt;
&lt;p&gt;Man muss also dennoch regelmäßig nachschauen. Aber zumindest in meinem Garten, ist der Unterschied zwischen geschützten und ungeschützten Pflanzen&amp;nbsp;gewaltig.&lt;/p&gt;
&lt;p&gt;Die Funktionsweise ist anscheinend nicht ganz klar. Erklärungsansätze, die ich finden konnte, sind, dass der Wechsel von
&amp;#8220;senkrecht nach oben&amp;#8221; zu &amp;#8220;45° nach unten&amp;#8221; nicht im Verhaltensrepertoire von Schnecken enthalten ist. Und dass der Kragen dazu
führt, dass die Schnecken auf dem Weg nach oben den Geruch der Pflanzen verlieren und dann verwirrt wieder nach unten&amp;nbsp;kriechen.&lt;/p&gt;
&lt;h3&gt;Upgrade&lt;/h3&gt;
&lt;p&gt;Nach meinen (leidvollen) Erfahrungen finden in besonders schneckenreichen Beeten bei feuchtem Wetter einige Schnecken dennoch in den Kragen. Das scheint daran zu liegen, dass sich Schnecken in den Knick verkriechen. Von da aus kriechen sie dann später in eine zufällige Richtung &amp;#8212; entweder in den Kragen hinein oder wieder herunter. Zumindest vermute ich, dass dies der Mechanismus&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/schnecken.webp"&gt;&lt;img alt="Schnecken im Knick des Kragens" src="/img/schnecken1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wenn die Annahme richtig ist, müssen wir also nur verhindern, dass die Schnecken es sich in dem Knick gemütlich machen. In der Einleitung hatte ich kurz erwähnt, dass Schnecken Kupfer vermeiden, denn Kupfer ist giftig für Weichtiere (sowie Einzeller und viele Wassertiere). Der Mechanismus ist anscheinend, dass Schneckenschleim leicht sauer ist und bei Kontakt leicht Kupferionen löst, die für die Schnecke giftig und unangenehm sind. Dafür muss die Schnecke allerdings ausreichend lange Kontakt mit dem Kupfer haben, sodass ein Kupferdraht, der um das Beet liegt, keine Schnecken&amp;nbsp;abschreckt.&lt;/p&gt;
&lt;p&gt;Wir können aber das Kupfer nutzen, um die Schnecken davon abzuhalten, sich in dem Knick aufzuhalten, indem wir einen Streifen Kupferfolie möglichst weit oben um den Kragen kleben. Gleichzeitig ist das Kupfer dort unter dem &amp;#8220;Dach&amp;#8221; vor Regen geschützt, sodass die Exposition der Umgebung minimiert&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/schneckenkragen_kupfer.jpg"&gt;&lt;img alt="Schneckenkragen mit Kupferring" src="/img/schneckenkragen_kupfer1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Upgrade 2 &amp;#8212; Electric&amp;nbsp;Boogaloo&lt;/h3&gt;
&lt;p&gt;Wenn dies immer noch nicht ausreicht, um die Pflanzen hinreichend zu schützen, gibt es noch die Möglichkeit den Kragen zu einem Elektrozaun zu modifizieren. Dazu klebt man zwei Streifen Kupferband um den Kragen, sodass sie sich nicht berühren und schließt sie an eine 9 V Batterie an. Um die 9 V Batterie zu halten, habe ich eine Variante des Kragens mit einer Halterung und einer Öffnung für die Kabel erstellt. Damit die Batterie nicht nass wird, sollte man die Oberseite der Öffnung mit Silikonkleber&amp;nbsp;abdichten.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/schneckenkragen_batterie.jpg"&gt;&lt;img alt="Schneckenkragen mit Batteriefach" src="/img/schneckenkragen_batterie1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/schneckenkragen_elektro.jpg"&gt;&lt;img alt="Schneckenkragen mit Elektrozaun" src="/img/schneckenkragen_elektro1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wenn Schnecken nun hochkriechen, schließen sie den Stromkreis und bekommen einen Stromschlag. In der Regel sollten sie sich zurückziehen oder betäubt werden und herunterfallen. Falls diese Methode zu lethal für die Schnecken ist, kann noch ein Widerstand in Reihe an einen der Pole gelötet&amp;nbsp;werden.&lt;/p&gt;
&lt;h3&gt;Fertigung&lt;/h3&gt;
&lt;p&gt;Die Fertigung gelingt mit einem 3D-Drucker. Ich habe hierfür ein &lt;a href="https://www.printables.com/model/909211-schneckenkragen-2-electric-boogaloo-slug-collar"&gt;einfaches Modell designt&lt;/a&gt;.
Leider benötigt ein hinreichend großer Schneckenkragen, der stabil genug ist, um ihn in den Boden drücken zu können,
relativ viel Filament. Bei dem Filament sollte man darauf achten, dass es &lt;span class="caps"&gt;UV&lt;/span&gt;-beständig ist, wie &lt;span class="caps"&gt;PETG&lt;/span&gt; oder &lt;span class="caps"&gt;ASA&lt;/span&gt;.
Das sorgt dafür, dass er in der Sonne nicht spröde wird und man ihn viele Jahre nutzen&amp;nbsp;kann.&lt;/p&gt;</content><category term="Misc"></category><category term="Bild"></category><category term="3D-Druck"></category><category term="Garten"></category></entry><entry><title>Osteralbtraum</title><link href="https://blog.schawe.me/easter.html" rel="alternate"></link><published>2023-09-23T19:45:00+02:00</published><updated>2023-09-23T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2023-09-23:/easter.html</id><summary type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller zu verlassen. Aber nicht mit mir! Ich werde es Big-Calendar zeigen und hier die geheime Formel veröffentlichen, mit der man das Osterdatum&amp;nbsp;berechnet!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# golden number&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;# century&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;             &lt;span class="c1"&gt;# correction: dropped leap years&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;# correction: synchronize with moon&amp;#39;s orbit&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;         &lt;span class="c1"&gt;# find sunday&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# epact&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;                        &lt;span class="c1"&gt;# full moon in march&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;           &lt;span class="c1"&gt;# advance to next sunday&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mir persönlich gefällt besonders gut, dass jede Zeile schlimmer ist als die&amp;nbsp;vorherige.&lt;/p&gt;
&lt;p&gt;Dieser Algorithmus ist übrigens von Lilius und Clavius Ende des 16. Jahrunderts entwickelt worden. Ich bin durch eine Erwähnung in einer Übungsaufgabe in Donald Knuths &lt;em&gt;The Art of Computer Programming 1&lt;/em&gt; (Third edition, S. 159f) darauf&amp;nbsp;gestoßen.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category></entry><entry><title>Nightmare before Easter</title><link href="https://blog.schawe.me/en/easter.html" rel="alternate"></link><published>2023-09-23T19:45:00+02:00</published><updated>2023-09-23T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2023-09-23:/en/easter.html</id><summary type="html">&lt;p&gt;Easter is a holiday whose time is determined with an unnecessarily complicated rule. The first Sunday after the first full moon in Spring. Most people have no other choice than to look its date up in a calendar and trust in the calendar manufacturer. But not anymore! I will stick …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Easter is a holiday whose time is determined with an unnecessarily complicated rule. The first Sunday after the first full moon in Spring. Most people have no other choice than to look its date up in a calendar and trust in the calendar manufacturer. But not anymore! I will stick it to Big Calendar and reveal the secret formula to calculate the date of&amp;nbsp;easter!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# golden number&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;# century&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;             &lt;span class="c1"&gt;# correction: dropped leap years&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;# correction: synchronize with moon&amp;#39;s orbit&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;         &lt;span class="c1"&gt;# find sunday&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# epact&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;                        &lt;span class="c1"&gt;# full moon in march&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;           &lt;span class="c1"&gt;# advance to next sunday&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My favorite thing about it is that each line becomes more horrendous than the&amp;nbsp;previous.&lt;/p&gt;
&lt;p&gt;This algorithm was developed by Lilius and Clavius at the end of the 16th Century. I became aware of it through a mention in an exercise in Donald Knuth&amp;#8217;s &lt;em&gt;The Art of Computer Programming 1&lt;/em&gt; (Third edition, p.&amp;nbsp;159f).&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category></entry><entry><title>pirShow</title><link href="https://blog.schawe.me/pirshow.html" rel="alternate"></link><published>2022-10-08T12:31:00+02:00</published><updated>2022-10-08T12:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-10-08:/pirshow.html</id><summary type="html">&lt;p&gt;Alte Monitore sind zu Schade zum Entsorgen. Als Upcycling habe ich deshalb
einen alten Monitor zu einem digitalen Bilderrahmen in meinem Flur umfunktioniert.
Sinnvollerweise sollte er natürlich nur dann ein Bild zeigen, wenn auch jemand da ist,
der es betrachten kann. Hier möchte ich einmal kurz beschreiben, wie ich einen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alte Monitore sind zu Schade zum Entsorgen. Als Upcycling habe ich deshalb
einen alten Monitor zu einem digitalen Bilderrahmen in meinem Flur umfunktioniert.
Sinnvollerweise sollte er natürlich nur dann ein Bild zeigen, wenn auch jemand da ist,
der es betrachten kann. Hier möchte ich einmal kurz beschreiben, wie ich einen
Raspberry Pi, einen passiven Bewegungssensor und etwas Python-Code zu diesem Zweck&amp;nbsp;benutze.&lt;/p&gt;
&lt;h2&gt;Bildquellen&amp;nbsp;definieren&lt;/h2&gt;
&lt;p&gt;Die Hauptfunktionalität eines digitalen Bilderrahmens ist es natürlich Bilder anzuzeigen.
Diese Bilder sollen aus mehreren Quellen zufällig ausgewählt werden. Dabei habe ich mir
einige Flickr-Accounts über Raumfahrt und meine Twitter-Bots ausgesucht. Zuerst brauchen
wir also etwas Code, um die Bilder&amp;nbsp;herunterzuladen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flickr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flickrapi&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keys_and_secrets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;

    &lt;span class="n"&gt;url_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://farm&lt;/span&gt;&lt;span class="si"&gt;%(farm_id)s&lt;/span&gt;&lt;span class="s1"&gt;.staticflickr.com/&lt;/span&gt;&lt;span class="si"&gt;%(server_id)s&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%(photo_id)s&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%(secret)s&lt;/span&gt;&lt;span class="s1"&gt;_b.jpg&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_for_photo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url_template&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;server_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;farm_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;farm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;photo_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;flickr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flickrapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FlickrAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flickr_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flickr_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flickr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;purl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for_photo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keys_and_secrets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;

    &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consumer_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consumer_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;media&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;media&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;media_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thumb&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dann bauen wir uns einen praktischen Decorator, den wir nutzen, um unterschiedliche Accounts
als Bildquellen zu&amp;nbsp;registrieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;source_decorator&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apollo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flickr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;projectapolloarchive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;randomGraphs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomGraphs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@randomGraphs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AFractalADay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AFractalADay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@AFractalADay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies ermöglicht es dann sehr komfortabel zufällige Bilder herunterzuladen und&amp;nbsp;anzuzeigen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_image&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;image_getter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_getter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# show image&lt;/span&gt;
    &lt;span class="c1"&gt;# skipped terminating old instance of feh and aquiring a mutex&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DISPLAY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;VIEWER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-FZYx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Monitor ein- und&amp;nbsp;ausschalten&lt;/h2&gt;
&lt;p&gt;Jetzt, da wir Bilder zum Anzeigen haben, müssen wir den Monitor ein- und ausschalten, damit man sie sieht
bzw. damit wir nicht sinnlos Strom verbrauchen. Hier rufen wir wieder Kommandozeilen-Werkzeuge auf:
&lt;code&gt;tvservice&lt;/code&gt; schaltet den Standby-Modus des Monitors um und &lt;code&gt;chvt&lt;/code&gt; wechselt einmal vom X-Server weg und
wieder zurück, was den Bildschirmschoner&amp;nbsp;beendet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;

&lt;span class="n"&gt;MUTEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;
    &lt;span class="c1"&gt;# needs to run as root&lt;/span&gt;
    &lt;span class="c1"&gt;# make sure that sudo will not ask for a password for these commands&lt;/span&gt;
    &lt;span class="c1"&gt;# e.g. use visudo to add&lt;/span&gt;
    &lt;span class="c1"&gt;# piruser ALL=(ALL) NOPASSWD: /usr/bin/tvservice, /bin/chvt&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MUTEX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo tvservice -p; sleep 0.5; sudo chvt 6; sleep 0.5; sudo chvt 7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo tvservice -o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# download and show the next image&lt;/span&gt;
                &lt;span class="n"&gt;random_image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span class="caps"&gt;PIR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Jetzt müssen wir diese Funktionalität nur noch durch einen Bewegungssensor auslösen. Dazu
schließen wir einfach einen Pyroelektrischen Infrarot Sensor (&lt;span class="caps"&gt;PIR&lt;/span&gt;) an beispielsweise Pin 23 und
sagen dem Raspberry, dass er dort horchen soll, ob ein Signal&amp;nbsp;anliegt.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/pirShow.webp"&gt;&lt;img alt="Ein PIR Bewegungsensor, der an einen Raspberry Pi angeschlossen ist" src="/img/pirShow1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;GPIO&lt;/span&gt;

&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;

&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BCM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RISING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pir_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Der &lt;code&gt;pir_callback&lt;/code&gt; schaltet dann einfach den Monitor an und startet einen Timer,
der den Monitor wieder ausstellt (dieser Timer wird abgebrochen sobald der Callback
erneut aufgerufen wird, damit der Monitor an bleibt, solange jemand das Bild&amp;nbsp;betrachtet.)&lt;/p&gt;
&lt;p&gt;Der &lt;code&gt;pir_callback&lt;/code&gt; sendet außerdem auch eine &lt;span class="caps"&gt;MQTT&lt;/span&gt;-Nachricht, um die Bewegungsmeldung
auch für Home-Assistant-Automatisierungen zu nutzen, sodass die Beleuchtung im Flur
nach Sonnenuntergang nun auch durch Bewegungen ausgelöst&amp;nbsp;wird.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Künstliche Kunst</title><link href="https://blog.schawe.me/kunstliche-kunst.html" rel="alternate"></link><published>2022-10-05T18:05:00+02:00</published><updated>2022-10-05T18:05:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-10-05:/kunstliche-kunst.html</id><summary type="html">&lt;p&gt;Seit der Vorstellung von &lt;a href="https://de.wikipedia.org/wiki/DALL-E"&gt;&lt;span class="caps"&gt;DALL&lt;/span&gt;-E&lt;/a&gt; Anfang 2021 sind Text-zu-Bild-Programme
im Bewusstsein der Öffentlichkeit angekommen. &lt;span class="caps"&gt;DALL&lt;/span&gt;-E 2.0 und &lt;a href="https://en.wikipedia.org/wiki/Midjourney"&gt;Midjourney&lt;/a&gt;
haben immer wieder mit interessanten, verrückten und überraschend gut aussehenden Bildern auf sich aufmerksam
gemacht, die aber immer nur in sehr begrenztem Umfang von ausgewählten Usern auf Servern der …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seit der Vorstellung von &lt;a href="https://de.wikipedia.org/wiki/DALL-E"&gt;&lt;span class="caps"&gt;DALL&lt;/span&gt;-E&lt;/a&gt; Anfang 2021 sind Text-zu-Bild-Programme
im Bewusstsein der Öffentlichkeit angekommen. &lt;span class="caps"&gt;DALL&lt;/span&gt;-E 2.0 und &lt;a href="https://en.wikipedia.org/wiki/Midjourney"&gt;Midjourney&lt;/a&gt;
haben immer wieder mit interessanten, verrückten und überraschend gut aussehenden Bildern auf sich aufmerksam
gemacht, die aber immer nur in sehr begrenztem Umfang von ausgewählten Usern auf Servern der Betreibern
generiert werden konnten. Aber seit August 2022 gibt es mit &lt;a href="https://en.wikipedia.org/wiki/Stable_Diffusion"&gt;Stable Diffusion&lt;/a&gt;
das erste hochwertige Text-zu-Bild-Modell, dessen Neuronales Netzwerk offen ist und von
jedem (der eine Grafikkarte mit genügend Speicher hat) auf dem eigenen Computer genutzt werden&amp;nbsp;kann!&lt;/p&gt;
&lt;p&gt;Die grundlegende Funktionsweise ist, dass man dem Modell eine Bildbeschreibung, sogenannte &lt;em&gt;Prompts&lt;/em&gt;, gibt und das Modell
versucht ein Bild zu rendern, das möglichst gut zu der Beschreibung passt. Die Kunst liegt nun darin,
die Bildbeschreibung so zu formulieren, dass das resultierende Bild möglichst gut wird.
Wenn wir wissen wollen, wie so eine künstliche Intelligenz überhaupt aussieht, können wir Stable Diffusion
darum bitten uns ein Bild von einer zu malen mit dem Prompt &amp;#8220;a painting of an artificial&amp;nbsp;intelligence&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="a painting of an artificial intelligence" src="img/painting_of_ai.webp"&gt;&lt;/p&gt;
&lt;p&gt;In der Community findet man häufig Prompts, die mit vielen Adjektiven (wie &amp;#8220;intricate&amp;#8221; oder &amp;#8220;highly detailed&amp;#8221;)
oder Künstlernamen (vor allem &amp;#8220;Greg Rutkowski&amp;#8221;) gespickt sind. Für mich persönlich klingt es nach zu viel Arbeit
eine solche Liste von Schlüsselworten an eine knappe Bildbeschreibung zu hängen &amp;#8212; ich benutze schließlich
eine künstliche Intelligenz, die Bilder zeichnet, damit ich wenig Arbeit&amp;nbsp;habe!&lt;/p&gt;
&lt;p&gt;Die offensichtliche Lösung für dieses Problem ist es natürlich ein Sprachmodell zu benutzen, um Prompts zu
generieren. Glücklicherweise gibt es mit &lt;a href="https://lexica.art"&gt;lexica.art&lt;/a&gt; eine Datenbank von Prompts, die
man nutzen kann, um ein &lt;a href="https://en.wikipedia.org/wiki/GPT-2"&gt;&lt;span class="caps"&gt;GPT&lt;/span&gt;-2&lt;/a&gt; Modell zu finetunen. So kann man &lt;span class="caps"&gt;GPT&lt;/span&gt;-2
Modell mit &amp;#8220;four dimensional space whale&amp;#8221; füttern, &lt;span class="caps"&gt;GPT&lt;/span&gt;-2 macht daraus den Prompt
&amp;#8220;four dimensional space whale, with recursive spiral eyes, concept art, high detail, intimidating, cinematic, Artstation trending, octane render&amp;#8221;,
der von Stable Diffusion zu diesem Bild gerendert&amp;nbsp;wird:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein vierdimensionaler Weltraumwal" src="img/SpaceWhale2.webp"&gt;&lt;/p&gt;
&lt;p&gt;Und damit ich auch keine Arbeit damit habe, die Bilder selbst zu generieren, habe ich einen Twitter-Bot
damit beauftragt täglich ein lovecraft&amp;#8217;sches Bild zu tweeten: &lt;a href="https://twitter.com/ACthulhuADay"&gt;@ACthulhuADay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Der Glue-Code, der diesen text2prompt2image-Ablauf implementiert (also
hauptsächlich Modelle von Huggingface herunterlädt) und diesen Bot antreibt, findet
sich auf &lt;a href="https://github.com/surt91/ACthulhuADay"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Bild"></category><category term="Neural Networks"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>Analog-Digital-Analoges Thermometer</title><link href="https://blog.schawe.me/analog-digital-analoges-thermometer.html" rel="alternate"></link><published>2022-10-03T15:18:00+02:00</published><updated>2022-10-03T15:18:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-10-03:/analog-digital-analoges-thermometer.html</id><summary type="html">&lt;p&gt;Ich habe mir ein analoges Voltmeter zugelegt und möchte es als Thermometer&amp;nbsp;benutzen.&lt;/p&gt;
&lt;p&gt;Da der Widerstand von Metallen mit der Temperatur steigt, kann man Temperatur relativ gut messen, indem man
einen &lt;a href="https://de.wikipedia.org/wiki/Platin-Messwiderstand"&gt;kalibrierten Widerstand&lt;/a&gt; misst.
Daher kann man theoretisch mit einem Multimeter auch die Temperatur messen. (In der Praxis wird dies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ich habe mir ein analoges Voltmeter zugelegt und möchte es als Thermometer&amp;nbsp;benutzen.&lt;/p&gt;
&lt;p&gt;Da der Widerstand von Metallen mit der Temperatur steigt, kann man Temperatur relativ gut messen, indem man
einen &lt;a href="https://de.wikipedia.org/wiki/Platin-Messwiderstand"&gt;kalibrierten Widerstand&lt;/a&gt; misst.
Daher kann man theoretisch mit einem Multimeter auch die Temperatur messen. (In der Praxis wird dies
bei Multimetern allerdings in der Regel mithilfe eines &lt;a href="https://de.wikipedia.org/wiki/Thermoelement#Seebeck-Effekt"&gt;anderen Effektes&lt;/a&gt;&amp;nbsp;erledigt.)&lt;/p&gt;
&lt;p&gt;Da ich mir aber keine Gedanken darüber machen möchte, wie ich eine Schaltung aussehen müsste, um &lt;span class="math"&gt;\(15°\mathrm{C}\)&lt;/span&gt;
in &lt;span class="math"&gt;\(1.5 \mathrm{V}\)&lt;/span&gt; umzusetzen (vielleicht würde eine &lt;a href="https://de.wikipedia.org/wiki/Br%C3%BCckenschaltung"&gt;Brückenschaltung&lt;/a&gt;
funktionieren?), wähle ich den einfachen Weg mit einer Reihe integrierter Schaltkreise und einem&amp;nbsp;Microcontroller.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Schaltplan meines Analog-Digital-Analog-Thermometers" src="/img/analogue_temperature_circuit.svg"&gt;&lt;/p&gt;
&lt;p&gt;Hier ist ein günstiger &lt;span class="caps"&gt;DS18B20&lt;/span&gt; Temperatursensor, der von einem &lt;span class="caps"&gt;ESP8266&lt;/span&gt; ausgelesen wird. Dieser steuert dann einen
&lt;span class="caps"&gt;MCP4725&lt;/span&gt; Digital-Analog-Wandler so an, dass er eine Spannung ausgibt, deren Wert in Volt ein Zehntel der gemessenen
Temperatur ist. Diese Spannung wird dann von meinem alten Voltmeter gemessen und angezeigt. Hier ist es also gerade &lt;span class="math"&gt;\(24°\mathrm{C}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/analogue_temperature.webp"&gt;&lt;img alt="Foto meines Analog-Digital-Analog-Thermometers" src="/img/analogue_temperature1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hier ist übrigens der simple Code, der beispielsweise mit der Arduino &lt;span class="caps"&gt;IDE&lt;/span&gt; auf einen &lt;span class="caps"&gt;ESP8266&lt;/span&gt; geflasht werden&amp;nbsp;kann:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;Wire.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;Adafruit_MCP4725.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;OneWire.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;DallasTemperature.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define ONE_WIRE_BUS D4&lt;/span&gt;
&lt;span class="cp"&gt;#define MCP4725In A0&lt;/span&gt;

&lt;span class="n"&gt;Adafruit_MCP4725&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MCP4725&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;OneWire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;oneWire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ONE_WIRE_BUS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;DallasTemperature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DS18B20&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;oneWire&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DS18B20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 0x60 is the I2C address of my MCP4725A0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MCP4725&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getTemperature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;DS18B20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestTemperatures&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DS18B20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTempCByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;85.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;-127.0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setVoltage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voltageOut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MCP4725&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setVoltage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voltageOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// read it for testing and maybe calibrating&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adcInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MCP4725In&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voltageIn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adcInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1024.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Expected Voltage: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Measured Voltage: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voltageIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getTemperature&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;setVoltage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// send temperature to the serial console&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dtostrf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;temperatureString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperatureString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="C"></category><category term="Code"></category><category term="Bild"></category><category term="Microcontroller"></category></entry><entry><title>Heimkinoautomatisierung</title><link href="https://blog.schawe.me/heimkinoautomatisierung.html" rel="alternate"></link><published>2022-07-30T17:30:00+02:00</published><updated>2022-07-30T17:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-07-30:/heimkinoautomatisierung.html</id><summary type="html">&lt;p&gt;Ich habe seit langem einen Beamer statt eines Fernsehers, was einige Vorteile
mit sich bringt: ein sehr großes Bild, kein im Weg stehender Fernseher und
die perfekte Motivation Hausautomatisierung in Angriff zu nehmen. Schließlich
ist der Ablauf, bevor ein Film starten kann, durchaus&amp;nbsp;aufwendig:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Die Jalousien werden&amp;nbsp;geschlossen.&lt;/li&gt;
&lt;li&gt;Die Leinwand …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Ich habe seit langem einen Beamer statt eines Fernsehers, was einige Vorteile
mit sich bringt: ein sehr großes Bild, kein im Weg stehender Fernseher und
die perfekte Motivation Hausautomatisierung in Angriff zu nehmen. Schließlich
ist der Ablauf, bevor ein Film starten kann, durchaus&amp;nbsp;aufwendig:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Die Jalousien werden&amp;nbsp;geschlossen.&lt;/li&gt;
&lt;li&gt;Die Leinwand fährt&amp;nbsp;herunter.&lt;/li&gt;
&lt;li&gt;Der &lt;span class="caps"&gt;AV&lt;/span&gt;-Receiver wird&amp;nbsp;angeschaltet.&lt;/li&gt;
&lt;li&gt;Der Beamer&amp;nbsp;startet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tatsächlich hatte ich vor Jahren einen selbstgeschriebenen Python-Server auf
einem Raspberry Pi aufgesetzt, der diese Steuerung übernommen hat. Aber vor kurzem
habe ich ihn ersetzt durch die Anbindung von einem &lt;span class="caps"&gt;ESP&lt;/span&gt; 8266 mittels
&lt;a href="https://esphome.io/"&gt;&lt;span class="caps"&gt;ESP&lt;/span&gt; Home&lt;/a&gt; an &lt;a href="https://www.home-assistant.io/"&gt;Home Assistant&lt;/a&gt;.
In meinem Setup kommt von Infrarot (&lt;span class="caps"&gt;IR&lt;/span&gt;) Fernbedienung über 433 MHz Funk (&lt;span class="caps"&gt;RF&lt;/span&gt;) und Transistoren,
die über Fernbedienungskontakte gelötet sind, bis zu einer seriellen &lt;span class="caps"&gt;RS232&lt;/span&gt; Schnittstelle
alles vor. Es sollte also für jeden Leser etwas dabei&amp;nbsp;sein.&lt;/p&gt;
&lt;h2&gt;Die&amp;nbsp;Jalousien&lt;/h2&gt;
&lt;p&gt;Meine Jalousien wurden ursprünglich per Hand mit einem Gurt geöffnet und geschlossen.
Der einfachste Weg solche Rollläden weniger manuell zu machen, sind nachrüstbare Gurtwickler,
die die Muskelkraft durch einen Servomotor ersetzen. Ich habe mir einen relativ günstigen
elektrischen Gurtwickler mit einer 433 MHz Fernbedienung gekauft. Der Plan war eigentlich
mit einem 433 MHz Receiver die Signale aufzuzeichnen und danach mit einem Sender wieder zu&amp;nbsp;schicken.&lt;/p&gt;
&lt;p&gt;Blöderweise hat sich (unter Verwendung von Audacity als Offline-Oszilloskop) herausgestellt,
dass sich das Signal bei jedem Knopfdruck ändert &amp;#8212; anscheinend nutzen meine Gurtwickler
ein Protokoll mit Schlüssel, was beispielsweise für sicherheitsrelevante Anwendungen wie
Garagentore verwendet&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Die einfache Lösung dafür ist, die Fernbedienung auseinander zu bauen und die Taster, die
normalerweise per Hand ausgelöst werden, mit Transistoren zu überbrücken, die dann über
&lt;span class="caps"&gt;GPIO&lt;/span&gt; Pins ausgelöst werden&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/screen_switch.webp"&gt;&lt;img alt="Das ist zwar die Fernbedienung von der Leinwand, aber das Prinzip ist das gleiche und ich habe es versäumt ein Foto von der Jalousien-Fernbedienung zu machen" src="/img/screen_switch1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und die Konfiguration in &lt;span class="caps"&gt;ESP&lt;/span&gt; Home ist&amp;nbsp;selbsterklärend.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gpio&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;blinds_up_pin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;D7&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;blinds_up&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Jalusinen hoch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mdi:roller-shade&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;blinds_up_pin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;300ms&lt;/span&gt;
&lt;span class="c1"&gt;# skipped blinds down&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Die&amp;nbsp;Leinwand&lt;/h2&gt;
&lt;p&gt;Motorisierte Leinwände haben oft einen Eingang für einen 3,5 mm Klinkenstecker, den man direkt mit
dem Beamer verbinden kann. Leider nicht die Leinwand, die ich habe. Aber halb so schlimm, denn
sie hat eine Funkfernbedienung und ich habe ja noch die 433 MHz Hardware, die für die Jalousien
gedacht waren. Und tatsächlich nutzt meine Leinwand ein simples Protokoll &amp;#8212; aber auf 315&amp;nbsp;Mhz.&lt;/p&gt;
&lt;p&gt;Sobald wir also einen 315 MHz Transmitter und Receiver haben, können wir die Codes aufzeichnen und die &lt;span class="caps"&gt;ESP&lt;/span&gt; Home
Konfiguration anpassen. Dafür definieren wir einen &lt;code&gt;remote_transmitter&lt;/code&gt; für den passenden &lt;span class="caps"&gt;GPIO&lt;/span&gt; Pin
und einen &lt;code&gt;switch&lt;/code&gt;, der den Code für &amp;#8220;herunter fahren&amp;#8221; sendet, die passende Zeit wartet und dann den Code
für &amp;#8220;stopp&amp;#8221; sendet. Eine Stolperfalle ist, dass der Code mittels &lt;code&gt;repeat&lt;/code&gt; mehrmals gesendet werden&amp;nbsp;muss.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;remote_receiver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RF315_Recv&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;D5&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;inverted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;INPUT_PULLUP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;

&lt;span class="nt"&gt;remote_transmitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RF315&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;D1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;carrier_duty_percent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;100%&lt;/span&gt;

&lt;span class="nt"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Screen&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mdi:projector-screen&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;optimistic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;turn_on_action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;remote_transmitter.transmit_rc_switch_raw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;transmitter_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RF315&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;000110110111100111000100&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;wait_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;39.0s&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;remote_transmitter.transmit_rc_switch_raw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;transmitter_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RF315&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;000110110111100111001000&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;wait_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0s&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# turn_off_action skipped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Der &lt;span class="caps"&gt;AV&lt;/span&gt;-Receiver&lt;/h2&gt;
&lt;p&gt;Dies ist die erste Komponente, die nach Plan läuft: Der &lt;span class="caps"&gt;AV&lt;/span&gt;-Receiver hat eine &lt;span class="caps"&gt;IR&lt;/span&gt; Fernbedienung
und der Hersteller veröffentlicht die Codes sogar selbst, sodass ich mir das Aufzeichnen sparen kann.
Falls man diesen Luxus nicht that, kann man an den &lt;span class="caps"&gt;ESP&lt;/span&gt; einen &lt;span class="caps"&gt;IR&lt;/span&gt; Receiver wie einen &lt;span class="caps"&gt;TSOP&lt;/span&gt; 4838
anschließen und mit dem &lt;a href="https://esphome.io/components/remote_receiver.html"&gt;&lt;code&gt;remote_receiver&lt;/code&gt;&lt;/a&gt;&amp;nbsp;auswerten.&lt;/p&gt;
&lt;p&gt;Um die Signale zu senden, reicht eine Infrarotdiode, die ich über einen Transistor&amp;nbsp;schalte.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Infrarot Sender" src="/img/ir_esp.svg"&gt;&lt;/p&gt;
&lt;p&gt;Für &lt;span class="caps"&gt;ESP&lt;/span&gt; Home müssen wir einen weiteren &lt;code&gt;remote_transmitter&lt;/code&gt; definieren. Damit die Codes über die &lt;span class="caps"&gt;IR&lt;/span&gt; Diode
und nicht über den &lt;span class="caps"&gt;RF&lt;/span&gt; Sender verschickt werden, müssen wir dem Transmitter eine Id zuweisen und diese später
mit &lt;code&gt;transmitter_id&lt;/code&gt; referenzieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;remote_transmitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;IR&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;D2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;carrier_duty_percent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;50%&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;av_on&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;AV on&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mdi:audio-video&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;on_press&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;remote_transmitter.transmit_pioneer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;transmitter_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;IR&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;rc_code_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0xA51A&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# skipped other buttons&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Der&amp;nbsp;Beamer&lt;/h2&gt;
&lt;p&gt;Den Beamer könnte man natürlich auch per &lt;span class="caps"&gt;IR&lt;/span&gt; steuern, aber mein Modell, der BenQ W1070, hat eine &lt;span class="caps"&gt;RS232&lt;/span&gt;
Schnittstelle, die nicht nur etwas zuverlässiger als die Infrarotschnittstelle ist, sondern es auch
erlaubt den aktuellen Zustand auszulesen. Dazu können wir bspw. einen &lt;span class="caps"&gt;MAX3232&lt;/span&gt; an die &lt;span class="caps"&gt;UART&lt;/span&gt;
Pins anschließen und die Beispielkonfiguration für den custom &lt;code&gt;text_sensor&lt;/code&gt; aus der &lt;span class="caps"&gt;ESP&lt;/span&gt; Home
Dokumentation&amp;nbsp;kopieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# disable logging over uart&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;baud_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;

&lt;span class="nt"&gt;uart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;uart_bus&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tx_pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;rx_pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# choose same value set in the projector settings&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;baud_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;9600&lt;/span&gt;

&lt;span class="nt"&gt;text_sensor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# this needs the .h file from https://esphome.io/cookbook/uart_text_sensor.html&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;custom&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;App.register_component(my_custom_sensor);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;return {my_custom_sensor};&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;text_sensors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uart_readline&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Projector&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Power&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mdi:projector&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;if (id(uart_readline).state == &amp;quot;*POW=ON#&amp;quot;) {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;return true;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;} else if(id(uart_readline).state == &amp;quot;*POW=OFF#&amp;quot;) {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;return false;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;} else {&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;return {};&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="no"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;turn_on_action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uart.write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\r*pow=on#\r&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;turn_off_action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uart.write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\r*pow=off#\r&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Da dies doch eine ganze Menge Komponenten sind, die ich per Jumper-Kabel an den &lt;span class="caps"&gt;ESP&lt;/span&gt;
geschlossen habe, ist noch ein Gehäuse nötig. Dazu nutze ich die beste Alternative zu
einem 3D-Drucker:&amp;nbsp;Lego!&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/heimkinoautomatisierung.webp"&gt;&lt;img alt="Alle Komponenten mittels Lego an der Beamerhalterung befestigt" src="/img/heimkinoautomatisierung1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Die Aufhängung des Beamers bietet dabei den optimalen Ort für eine provisorische
Befestigung, die nahe am &lt;span class="caps"&gt;RS232&lt;/span&gt;-Eingang des Beamers ist und einen guten Blick
auf den &lt;span class="caps"&gt;IR&lt;/span&gt;-Empfänger des &lt;span class="caps"&gt;AV&lt;/span&gt;-Receivers&amp;nbsp;hat.&lt;/p&gt;
&lt;p&gt;Die gesamte &lt;span class="caps"&gt;EPS&lt;/span&gt;-Home-Konfigurationsdatei steht auch als
&lt;a href="https://gist.github.com/surt91/dde1e7986cda0177a7b790930edb7230"&gt;GitHub Gist&lt;/a&gt;&amp;nbsp;bereit.&lt;/p&gt;
&lt;p&gt;Das ganze Setup wird abgerundet von einem selbstgebauten Schalter (mit Cherry Blue Switches),
um den Kinomodus zu starten und zu beenden, sowie Home-Assistant-Automatisierungen,
die das Licht kontrollieren: Licht aus wenn der Film startet, Licht gedimmt, wenn er&amp;nbsp;pausiert.&lt;/p&gt;</content><category term="Tech"></category><category term="Home Assistant"></category><category term="ESPHome"></category><category term="Microcontroller"></category></entry><entry><title>git subtree</title><link href="https://blog.schawe.me/git-subtree.html" rel="alternate"></link><published>2022-07-24T17:31:00+02:00</published><updated>2022-07-24T17:31:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2022-07-24:/git-subtree.html</id><summary type="html">&lt;p&gt;Wir alle kennen die Situation: Eine neue Idee, mit der wir unser bestehendes Projekt mit dem Namen &lt;code&gt;alt&lt;/code&gt; erweitern, sodass wir sogleich im zugehörigen Repository ein Unterverzeichnis &lt;code&gt;neueIdee&lt;/code&gt; anlegen. Die Idee stellt sich dann als so gut heraus, dass sie auch außerhalb des Projektes &lt;code&gt;alt&lt;/code&gt; nützlich wäre. Es wäre also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wir alle kennen die Situation: Eine neue Idee, mit der wir unser bestehendes Projekt mit dem Namen &lt;code&gt;alt&lt;/code&gt; erweitern, sodass wir sogleich im zugehörigen Repository ein Unterverzeichnis &lt;code&gt;neueIdee&lt;/code&gt; anlegen. Die Idee stellt sich dann als so gut heraus, dass sie auch außerhalb des Projektes &lt;code&gt;alt&lt;/code&gt; nützlich wäre. Es wäre also sehr sinnvoll ein neues Repository &lt;code&gt;neu&lt;/code&gt; anzulegen, das nur den Inhalt des Unterverzeichnisses &lt;code&gt;neueIdee&lt;/code&gt; enthalten soll. Tatsächlich scheint dieses Problem wohl so oft vorzukommen, dass es seit 2012 ein extra git Subcommand für diesen Zweck (und etwas kompliziertere Fälle) gibt: &lt;code&gt;git subtree&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Neues Repository aus einem&amp;nbsp;Unterverzeichnis&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wir wechseln also in das Repository &lt;code&gt;alt&lt;/code&gt; führen dort folgendes Kommando&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;neueIdee/&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="o"&gt;=&lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies erzeugt in diesem Repository zunächst einen neuen Branch &lt;code&gt;nurNeueIdeeBranch&lt;/code&gt;, der nur den Inhalt von &lt;code&gt;neueIdee&lt;/code&gt; hat &amp;#8212; also ein anderes Wurzelverzeichnis. Dieser Branch enthält also eine neu geschriebene History, die nur aus Commits besteht, die (auch) Einfluss auf Dateien unterhalb von &lt;code&gt;neueIdee&lt;/code&gt; hatten.&lt;/p&gt;
&lt;p&gt;Nun können wir unser neues Repository &lt;code&gt;neu&lt;/code&gt; anlegen und den soeben erzeugten Branch&amp;nbsp;pullen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;neu&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;neu
git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und schon haben wir ein neues Repository, das nur den gewünschten Inhalt&amp;nbsp;hat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ main.rs
neu/
├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Möglicherweise wollen wir noch einen Commit im alten Repository tätigen, der das &lt;code&gt;neueIdee&lt;/code&gt; Unterverzeichnis löscht. Möglicherweise müssen wir im neuen Repository noch Änderungen am Infrastrukturcode&amp;nbsp;vornehmen.&lt;/p&gt;
&lt;h2&gt;Verschieben eines Unterverzeichnisses in ein bestehendes&amp;nbsp;Repository&lt;/h2&gt;
&lt;p&gt;Womöglich fällt uns aber auch auf, dass der Code besser in ein anderes Repository statt eines Neuen passt? Vielleicht weil wir gerade dabei sind unseren Code in einem Monorepo zu sammeln? Auch kein&amp;nbsp;Problem!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wir haben oben  bereits den &lt;code&gt;nurNeueIdeeBranch&lt;/code&gt; erstellt, den wir nun in das Unterverzeichnis &lt;code&gt;guteIdee&lt;/code&gt;des Repositorys &lt;code&gt;monorepo&lt;/code&gt; einfügen wollen. Auch hier hilft uns wieder &lt;code&gt;git subtree&lt;/code&gt; weiter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;monorepo
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;mitGuterIdeeBranch
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;mitGuterIdeeBranch
git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;guteIdee/&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;nurNeueIdeeBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sobald wir uns in dem neuen Branch &lt;code&gt;mitGuterIdeeBranch&lt;/code&gt; überzeugt haben, dass alles zu unserer Zufriedenheit geklappt hat und wir möglicherweise noch Infrastrukturcode angepasst haben, können wir den Branch nach &lt;code&gt;main&lt;/code&gt; mergen und sind&amp;nbsp;fertig.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alt/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
├─ guteIdee/
│  ├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>git subtree</title><link href="https://blog.schawe.me/en/git-subtree.html" rel="alternate"></link><published>2022-07-24T17:31:00+02:00</published><updated>2022-07-24T17:31:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2022-07-24:/en/git-subtree.html</id><summary type="html">&lt;p&gt;Who does not know this common situation: We have a new Idea to extend our existing Project &lt;code&gt;old&lt;/code&gt;. So we create a subdirectory &lt;code&gt;newIdea&lt;/code&gt; in the corresponding repository. It turns out that the idea was so good that it would also be useful outside of the project &lt;code&gt;old&lt;/code&gt;. It would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who does not know this common situation: We have a new Idea to extend our existing Project &lt;code&gt;old&lt;/code&gt;. So we create a subdirectory &lt;code&gt;newIdea&lt;/code&gt; in the corresponding repository. It turns out that the idea was so good that it would also be useful outside of the project &lt;code&gt;old&lt;/code&gt;. It would be sensible to create a new repository &lt;code&gt;new&lt;/code&gt; which should only contain the subdirectory &lt;code&gt;newIdea&lt;/code&gt;. In fact, this problem seems to be so common that there is a special git subcommand since 2012 for this purpose (and more complicated cases): &lt;code&gt;git subtree&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;New repository from&amp;nbsp;subdirectory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ newIdea/
│  ├─ lib.rs
├─ main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So inside the directory &lt;code&gt;old&lt;/code&gt; we execute the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;newIdea/&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="o"&gt;=&lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new Branch &lt;code&gt;onlyNewIdeaBranch&lt;/code&gt; which only contains the contents of &lt;code&gt;newIdea&lt;/code&gt;, i.e., a new root directory. So this branch has a newly written history consisting only of commits with influence on files below of &lt;code&gt;newIdea/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we can create the new repository &lt;code&gt;new&lt;/code&gt; and pull the newly created branch.Branch&amp;nbsp;pullen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new
git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;../alt&lt;span class="w"&gt; &lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maybe we want to delete the &lt;code&gt;newIdea&lt;/code&gt; subdirectory from the &lt;code&gt;old&lt;/code&gt; repository. Probably we have to change infrastructure code in the &lt;code&gt;new&lt;/code&gt; repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ main.rs
new/
├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Move a subdirectory into an existing&amp;nbsp;repository&lt;/h2&gt;
&lt;p&gt;Possibly we notice that the code would fit better into an existing repository instead of a new one? Perhaps because we are in the process of moving our code into a monorepo? No problem at&amp;nbsp;all!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ newIdea/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We already created the &lt;code&gt;onlyNewIdeaBranch&lt;/code&gt;, which we want to move into the subdirectory &lt;code&gt;goodIdea&lt;/code&gt; of the &lt;code&gt;monorepo&lt;/code&gt;. Again, we can solve it with &lt;code&gt;git subtree&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;monorepo
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;withGoodIdeadBranch
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;withGoodIdeadBranch
git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="o"&gt;=&lt;/span&gt;goodIdea/&lt;span class="w"&gt; &lt;/span&gt;../old&lt;span class="w"&gt; &lt;/span&gt;onlyNewIdeaBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As soon as we ensured that our new Branch &lt;code&gt;withGoodIdeadBranch&lt;/code&gt; looks good and we modified the infrastructure code, we can merge it into&amp;nbsp;main.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;old/
├─ neueIdee/
│  ├─ lib.rs
├─ main.rs
monorepo/
├─ project1/
├─ project2/
├─ goodIdea/
│  ├─ lib.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Convex hulls of random walks in higher dimensions: A large deviation study</title><link href="https://blog.schawe.me/paper-convex-highdim.html" rel="alternate"></link><published>2022-05-28T16:08:00+02:00</published><updated>2022-05-28T16:08:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-28:/paper-convex-highdim.html</id><summary type="html">&lt;p&gt;Die Frage wie groß das Revier eines Tieres ist, ist in konkreten Fällen für Biologen
interessant und dank &lt;span class="caps"&gt;GPS&lt;/span&gt;-Sendern kann man es heutzutage sogar empirisch untersuchen. Aus der
Punktwolke der besuchten Orte kann man eine Fläche abschätzen &amp;#8212; im einfachsten Fall
indem man die konvexe Hülle um alle besuchten Orte …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Die Frage wie groß das Revier eines Tieres ist, ist in konkreten Fällen für Biologen
interessant und dank &lt;span class="caps"&gt;GPS&lt;/span&gt;-Sendern kann man es heutzutage sogar empirisch untersuchen. Aus der
Punktwolke der besuchten Orte kann man eine Fläche abschätzen &amp;#8212; im einfachsten Fall
indem man die konvexe Hülle um alle besuchten Orte&amp;nbsp;zeichnet.&lt;/p&gt;
&lt;p&gt;Als Physiker sind mir echte Tiere zu kompliziert, sodass ich stattdessen annehme,
dass sie punktförmig sind und ihre Bewegung ein &lt;em&gt;Random Walk&lt;/em&gt; in einer isotropen
Umgebung ist. Also springen meine idealisierten Tiere unabhängig von ihren bisherigen
Handlungen zu ihrem nächsten Aufenthaltsort &amp;#8212; der Abstand vom aktuellen Punkt ist dabei
in jeder Dimension unabhängig und&amp;nbsp;normalverteilt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In jeder Dimension?&lt;/em&gt; Ja, genau! Wir wollen schließlich auch das Revierverhalten von
vierdimensionalen Space Whales&amp;nbsp;untersuchen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein vierdimensionaler Weltraumwal, oder was Stable Diffusion sich darunter vorstellt" src="/img/SpaceWhale.webp"&gt;&lt;/p&gt;
&lt;p&gt;Spaß beiseite, in dieser Veröffentlichung geht es natürlich eher um fundamentale
Eigenschaften von Random Walks &amp;#8212; einer der einfachsten und deshalb am besten
untersuchten Markow-Prozesse. Und zwar im Hinblick auf Large Deviations,
die extrem unwahrscheinlichen Ereignisse, die weit jenseits der Möglichkeiten
von konventionellen Sampling-Methoden liegen. Details hierzu sind am besten
direkt im &lt;a href="https://academic.schawe.me/pdf/2017_convex_highdim_PRE.pdf"&gt;Artikel&lt;/a&gt; oder mit einer
Menge Hintergrundinformationen und ausführlicher als für ein Blog angemessen
in dem entsprechenden Kapitel und Anhang meiner &lt;a href="https://academic.schawe.me/pdf/dissertation.pdf"&gt;Dissertation&lt;/a&gt;
nachzulesen. Insbesondere ist dort auch beschrieben wie die geometrischen
Unterprobleme effizient gelöst werden können, auf die wir im Verlauf dieses
Blogposts stoßen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Das Problem eine konvexe Hülle zu finden ist einerseits einfach zu begreifen,
schön geometrisch und sehr gut untersucht. Dadurch sind überraschend viele
Algorithmen bekannt, die unterschiedliche Vor- und Nachteile&amp;nbsp;haben.&lt;/p&gt;
&lt;p&gt;Im Folgenden möchte ich deshalb ein paar Methoden vorstellen, wie man effizient
die konvexe Hülle einer Punktmenge bestimmen kann, und dies mit animierten gifs von
Punkten und Strichen visualisieren. Der Code zur Erstellung der Visualisierungen
ist übrigens in Rust geschrieben und auf &lt;a href="https://github.com/surt91/convex_hulls"&gt;GitHub&lt;/a&gt; zu&amp;nbsp;finden.&lt;/p&gt;
&lt;h2&gt;Andrew&amp;#8217;s Monotone&amp;nbsp;Chain&lt;/h2&gt;
&lt;p&gt;In zwei Dimensionen kann man ausnutzen, dass die konvexe Hülle ein Polygon ist, das
man durch die Reihenfolge der Eckpunkte definieren kann. Die grundlegende Idee ist
also die Punkte im Uhrzeigersinn zu sortieren, in dieser Reihenfolge, mit dem
Punkt ganz links startend, alle zu einem Polygon hinzuzufügen und dabei darauf
zu achten, dass die drei neusten Punkte des Polygons ein negativ orientiertes Dreieck
bilden, also dass sie im &amp;#8220;Uhrzeigersinn drehen&amp;#8221;. Wenn das nicht der Fall ist,
wird der mittlere Punkt&amp;nbsp;entfernt.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sechs Schritte von Andrew's Monotone Chain -- oder Graham Scan" class="invertable" src="/img/ch_andrew_steps.webp"&gt;&lt;/p&gt;
&lt;p&gt;Dies ist übrigens die ursprüngliche Variante, der &lt;em&gt;Graham Scan&lt;/em&gt;. Andrew verbesserte
diesen Algorithmus dadurch, dass nicht im Uhrzeigersinn sortiert werden muss, sondern
man lexikographisch nach horizontaler Koordinate (bei Gleichstand entscheidet die
vertikale Koordinate) sortiert. Dann bildet dieser Algorithmus die obere Hälfte der Hülle
und wenn man ihn rückwärts auf die sortierten Punkte anwendet, die untere&amp;nbsp;Hälfte.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Andrew's Monotone Chain" class="invertable" src="/img/ch_andrew.gif"&gt;&lt;/p&gt;
&lt;p&gt;Die Komplexität für &lt;span class="math"&gt;\(n\)&lt;/span&gt; Punkte ist somit &lt;span class="math"&gt;\(\mathcal{O}(n \ln n)\)&lt;/span&gt; limitiert durch das&amp;nbsp;Sortieren.&lt;/p&gt;
&lt;h2&gt;Jarvis March: Gift&amp;nbsp;Wrapping&lt;/h2&gt;
&lt;p&gt;Ein Geschenk einzupacken ist ein relativ intuitiver Prozess: Wir bewegen das Papier
so lange herunter, bis wir auf einen Punkt des Geschenkes treffen, wo es hängen bleibt
Dann wickeln wir weiter, bis wir auf den nächsten Punkt stoßen. Dabei streben wir an die
konvexe Hülle zu finden, denn sie ist das Optimum möglichst wenig Papier zu verbrauchen
während wir die Punktwolke einhüllen, die wir verschenken wollen. Und offenbar klappt das
auch in drei&amp;nbsp;Dimensionen!&lt;/p&gt;
&lt;p&gt;In einem Computer ist es allerdings einfacher das Geschenkpapier von innen aus der Punktwolke
heraus nach außen zu falten. Für jede Facette testen wir also jeden der &lt;span class="math"&gt;\(n\)&lt;/span&gt; Punkte in der
Punktwolke darauf, ob er links von unserem Stück Geschenkpapier liegt. Wenn ja, falten wir das
Papier weiter. Sobald wir alle &lt;span class="math"&gt;\(n\)&lt;/span&gt; Punkte ausprobiert haben, wissen wir, dass das Geschenkpapier
an der richtigen Stelle liegt, sodass anfangen können die nächste Facette mit dem Geschenkpapier
zu bilden indem wir von innen alle Punkte&amp;nbsp;durchtesten.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jarvis March: Gift Wrapping" class="invertable" src="/img/ch_jarvis.gif"&gt;&lt;/p&gt;
&lt;p&gt;Interessanterweise müssen wir also für jeden der &lt;span class="math"&gt;\(h\)&lt;/span&gt; Punkte, die zur Hülle gehören &lt;span class="math"&gt;\(\mathcal{O}(n)\)&lt;/span&gt; Punkte
prüfen, sodass die Komplexität abhängig ist vom Ergebnis: &lt;span class="math"&gt;\(\mathcal{O}(n&amp;nbsp;h)\)&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Chan&amp;#8217;s&amp;nbsp;Algorithm&lt;/h2&gt;
&lt;p&gt;Wir haben also einen &lt;span class="math"&gt;\(\mathcal{O}(n \ln n)\)&lt;/span&gt; und einen &lt;span class="math"&gt;\(\mathcal{O}(n h)\)&lt;/span&gt; Algorithmus kennen gelernt,
aber können wir noch besser werden? Ja! &lt;span class="math"&gt;\(\mathcal{O}(n \ln h)\)&lt;/span&gt; ist die theoretische untere Komplexitätsgrenze
für 2D konvexe Hüllen. Beispielsweise Chans Algorithmus erreicht diese Komplexität mit einem trickreichen
zweistufigen&amp;nbsp;Prozess.&lt;/p&gt;
&lt;p&gt;Zuerst teilt man die Punktwolke in zufällige Untermengen mit jeweils etwa &lt;span class="math"&gt;\(m\)&lt;/span&gt; Punkten ein. Für jede berechnet
man die konvexe Hülle, bspw. mit Andrews Algorithmus. Dann benutzt man Jarvis March, um die Hülle zu konstruieren,
dabei muss man allerdings nicht mehr alle Punkte durchprobieren, sondern nur noch die Tangenten, die in der Animation
mit grünen Strichen gekennzeichnet sind. Die Tangenten kann man für jede der &lt;span class="math"&gt;\(k = \lceil \frac{n}{m} \rceil\)&lt;/span&gt; Sub-Hüllen
effizient in &lt;span class="math"&gt;\(\mathcal{O}(m)\)&lt;/span&gt; bestimmen. Dazu benutzt man einem Algorithmus, der an eine Binärsuche erinnert.
Zusammen hat dies also eine Komplexität von &lt;span class="math"&gt;\(\mathcal{O}((n+kh) \ln m)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Aber ich hatte &lt;span class="math"&gt;\(\mathcal{O}(n \ln h)\)&lt;/span&gt; versprochen. Nun, um das zu erreichen, müssen wir einfach nur &lt;span class="math"&gt;\(m \approx h\)&lt;/span&gt; wählen.
Aber wie kommen wir an &lt;span class="math"&gt;\(h\)&lt;/span&gt; bevor wir die Hülle berechnet haben? Der Trick ist, mit einem niedrigen &lt;span class="math"&gt;\(m\)&lt;/span&gt; zu starten,
dann nur &lt;span class="math"&gt;\(m\)&lt;/span&gt; Schritte des Jarvis-Teils des Algorithmus durchzuführen und wenn die Hülle dann noch nicht fertig ist
&lt;span class="math"&gt;\(m\)&lt;/span&gt; zu erhöhen und es wieder von vorne zu beginnen. Damit dieser iterative Teil des Algorithmus nicht unsere Komplexität
erhöht, muss &lt;span class="math"&gt;\(m\)&lt;/span&gt; schnell genug wachsen, was in der Regel durch Quadrieren des alten Werten erreicht&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chan's Algorithm" class="invertable" src="/img/ch_chan.gif"&gt;&lt;/p&gt;
&lt;h2&gt;QuickHull&lt;/h2&gt;
&lt;p&gt;Zuletzt möchte ich hier noch QuickHull vorstellen, weil dieser Algorithmus meiner Meinung nach einen sehr hübschen
rekursiven &lt;em&gt;divide and conquer&lt;/em&gt; Ansatz verfolgt &amp;#8212; ein bisschen wie QuickSort.
In zwei Dimensionen starten wir mit dem Punkt ganz links &lt;span class="math"&gt;\(A\)&lt;/span&gt; und ganz rechts &lt;span class="math"&gt;\(B\)&lt;/span&gt;. Dann finden wir den Punkt &lt;span class="math"&gt;\(C\)&lt;/span&gt; der
am weitesten entfernt ist von der Strecke &lt;span class="math"&gt;\(\overline{AB}\)&lt;/span&gt; und links von der Strecke ist. Diesen Schritt wiederholen wir
rekursiv auf den Strecken &lt;span class="math"&gt;\(\overline{AC}\)&lt;/span&gt; und &lt;span class="math"&gt;\(\overline{CB}\)&lt;/span&gt; (und &lt;span class="math"&gt;\(\overline{BA}\)&lt;/span&gt; für die untere&amp;nbsp;Hälfte.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="QuickHull" class="invertable" src="/img/ch_quickhull.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Mehr&amp;nbsp;Dimensionen&lt;/h2&gt;
&lt;p&gt;Aber ich hatte Space Whales versprochen, also können wir uns nicht mit 2D zufrieden geben!
Tatsächlich müssen wir schon beim Verallgemeinern auf 3D aufpassen. Schließlich konnten
wir für 2D die konvexe Hülle als Sequenz von Punkten repräsentieren. Für höhere Dimensionen
müssen wir sie allerdings als Menge von Facetten repräsentieren. Glücklicherweise tauchen
für noch höhere Dimensionen dann keine weiteren Schwierigkeiten mehr auf &amp;#8212; abgesehen von der
Grundsätzlichen Schwierigkeit, dass höherdimensionale Gebilde deutlich größere Oberflächen
haben und somit die konvexe Hülle aus deutlich mehr Facetten besteht, sodass die untere Schranke
für die Komplexität für Dimension &lt;span class="math"&gt;\(d\)&lt;/span&gt; durch &lt;span class="math"&gt;\(\mathcal{O}(n^{\lfloor d / 2 \rfloor})\)&lt;/span&gt; gegeben&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Bevor ich hier QuickHull für &lt;span class="math"&gt;\(d=3\)&lt;/span&gt; beschreibe, möchte ich darauf hinweisen, dass es die
&lt;a href="http://www.qhull.org/"&gt;&lt;code&gt;qhull&lt;/code&gt; Implementierung&lt;/a&gt; gibt, die sich bspw. auch um die subtilen numerischen
Fehler kümmert, die sich bei sehr spitzen Winkeln einschleichen&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;Grundsätzlich bleibt das Vorgehen gleich: Wir starten mit einem &lt;span class="math"&gt;\(d\)&lt;/span&gt;-dimensionalen Simplex, also für &lt;span class="math"&gt;\(d=3\)&lt;/span&gt;
mit einem Tetraeder, dessen Eckpunkte zur konvexen Hülle gehören. Dann führen wir für jede Facette
den rekursiven Schritt durch: Finde den Punkt, der am weitesten &lt;em&gt;vor&lt;/em&gt; der Facette (also außerhalb des Tetraeders) ist.
Diesen Punkt nennt man &lt;em&gt;Eye-Point&lt;/em&gt;. Denn es reicht jetzt im Gegensatz zum 2D Fall nicht mehr
einfach neue Facetten aus den Rändern und dem neuen Punkt zu bilden. Stattdessen müssen wir alle
Facetten, deren Vorderseite (also Außenseite) wir vom Eye-Point aus sehen können entfernen und
neue Facetten mit dem Horizont und dem &lt;em&gt;Eye-Point&lt;/em&gt; bilden. In der Animation unten sind der &lt;em&gt;Eye-Point&lt;/em&gt;
sowie die Facetten, die er sieht, rot dargestellt. Der Horizont ist mit schwarzen Strichen&amp;nbsp;gekennzeichnet.&lt;/p&gt;
&lt;p&gt;Wird dieser Schritt rekursiv auf alle neu hinzugefügten Facetten angewendet, resultiert die
konvexe Hülle. Und genauso, wenn auch deutlich schwieriger darstellbar, funktioniert es auch
für alle höheren&amp;nbsp;Dimensionen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="QuickHull" src="/img/ch_quickhull3d.gif"&gt;&lt;/p&gt;
&lt;p&gt;Eine wichtige Anwendung für 3D konvexe Hüllen ist übrigens die Delaunay-Triangulation einer planaren
Punktmenge. Die wiederum kann für eine effiziente Berechnung des &lt;a href="https://blog.schawe.me/relative-neighborhood-graph.html"&gt;Relative-Neighborhood-Graphs aus
diesem Post&lt;/a&gt; genutzt&amp;nbsp;werden.&lt;/p&gt;</content><category term="Phys"></category><category term="Veröffentlichung"></category><category term="Physik"></category><category term="Bild"></category></entry><entry><title>Perfect Snake</title><link href="https://blog.schawe.me/perfect-snake.html" rel="alternate"></link><published>2022-05-21T11:03:00+02:00</published><updated>2022-05-21T11:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-21:/perfect-snake.html</id><summary type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/pysnake.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/pysnake.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel verspricht, schafft es dieser Autopilot (zumindest manchmal) perfekte Spiele zu&amp;nbsp;spielen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eine perfekte Partie Snake" src="/img/perfectsnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Und falls dieses gif nicht überzeugt, kann man den Autopiloten online
&amp;#8212; dank TensorFlow.js &amp;#8212; direkt im Browser ausprobieren auf &lt;a href="https://snake.schawe.me/"&gt;snake.schawe.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aber was steckt&amp;nbsp;dahinter?&lt;/p&gt;
&lt;h2&gt;Neuronale&amp;nbsp;Netze&lt;/h2&gt;
&lt;p&gt;Wenn man nicht clever genug ist, eine direkte Lösung für ein Problem zu finden, kann man
versuchen ein neuronales Netz auf die Lösung des Problems zu trainieren. Vor einigen Jahren
hat ein &lt;a href="https://arxiv.org/abs/1312.5602"&gt;Artikel&lt;/a&gt;, in dem ein neuronales Netz trainiert
wurde alte Atari-Spiele zu spielen, für mediale Aufmerksamkeit gesorgt. Und die gleiche
Idee des &lt;em&gt;Reinforcement Learning&lt;/em&gt; werde ich hier (nicht als erster
[&lt;a href="https://github.com/pawel-kieliszczyk/snake-reinforcement-learning"&gt;8&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/learning-to-play-snake-at-1-million-fps-4aae8d36d2f1"&gt;9&lt;/a&gt;])
auf Snake&amp;nbsp;anwenden.&lt;/p&gt;
&lt;p&gt;Die grundlegende Idee von Reinforcement Learning ist relativ einsichtig: Wir belohnen
das Modell für gute Entscheidungen, sodass es lernt mehr gute Entscheidungen zu treffen.
In unserem Fall werden gute Entscheidungen dadurch definiert, dass sie zu einer
hohen Punktzahl, also Länge der Schlange am Spielende,&amp;nbsp;führen.&lt;/p&gt;
&lt;p&gt;Glücklicherweise können wir auf die Literatur zurückgreifen, wie wir diese grundsätzliche
Idee umsetzen können. Das Modell, für das ich mich entschieden habe, ist ein Actor-Critic
Ansatz. Dabei nutze ich ein neuronales Netz, das als Input den aktuellen Zustand des
Spielfeldes bekommt &amp;#8212; wie genau dieser Zustand aussieht, diskutieren wir weiter unten.
Dann geht es durch ein paar Schichten und endet in zwei &amp;#8220;Köpfen&amp;#8221;. Einer ist der &lt;em&gt;Actor&lt;/em&gt;,
mit drei Output-Neuronen, die für &amp;#8220;nach links&amp;#8221;, &amp;#8220;nach rechts&amp;#8221; und &amp;#8220;geradeaus weiter&amp;#8221; stehen.
Der andere ist der &lt;em&gt;Critic&lt;/em&gt;, der ein Output-Neuron hat, das abschätzt wie lang die
Schlange, ausgehend von der aktuellen Situation, noch werden kann &amp;#8212; also wie gut die aktuelle
Situation&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Das Training läuft dann so ab, dass ein ganzes Spiel gespielt wird, folgend den Vorschlägen
des Actors mit etwas rauschen, um neue Strategien zu erkunden. Sobald es beendet ist, weil
die Schlange sich oder eine Wand gebissen hat, wird
der Critic mit allen Zuständen des Spielverlaufs darauf trainiert, Schätzungen
abzugeben, die möglichst gut zu der tatsächlich erreichten Länge am Spielende passen.
Außerdem wird der Actor darauf trainiert gute Entscheidungen zu treffen, indem zu den
Zuständen des Spielverlaufs andere Entscheidungen getroffen werden und die Bewertung
des Critic der resultierenden Situationen als Qualität der Entscheidung genutzt wird.
Actor und Critic helfen sich also gegenseitig besser zu werden.
Der gemeinsame Teil des neuronalen Netzes sollte im Idealfall nach genügend gespielten
Spielen dabei ein &amp;#8220;Verständnis&amp;#8221; für Snake entwickeln.&amp;nbsp;Genial!&lt;/p&gt;
&lt;h2&gt;Technische&amp;nbsp;Nebensächlichkeiten&lt;/h2&gt;
&lt;p&gt;Meine Implementierung benutzt die Python Bibliotheken Keras und Tensorflow zum Training
und &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;multiJSnake&lt;/a&gt; als &lt;em&gt;Environment&lt;/em&gt;. Wir steuern also einen
Java-Prozess, um unser neuronales Netz in Python zu trainieren.
Diese Entscheidung ist etwas unorthodox, aber bot Potential für einen Blogpost auf dem
&lt;a href="https://blog.codecentric.de/2021/11/java-klassen-python/"&gt;Blog meines Arbeitgebers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wir können das Environment getrost als Black-Box betrachten, die dafür sorgt, dass die Regeln
von Snake befolgt&amp;nbsp;werden.&lt;/p&gt;
&lt;h2&gt;Lokale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Eine der wichtigsten Entscheidungen ist nun, wie der Input in das Modell aussieht.
Die einfachste Variante, die sich auch gut zum Testen eignet, ist die lokale
Information rund um den Kopf der Schlange: Drei Neuronen, die jeweils 1 oder 0 sind,
wenn das Feld links, rechts und geradeaus vom Kopf belegt sind (und acht weitere für
etwas mehr Weitsicht auf die Diagonalen und übernächste Felder vorne, rechts, links und
diesmal auch zurück). Damit die Schlange
auch das Futter finden kann, fügen wir noch 4 weitere Neuronen hinzu, die per 1 oder 0
anzeigen, ob das Futter in, rechts, links oder entgegengesetzt der Bewegungsrichtung
der Schlange&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Mit diesem Input füttern wir eine einzelne vollvernetzte Schicht, hinter der wir
direkt die Actor und Critic Köpfe&amp;nbsp;anschließen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des neuronalen Netzes mit lokaler Information (Visualisierung: netron)" class="invertable" src="/img/nn_local.svg"&gt;&lt;/p&gt;
&lt;p&gt;Das reicht aus, damit die Schlange nach ein paar tausend Trainingsspielen zielstrebig auf das Futter
zusteuert und sich selbst ausweicht. Allerdings reicht es noch nicht, um zu verhindern,
dass sie sich selbst in Schlaufen fängt. Da war der Autopilot von
&lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake&lt;/a&gt;&amp;nbsp;besser.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein paar Spiele mit lokaler Information" src="/img/nn_local_game.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Globale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Um der Schlange eine Chance zu geben zu erkennen, dass sie sich gerade selbst fängt,
sollte man ihr erlauben das ganze Spielfeld zu sehen &amp;#8212; schließlich sehen menschliche
Spieler auch das ganze Spielfeld. Bei einem &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld haben wir also
schon mindestens 100 Input-Neuronen, sodass vollvernetzte Schichten zu sehr großen
Modellen führen würden. Stattdessen bietet es sich bei solchen zweidimensionalen
Daten an &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;&lt;em&gt;convolutional&lt;/em&gt; neuronale Netze&lt;/a&gt;
zu nutzen. Um es unserer Schlange etwas einfacher zu machen, werden wir unser Spielfeld
in drei Kanäle&amp;nbsp;aufteilen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;der Kopf: nur an der Position des Kopfes ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;li&gt;der Körper: die Positionen an denen sich der Körper befindet zeigen wie viele Zeitschritte der Körper noch an dieser Position sein&amp;nbsp;wird&lt;/li&gt;
&lt;li&gt;das Futter: nur an der Position des Futters ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Was ein Mensch sieht und was wir unserem neuronalen Netz zeigen" src="/img/nn_snake_channels.png"&gt;&lt;/p&gt;
&lt;p&gt;Dies ist auch kein unfairer Vorteil, schließlich sehen menschliche Spieler das Bild auch
mit drei&amp;nbsp;Farbkanälen.&lt;/p&gt;
&lt;p&gt;Und damit die Schlange nicht auch noch lernen muss was rechts und links bedeutet,
geben wir dem Actor 4 Outputs, die für Norden, Osten, Süden und Westen&amp;nbsp;stehen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des Convolutional-Neural-Networks (Visualisierung: netron)" class="invertable" src="/img/nn_global.svg"&gt;&lt;/p&gt;
&lt;p&gt;Dieses Modell-Layout verdient es dann schon eher als &lt;em&gt;Deep Learning&lt;/em&gt; bezeichnet zu werden.
Weitere Modell-Parameter, können auf &lt;a href="https://github.com/surt91/multiJSnake"&gt;github.com/surt91/multiJSnake&lt;/a&gt;
nachgeschlagen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Nach einigen zehntausend Trainingsspielen funktioniert dieses Modell dann
tatsächlich gut genug, um regelmäßig perfekte Spiele auf einem
&lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld zu erreichen. Aber da ich es nur auf  &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt;
Feldern trainiert habe, versagt es leider auf jeder anderen&amp;nbsp;Größe.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Python"></category><category term="Neural Networks"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Perfect Snake</title><link href="https://blog.schawe.me/en/perfect-snake.html" rel="alternate"></link><published>2022-05-21T11:03:00+02:00</published><updated>2022-05-21T11:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-21:/en/perfect-snake.html</id><summary type="html">&lt;p&gt;I like the game snake &amp;#8212; not so much playing it, but implementing it. The natural consequence
is an autopilot. This way I can just watch instead of playing. On the German version of this
blog, there are already quite a few implementations with different heuristics, but nothing
particularly good at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like the game snake &amp;#8212; not so much playing it, but implementing it. The natural consequence
is an autopilot. This way I can just watch instead of playing. On the German version of this
blog, there are already quite a few implementations with different heuristics, but nothing
particularly good at playing&amp;nbsp;Snake.&lt;/p&gt;
&lt;p&gt;But now I present an autopilot which can (at least sometimes) play a perfect game of&amp;nbsp;Snake.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A perfect game of Snake" src="/img/perfectsnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;In case this gif does not convince you, this autopilot can run directly in the browser
at &lt;a href="https://snake.schawe.me/"&gt;snake.schawe.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, how does it&amp;nbsp;work?&lt;/p&gt;
&lt;h2&gt;Neural&amp;nbsp;Networks&lt;/h2&gt;
&lt;p&gt;If one does not know how to solve something, try to make a neural net come up with a solution.
One example of this applied to classic Atari games was &lt;a href="https://arxiv.org/abs/1312.5602"&gt;this paper&lt;/a&gt;,
from ten years ago. We will apply this idea of reinforcement learning to snake in this post
(but of course others have done this already
[&lt;a href="https://github.com/pawel-kieliszczyk/snake-reinforcement-learning"&gt;8&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/learning-to-play-snake-at-1-million-fps-4aae8d36d2f1"&gt;9&lt;/a&gt;]).&lt;/p&gt;
&lt;p&gt;The fundamental idea of reinforcement learning is quite simple. Just reward the model for
good decision, such that it may learn to make good decisions. So here we will use the score
defined as the length of the snake at the end of the game as the objective which is
maximized by good&amp;nbsp;decisions.&lt;/p&gt;
&lt;p&gt;Fortunately, there is already a lot of literature how reinforcement learning can be
implemented. We will use the actor-critic approach. So we construct a neural network
which takes the current state of the game as input and splits into two heads. One
head is the &lt;em&gt;Actor&lt;/em&gt; with 3 outputs, which correspond to the next action to take: &amp;#8220;right&amp;#8221;,
&amp;#8220;left&amp;#8221; or &amp;#8220;straight ahead&amp;#8221;. The other head is the &lt;em&gt;Critic&lt;/em&gt; with one output representing
an estimate of how long the snake can grow from the current&amp;nbsp;situation.&lt;/p&gt;
&lt;p&gt;For training a full game is played by following the advice of the Actor plus a bit of noise
to explore new strategies. Then the Critic is trained with all encountered game states
to produce estimates for the final score, which should predict the score that was indeed
reached.
For training the Actor, we take states of the game, make a different decision and
ask the Critic how good the resulting situation is. Depending on the estimated quality,
we teach the actor to make this decision more or less often.
So Actor and Critic help each other at getting better and
the common part of the neural net should gain an &amp;#8220;Understanding&amp;#8221; of the game which both
can base their output on.&amp;nbsp;Ingenious!&lt;/p&gt;
&lt;h2&gt;Technical&amp;nbsp;Trivialities&lt;/h2&gt;
&lt;p&gt;My Implementation uses the Python libraries Keras and Tensorflow for training and
&lt;a href="https://blog.schawe.me/multijsnake.html"&gt;multiJSnake (German post)&lt;/a&gt; as
the &lt;em&gt;environment&lt;/em&gt;. It is a strange decision to implement the environment in Java.
The reason is that it already existed and the combination offered the opportunity
to write a post on the
&lt;a href="https://blog.codecentric.de/en/2021/11/java-classes-python/"&gt;blog of my employer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this post, we will just treat the environment as a black box, which enforces the
rules of&amp;nbsp;Snake.&lt;/p&gt;
&lt;h2&gt;Lokal&amp;nbsp;Information&lt;/h2&gt;
&lt;p&gt;One of the most important decisions when designing the model is to determine
the nature of the input. The simplest option, which is quite suited for testing,
is using the local information around the head of the snake: three neurons (0 or 1)
indicating whether the field right, left and ahead are occupied by a wall or the
snake body (and eight more for the diagonals and two fields, left, right, ahead and behind
for a bit more farsightedness). Also we have to indicate where the food is, which
we solve with 4 further neurons (0 or 1) representing whether the food is left,
right, in or against the direction of the snake&amp;#8217;s&amp;nbsp;movement.&lt;/p&gt;
&lt;p&gt;Behind the input we build a fully connected layer and behind that we
connect directly the two&amp;nbsp;heads.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout of the local neural network (Visualisierung: netron)" src="/img/nn_local.svg"&gt;&lt;/p&gt;
&lt;p&gt;And after a few thousand training games
the snake moves directly towards the food and avoids itself. But it is not
yet clever enough to avoid catching itself in loops.
Well, even the heuristic of &lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake (German post)&lt;/a&gt;
was&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A few games with local information" src="/img/nn_local_game.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Global&amp;nbsp;Information&lt;/h2&gt;
&lt;p&gt;To avoid the snake trapping itself, we should give it global information of the
playing field &amp;#8212; it is only fair, since humans do see the whole field, too.
But even with a &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field, there would be at least 100 input neurons,
such that fully connected layers would lead to very large models. Instead,
&lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;&lt;em&gt;convolutional&lt;/em&gt; neural networks&lt;/a&gt;
seem like a very good fit to solve this problem, especially since our input is
of two-dimensional nature. To make life for our artificial intelligence a bit
easier, we split our playing field in three&amp;nbsp;channels&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the Head: only the position of the head has a 1, otherwise&amp;nbsp;0&lt;/li&gt;
&lt;li&gt;the body: the  positions of the body have a value corresponding to the number of timesteps they will be&amp;nbsp;occupied&lt;/li&gt;
&lt;li&gt;the food: only the position of the food has a 1, otherwise&amp;nbsp;0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="The human view and what we show our neural net" src="/img/nn_snake_channels.png"&gt;&lt;/p&gt;
&lt;p&gt;This is not even an advantage for the snake, since a human player also sees with three
color&amp;nbsp;channels.&lt;/p&gt;
&lt;p&gt;And to make life for our snake even easier, we change the output of the actor from
three relative (left, right, ahead) to four absolute (north, east, south, west)&amp;nbsp;directions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout of the convolutional neural networks (Visualisierung: netron)" src="/img/nn_global.svg"&gt;&lt;/p&gt;
&lt;p&gt;This model layout deserves to be called &lt;em&gt;deep learning&lt;/em&gt;. The other model parameters
can be looked up at &lt;a href="https://github.com/surt91/multiJSnake"&gt;github.com/surt91/multiJSnake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And after a few tenthousand training games this model works well enough to
routinely play perfect games on a &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field.
And since I only trained it on a  &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; field, it fails on every other&amp;nbsp;size.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Python"></category><category term="Neural Networks"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>multiJSnake</title><link href="https://blog.schawe.me/multijsnake.html" rel="alternate"></link><published>2021-09-26T09:27:00+02:00</published><updated>2021-09-26T09:27:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-09-26:/multijsnake.html</id><summary type="html">&lt;p&gt;Vor Kurzem habe ich ein Server-Client Snake in meine Liste von simplen
Snake-Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;6&lt;/a&gt;]
eingereiht. Wie ich in meinem Artikel &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;&amp;#8220;RestfulSnake&amp;#8221;&lt;/a&gt;
bereits angedeutet hatte, habe ich es um eine Multiplayer Komponente&amp;nbsp;erweitert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiJSnake" src="/img/multisnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Das grundlegende Design ist, dass der Server in festen Intervallen den nächsten Zeitschritt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor Kurzem habe ich ein Server-Client Snake in meine Liste von simplen
Snake-Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;6&lt;/a&gt;]
eingereiht. Wie ich in meinem Artikel &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;&amp;#8220;RestfulSnake&amp;#8221;&lt;/a&gt;
bereits angedeutet hatte, habe ich es um eine Multiplayer Komponente&amp;nbsp;erweitert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiJSnake" src="/img/multisnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Das grundlegende Design ist, dass der Server in festen Intervallen den nächsten Zeitschritt berechnet,
den Spielzustand an alle Spieler schickt und auf Steuerkommandos von den Spielern lauscht. Dass der
Server die gesamte Spiellogik verwaltet ist einerseits möglich, weil Snake einen relativ kleinen Zustand
hat und nicht extrem empfindlich auf Latenzen reagiert. Außerdem können Spieler nicht (so einfach) schummeln,
wenn der Spiel-Zustand auf dem Server berechnet&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Hier sehen wir auch schon das erste Problem für die alte Kommunikation per http: Da der Server nicht von sich aus
Nachrichten an die Clients schicken kann, müssten die Clients pollen, was zu einem ganzen Haufen an Problemen
führen kann (Poll kurz vor dem Tick zum nächsten Zeitschritt, Last, uneinheitliche Antwortzeiten und Races bei
schlechtem Netzwerk, &amp;#8230;)
Genau für diesen Zweck sind aber &lt;a href="https://de.wikipedia.org/wiki/WebSocket"&gt;Websocket&lt;/a&gt;-Verbindungen wie geschaffen!
Da SpringBoot vernünftige Mechanismen mitbringt, um Websockets zu handhaben, ist die Umstellung sogar
&lt;a href="https://github.com/surt91/multiJSnake/commit/927f3bc02c9a3e024048b7d7111969c3cc304aff"&gt;vergleichsweise schmerzfrei&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Das größte Problem ist nun, dass die meisten Leute &amp;#8220;Rest&amp;#8221; als synonym für &amp;#8220;json über http&amp;#8221; verstehen. Also
muss ein neuer Name her &amp;#8212; leider war &amp;#8220;multisnake&amp;#8221; auf Heroku schon belegt, sodass ich mit &amp;#8220;multiJSnake&amp;#8221;
subtil darauf hinweise, dass Java und JavaScript das fundament&amp;nbsp;bilden.&lt;/p&gt;
&lt;p&gt;Ausprobiert werden kann es auf &lt;a href="https://multijsnake.herokuapp.com/"&gt;multijsnake.herokuapp.com&lt;/a&gt; und weitere
Spieler können durch einen Einladungslink in die eigene Session eingeladen werden. Die Quellen sind natürlich
auf Github: &lt;a href="https://github.com/surt91/multiJSnake/tree/v0.2.0"&gt;github.com/surt91/multiJSnake&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>RestfulSnake</title><link href="https://blog.schawe.me/restfulsnake.html" rel="alternate"></link><published>2021-07-29T13:48:00+02:00</published><updated>2021-07-29T13:48:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-07-29:/restfulsnake.html</id><summary type="html">&lt;p&gt;Vor wenigen Monaten hatte ich eine handvoll Bewerbungsgespräche. Von &amp;#8220;Programmieraufgaben&amp;#8221;,
die durch das Erkennen der Fibonacci-Sequenz gelöst wurden bis zu &amp;#8220;Wie viele Grashalme
gibt es in deiner Heimatstadt?&amp;#8221; war alles dabei. Unter anderem auch &amp;#8220;Wir glauben,
dass du noch nie Java angefasst hast, deshalb sollst du ein Programm in Java …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor wenigen Monaten hatte ich eine handvoll Bewerbungsgespräche. Von &amp;#8220;Programmieraufgaben&amp;#8221;,
die durch das Erkennen der Fibonacci-Sequenz gelöst wurden bis zu &amp;#8220;Wie viele Grashalme
gibt es in deiner Heimatstadt?&amp;#8221; war alles dabei. Unter anderem auch &amp;#8220;Wir glauben,
dass du noch nie Java angefasst hast, deshalb sollst du ein Programm in Java schreiben,
über das wir nächste Woche reden&amp;nbsp;können!&amp;#8221;&lt;/p&gt;
&lt;p&gt;Also bin ich jetzt Java-Experte. Und das bedeutet, dass es Zeit ist für eine weitere
Snake-Version [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Um besonders professionell zu wirken, habe ich mich für eine &lt;em&gt;Client-Server-Architektur&lt;/em&gt;
entschieden. Steuerkommandos werden per &lt;code&gt;http&lt;/code&gt; &lt;code&gt;post&lt;/code&gt; zum Server geschickt und in der Antwort
steht die neue Position der Schlange.
Das Backend nutzt &lt;em&gt;Spring Boot&lt;/em&gt; und läuft auf einem Tomcat Server. Das
Frontend besteht hauptsächlich aus dem Visualisierungs-Code von &lt;a href="https://blog.schawe.me/jsnake.html"&gt;jsnake&lt;/a&gt;,
aber echte Nerds werden es natürlich bevorzugen per &lt;em&gt;curl&lt;/em&gt; zu&amp;nbsp;spielen.&lt;/p&gt;
&lt;p&gt;Normalerweise würde man es natürlich mittels Kubernetes und Docker auf &lt;span class="caps"&gt;AWS&lt;/span&gt; laufen lassen, aber
stattdessen habe ich mich dafür entschieden Heroku zu nutzen, um ein
&lt;a href="https://en.wikipedia.org/wiki/Salesforce"&gt;kleines Unternehmen&lt;/a&gt; zu unterstützen.
Auf &lt;a href="https://multijsnake.herokuapp.com/"&gt;multijsnake.herokuapp.com&lt;/a&gt; kann man also eine Partie
spielen. Und die Quellen liegen wie immer auf &lt;a href="https://github.com/surt91/multiJSnake/tree/RestfulSnake"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Überraschenderweise funktioniert das tatsächlich erstaunlich gut &amp;#8212; solange die Latenz unter ~150 ms bleibt.
Und dieses Design schreit geradezu nach einen&amp;nbsp;Multiplayer-Modus&amp;#8230;&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Fira Code</title><link href="https://blog.schawe.me/fira.html" rel="alternate"></link><published>2021-06-21T19:45:00+02:00</published><updated>2021-06-21T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2021-06-21:/fira.html</id><summary type="html">&lt;p&gt;Fira ist eine &lt;a href="https://en.wikipedia.org/wiki/Sans-serif#Classification"&gt;humanist&lt;/a&gt; Sans-Serif Schriftart,
die für FirefoxOS entwickelt wurde, und wird zur Zeit für die Sans-Serif Typen, wie die Überschriften,
in diesem Blog genutzt. Aber eigentlich geht es mir hier um Fira Mono die
&lt;a href="https://de.wikipedia.org/wiki/Nichtproportionale_Schriftart"&gt;dicktengleiche&lt;/a&gt; Variante, die
später mit Ligaturen (und mehr) zu &lt;a href="https://github.com/tonsky/FiraCode"&gt;Fira Code&lt;/a&gt; erweitert wurde.
Ich …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fira ist eine &lt;a href="https://en.wikipedia.org/wiki/Sans-serif#Classification"&gt;humanist&lt;/a&gt; Sans-Serif Schriftart,
die für FirefoxOS entwickelt wurde, und wird zur Zeit für die Sans-Serif Typen, wie die Überschriften,
in diesem Blog genutzt. Aber eigentlich geht es mir hier um Fira Mono die
&lt;a href="https://de.wikipedia.org/wiki/Nichtproportionale_Schriftart"&gt;dicktengleiche&lt;/a&gt; Variante, die
später mit Ligaturen (und mehr) zu &lt;a href="https://github.com/tonsky/FiraCode"&gt;Fira Code&lt;/a&gt; erweitert wurde.
Ich sehe wie in genau diesem Moment im Geist des Lesers die Frage
&amp;#8220;Ligaturen in einer dicktengleichen Schrift?!&amp;#8221; auftaucht. Beziehungsweise &amp;#8220;Ist da ein Tippfehler in &lt;em&gt;dickengleich&lt;/em&gt;?&amp;#8221; oder
&amp;#8220;Was sind Ligaturen?&amp;#8221; falls der Leser kein Hobby-Typographie-Nerd&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Für letztere klären wir erstmal kurz die beiden&amp;nbsp;Fragen:&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;Dickte&lt;/em&gt; bezeichnet die Breite der Metall-Lettern im klassischen Buchdruck; wenn sie für alle Glyphen
gleich ist, stehen die Buchstaben immer in perfekt ausgerichteten Spalten untereinander, was von vielen
für das Schreiben von Code bevorzugt wird. Die meisten Schreibmaschinen haben ebenfalls solche Schrifttypen&amp;nbsp;verwendet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fi" class="icon invertable" src="/img/fi.png"&gt;
&lt;em&gt;Ligaturen&lt;/em&gt; sind Kontraktionen von mehreren Glyphen in eine Glyphe. Die typischen Ligaturen sind fi oder fl
(allerdings nicht in der Schriftart, in der diese Zeilen geschrieben sind, weshalb ich hier ein Bild
der fi Ligatur in &lt;a href="https://de.wikipedia.org/wiki/Computer_Modern"&gt;Computer Modern&lt;/a&gt; zeige).
Ein paar Ligaturen haben sich mittlerweile zu eigenen Symbolen entwickelt, wie das Kaufmannsund &amp;amp;, das ursprünglich
eine Ligatur von &lt;em&gt;et&lt;/em&gt; war (Latein für &lt;em&gt;und&lt;/em&gt;). Aber dieses Konzept beißt sich anscheinend mit einer
dicktengleichen Schrift, in der jeder Buchstabe die gleiche Breite haben soll. Der Clou an der Sache ist, dass
Fira Code Ligaturen für übliche Ausdrücke für mathematische Symbole in Programmiersprachen
wie &amp;gt;=, != und -&amp;gt; hat, die wie folgt dargestellt werden: &lt;code&gt;&amp;gt;=, !=, -&amp;gt;&lt;/code&gt;. Nur zu, kopiert diese Symbole
in einen Editor eurer Wahl, um zu sehen, wie sie sich wieder in ihre Bestandteile&amp;nbsp;zerlegen&lt;/p&gt;
&lt;p&gt;Nur eine Spielerei? Möglicherweise. Aber ich bin begeistert davon, und verwende Fira Code in
allen Editoren, die Ligaturen unterstützen. Der Fairness halber sollte gesagt werden, dass Fira Code nicht
als erstes Projekt diese Idee hatte. &lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt; beispielsweise hatte
ihr erstes Release 2 Jahre vor der Veröffentlichung von Fira Code im Jahr 2014. Und mittlerweile sind
Code-Ligaturen so ziemlich im Mainstream angekommen, seitdem
&lt;a href="https://github.com/JetBrains/JetBrainsMono"&gt;JetBrains Mono&lt;/a&gt; im letzten Jahr von
dem gleichnamigen &lt;span class="caps"&gt;IDE&lt;/span&gt;-Entwickler veröffentlicht&amp;nbsp;wurde.&lt;/p&gt;
&lt;p&gt;Zum Schluss möchte ich noch auf eine Kleinigkeit aufmerksam machen, die wohl nur die wenigsten Nutzer
von Fira Code bewusst bemerken würden, die aber zweifellos demonstriert wie durchdacht diese Schrift ist.
Denn Fira Code passt die Position von arithmetischen Symbolen an die benachbarten Glyphen an: ein &lt;code&gt;+&lt;/code&gt;
zwischen zwei Großbuchstaben ist höher als eines zwischen zwei&amp;nbsp;Kleinbuchstaben.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/fira_arith.png"&gt;&lt;img alt="A+A a+a, die Plus-Zeichen haben unterschiedliche vertikale Positionen" class="invertable" src="/img/fira_arith.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich persönlich weiß solche Details sehr wertzuschätzen. Es ist ein Beispiel dafür,
dass alle Aspekte unserer modernen Gesellschaft, so wenige Gedanken wir uns auch darum machen und
für wie trivial wir sie halten, zahllose Stunden Design und Entwicklung gekostet haben und ständig
verbessert werden. Typographie &amp;#8212; und um das klarzustellen, ich bin beileibe kein Experte &amp;#8212; fasziniert
mich. Schriften sind exakt, mit klar definierter Funktion, aber obwohl wir sie seit Jahrtausenden
benutzen, ist ihre Entwicklung noch lange nicht abgeschlossen. Mit jedem neuen Medium gibt es neue
Anforderungen. Marken haben steten Bedarf an individuellen Schrifttypen als Teil ihres Brandings.
Für jede neue Anwendung gibt es andere&amp;nbsp;Optimierungskriterien.&lt;/p&gt;
&lt;p&gt;Und jedes Mal wenn in meinem Code &lt;code&gt;=&lt;/code&gt; und &lt;code&gt;&amp;gt;&lt;/code&gt; wieder zu &lt;code&gt;=&amp;gt;&lt;/code&gt; verschmelzen, freue ich mich
erneut über die&amp;nbsp;Magie.&lt;/p&gt;</content><category term="Meta"></category><category term="Typographie"></category><category term="Code"></category><category term="Bild"></category></entry><entry><title>Noch mehr Fraktale</title><link href="https://blog.schawe.me/more-fractals.html" rel="alternate"></link><published>2021-06-07T20:45:00+02:00</published><updated>2021-06-07T20:45:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-06-07:/more-fractals.html</id><summary type="html">&lt;p&gt;Seit meinem &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;ersten Eintrag&lt;/a&gt; über meinen
Fraktal-tweetenden Bot &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;,
habe ich selbigen noch um ein paar Fraktale erweitert, die ich hier kurz
festhalten möchte. Der ganze Code ist &lt;a href="https://github.com/surt91/AFractalADay"&gt;auf Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Chaotic&amp;nbsp;Maps&lt;/h3&gt;
&lt;p&gt;Eine &lt;em&gt;Quadratic Map&lt;/em&gt; ist eine Rekursionsgleichung mit einem quadratischen
Term, also&amp;nbsp;beispielsweise
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{i+1} = a_0 x …&lt;/div&gt;</summary><content type="html">&lt;p&gt;Seit meinem &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;ersten Eintrag&lt;/a&gt; über meinen
Fraktal-tweetenden Bot &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;,
habe ich selbigen noch um ein paar Fraktale erweitert, die ich hier kurz
festhalten möchte. Der ganze Code ist &lt;a href="https://github.com/surt91/AFractalADay"&gt;auf Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Chaotic&amp;nbsp;Maps&lt;/h3&gt;
&lt;p&gt;Eine &lt;em&gt;Quadratic Map&lt;/em&gt; ist eine Rekursionsgleichung mit einem quadratischen
Term, also&amp;nbsp;beispielsweise
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{i+1} = a_0 x^2 + a_1 x + a_2.$$&lt;/div&gt;
&lt;p&gt;
Das berühmteste Mitglied dieser Familie ist die &lt;a href="https://de.wikipedia.org/wiki/Logistische_Gleichung"&gt;&lt;em&gt;Logistic-Map&lt;/em&gt;&lt;/a&gt;
mit &lt;span class="math"&gt;\(a_0=1, a_1=r, a_2=0\)&lt;/span&gt;, die chaotisches Verhalten für &lt;span class="math"&gt;\(3.56995 &amp;lt; r &amp;lt; 4\)&lt;/span&gt; zeigt.
Aber leider ist sie nur eindimensional und ihr Attraktor deshalb nicht besonders&amp;nbsp;hübsch.&lt;/p&gt;
&lt;p&gt;Um visuell ansprechende Fraktale daraus zu erzeugen, brauchen wir also ein System aus
zwei Rekursionsgleichungen, die wir als &lt;span class="math"&gt;\(x\)&lt;/span&gt;- und &lt;span class="math"&gt;\(y\)&lt;/span&gt;-Koordinaten betrachten&amp;nbsp;können:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
x_{i+1} &amp;amp;= a_{0} + a_{1} x + a_{2} x^2 + a_{3} x y + a_{4} y + a_{5} y^2\\
y_{i+1} &amp;amp;= a_{6} + a_{7} x + a_{8} x^2 + a_{9} x y + a_{10} y + a_{11} y^2.
\end{align*}&lt;/div&gt;
&lt;p&gt;Jetzt haben wir 12 freie Parameter, die einen riesigen Parameterraum aufspannen,
in dem &lt;a href="http://sprott.physics.wisc.edu/pubs/paper203.htm"&gt;etwa 1.6%&lt;/a&gt; aller Möglichkeiten
chaotisches Verhalten mit einem seltsamen Attraktor&amp;nbsp;zeigen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/quadraticMap.png"&gt;&lt;img alt="Quadratic Map" src="/img/quadraticMap1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chaotische&amp;nbsp;Differentialgleichungssysteme&lt;/h3&gt;
&lt;p&gt;Ein echter Klassiker ist das Differentialgleichungssystem, das die Chaostheorie
begründet hat und nach dem der &lt;em&gt;Schmetterlingseffekt&lt;/em&gt; benannt
ist [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;].
Für bestimmte Paramtersätze verlaufen die Bahnkurven entlang eines &lt;em&gt;seltsamen Attraktors&lt;/em&gt;,
dessen fraktale Dimension &lt;span class="math"&gt;\(\approx 2.06\)&lt;/span&gt; ist. Da der vollständige Attraktor somit in
einer zweidimensionalen Projektion &lt;a href="/img/lorenz_full_attractor.png"&gt;etwas langweilig&lt;/a&gt; aussieht,
habe ich hier nur eine Trajektorie über kurze Zeit&amp;nbsp;dargestellt.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/lorenzattraktor2.png"&gt;&lt;img alt="Lorenz-Attraktor" src="/img/lorenzattraktor2_1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und es gibt &lt;a href="https://en.wikipedia.org/wiki/List_of_chaotic_maps"&gt;eine ganze Menge&lt;/a&gt;
weitere Differntialgleichungssysteme (und &lt;em&gt;chaotic maps&lt;/em&gt;), die chaotische
Attraktoren aufweisen. Deshalb zeige ich hier noch einen Rössler-Attraktor, der
eine vereinfachte Version des Lorenz-Systems&amp;nbsp;ist:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
\frac{\mathrm{d}x}{\mathrm{d}t} &amp;amp;= -(y+z)\\
\frac{\mathrm{d}y}{\mathrm{d}t} &amp;amp;= x + ay\\
\frac{\mathrm{d}z}{\mathrm{d}t} &amp;amp;= b + xz - cz
\end{align*}&lt;/div&gt;
&lt;p&gt;Und hier haben wir das Glück, dass auch seine Projektion sehr ansehnlich&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/rossler.png"&gt;&lt;img alt="Rössler-Attraktor" src="/img/rossler1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich persönlich frage mich, nun wie der Attraktor für das &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;Doppelpendel&lt;/a&gt;
aussieht. Es ist anscheinend kein Fraktal, aber es sieht dennoch ganz interessant&amp;nbsp;aus:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/doublePendulumLong.png"&gt;&lt;img alt="Doppelpendel" src="/img/doublePendulumLong1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ising&amp;nbsp;model&lt;/h3&gt;
&lt;p&gt;Das Ising Modell für Ferromagnetismus wird auch als Drosophila
der statistischen Physik bezeichnet: Es ist ein einfaches
Modell, dass einen Phasenübergang aufweist &amp;#8212; Eisen verliert
seine magnetischen Eigenschaften oberhalb der&amp;nbsp;Curie-Temperatur.&lt;/p&gt;
&lt;p&gt;Es besteht aus magnetischen Momenten, &lt;em&gt;Spins&lt;/em&gt;, die gerne in die
gleiche Richtung zeigen wie ihre Nachbarn, aber durch hohe Temperatur
gestört werden. Oder etwas formaler: Die innere Energie &lt;span class="math"&gt;\(U\)&lt;/span&gt; wird durch
den Hamiltonian &lt;span class="math"&gt;\(\mathcal{H} = - \sum_{&amp;lt;ij&amp;gt;} s_i s_j\)&lt;/span&gt; bestimmt, wobei
&lt;span class="math"&gt;\(s_i = \pm 1\)&lt;/span&gt;, je nachdem ob der Spin &lt;em&gt;up&lt;/em&gt; oder &lt;em&gt;down&lt;/em&gt; ist und die
Summe über benachbarte Spins läuft. Das System
wird immer einen Zustand anstreben, der die freie Energie &lt;span class="math"&gt;\(F=U-TS\)&lt;/span&gt;
minimiert. Das kann entweder passieren, indem &lt;span class="math"&gt;\(U\)&lt;/span&gt; möglichst klein
ist oder die Entropie &lt;span class="math"&gt;\(S\)&lt;/span&gt; möglichst hoch. Bei großen Werten der
Temperatur &lt;span class="math"&gt;\(T\)&lt;/span&gt; bekommt der Entropie-Term ein höheres Gewicht, sodass
Zustände mit hoher Entropie, also zufälligen Spinausrichtungen,
bevorzugt sind, bei niedrigen Temperaturen werden Konfigurationen
mit niedriger innerer Energie bevorzugt, also solche in denen alle Spins
in die selbe Richtung zeigen. Die Temperatur, bei der sich beide
Terme die Waage halten, nennt man kritische Temperatur. Hier bilden
sich Regionen von Spins, die in die gleiche Richtung zeigen, auf allen
Größenskalen. Die fraktale Dimension dieser Regionen ist
&lt;a href="https://doi.org/10.1103/PhysRevLett.62.1067"&gt;187/96&lt;/a&gt;,
was solche kritische Konfigurationen interessant anzusehen macht.
Ich empfehle auf das folgende Bild zu klicken und etwas&amp;nbsp;hineinzuzoomen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/ising.png"&gt;&lt;img alt="Kritisches Ising System" src="/img/ising1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Formel"></category><category term="Chaos"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>Willkommen auf meinem Blog!</title><link href="https://blog.schawe.me/welcome.html" rel="alternate"></link><published>2021-05-21T20:37:00+02:00</published><updated>2021-05-21T20:37:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-21:/welcome.html</id><summary type="html">&lt;p&gt;Hier veröffentliche ich unregelmäßig
Artikel über Dinge, mit denen ich mich beschäftige, oder die ich
so nützlich finde, dass ich sie später nachschlagen&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Neuen Besuchern möchte ich eine handvoll Beiträge empfehlen, anstatt
chronologisch&amp;nbsp;herunterzuscrollen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/randomFractals.html"&gt;A Fractal A Day&lt;/a&gt;
   zeigt hübsche Fraktale meines Twitter Bots &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/paper-lis2.html"&gt;Number of longest increasing …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Hier veröffentliche ich unregelmäßig
Artikel über Dinge, mit denen ich mich beschäftige, oder die ich
so nützlich finde, dass ich sie später nachschlagen&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Neuen Besuchern möchte ich eine handvoll Beiträge empfehlen, anstatt
chronologisch&amp;nbsp;herunterzuscrollen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/randomFractals.html"&gt;A Fractal A Day&lt;/a&gt;
   zeigt hübsche Fraktale meines Twitter Bots &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   stellt eine akademische Veröffentlichung, an der ich beteiligt war,
   und ihren zentralen Algorithmus&amp;nbsp;vor.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/perfect-snake.html"&gt;Perfect Snake&lt;/a&gt; präsentiert eine meiner
   Implementierungen des Spiels &amp;#8220;snake&amp;#8221; mitsamt einem neuronalen Netz als&amp;nbsp;Autopilot.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Meta"></category></entry><entry><title>Welcome to my Blog!</title><link href="https://blog.schawe.me/en/welcome.html" rel="alternate"></link><published>2021-05-21T20:37:00+02:00</published><updated>2021-05-21T20:37:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-21:/en/welcome.html</id><summary type="html">&lt;p&gt;Here I publish posts in irregular intervals
about things I do or want to be able to look up&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I suggest new visitors to take a look at the following highlights
instead of scrolling&amp;nbsp;chronologically.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   about a academic publication, of which I am co-author …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here I publish posts in irregular intervals
about things I do or want to be able to look up&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I suggest new visitors to take a look at the following highlights
instead of scrolling&amp;nbsp;chronologically.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/paper-lis2.html"&gt;Number of longest increasing subsequences&lt;/a&gt;
   about a academic publication, of which I am co-author, and its central&amp;nbsp;algorithm&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schawe.me/en/perfect-snake.html"&gt;Perfect Snake&lt;/a&gt; presents an implementation of the
   game snake with a neural net based&amp;nbsp;autopilot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, most content is only available on the &lt;a href="https://blog.schawe.me"&gt;German version of this blog&lt;/a&gt;.
But even if you do not speak German, &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;this post about fractals&lt;/a&gt;
should be nice to look at&amp;nbsp;anyway.&lt;/p&gt;</content><category term="Meta"></category></entry><entry><title>Twitter Profilhintergrundfarben</title><link href="https://blog.schawe.me/twitter-background.html" rel="alternate"></link><published>2021-05-11T18:30:00+02:00</published><updated>2021-05-11T18:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-11:/twitter-background.html</id><summary type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt hat, als ich ursprünglich angenommen
hatte: Im Idealfall sollten ähnliche Farben nahe beieinander liegen, allerdings
ist der &lt;span class="caps"&gt;RGB&lt;/span&gt; Farbraum ein dreidimensionaler Kubus, ein Bild aber nur zweidimensional,
sodass es keine
&lt;a href="https://codegolf.stackexchange.com/q/22144"&gt;&amp;#8220;richtige&amp;#8221; Art und Weise gibt, ähnliche Farben nebeneinander&amp;nbsp;anzuordnen.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich habe mich hier dafür entschieden eine 2D &lt;a href="https://de.wikipedia.org/wiki/Hilbert-Kurve"&gt;Hilbert-Kurve&lt;/a&gt;
durch mein Bild zu legen und die Farben in der Reihenfolge zu zeichnen, in der
eine 3D Hilbert-Kurve ihnen im &lt;span class="caps"&gt;RGB&lt;/span&gt;-Kubus begegnet. Wenn man dann noch die beiden
Standardhintergrundfarben &lt;code&gt;#F5F8FA&lt;/code&gt; und &lt;code&gt;#C0DEED&lt;/code&gt; ignoriert, sieht das Ergebnis so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/twitter_background.png"&gt;&lt;img alt="Twitter-Profil-Hintergrundfarbe" src="/img/twitter_background1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und dank der Python Pakete &lt;code&gt;hilbertcurve&lt;/code&gt; und &lt;code&gt;pypng&lt;/code&gt; ist der Code sogar ziemlich&amp;nbsp;harmlos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hilbertcurve.hilbertcurve&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;png&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    turn an RGB string like `#C0DEED` into a tuple of integers,&lt;/span&gt;
&lt;span class="sd"&gt;    i.e., coordinates of the RGB cube&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    `color_histogram` is a dict mapping an rgb string like `#F5F8FA`&lt;/span&gt;
&lt;span class="sd"&gt;    to the number of usages of this color&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_background_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_histogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;F5F8FA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0DEED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_histogram&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate the size of the resulting image&lt;/span&gt;
    &lt;span class="c1"&gt;# for a 2D Hilbert curve, it mus be square with a width, which is a power of 2&lt;/span&gt;
    &lt;span class="n"&gt;num_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;min_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pixels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;

    &lt;span class="c1"&gt;# output buffer for a width x width png, with 4 color values per pixel&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;hc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# there are 256 = 2^8 values in each direction of the RGB cube&lt;/span&gt;
    &lt;span class="n"&gt;hc3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hc3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance_from_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="c1"&gt;# get the coordinate of the next pixel&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_from_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign the RGBA values to the pixel&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RGBA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das Histogram, das als Input benötigt wird war in meinem Fall nur eine &lt;span class="caps"&gt;SQL&lt;/span&gt; Query&amp;nbsp;entfernt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Bild"></category><category term="Python"></category><category term="Twitter"></category><category term="Code"></category></entry><entry><title>Twitter Profile Background Colors</title><link href="https://blog.schawe.me/en/twitter-background.html" rel="alternate"></link><published>2021-05-11T18:30:00+02:00</published><updated>2021-05-11T18:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-11:/en/twitter-background.html</id><summary type="html">&lt;p&gt;I collected tweets of &lt;span class="math"&gt;\(&amp;gt;8'000'000\)&lt;/span&gt; Twitter users for an academic project.
But Twitter does not only give you the tweets, but also many more data like
the profile background color of users. It would be a shame to let these data
go to waste, so I decided to process them …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I collected tweets of &lt;span class="math"&gt;\(&amp;gt;8'000'000\)&lt;/span&gt; Twitter users for an academic project.
But Twitter does not only give you the tweets, but also many more data like
the profile background color of users. It would be a shame to let these data
go to waste, so I decided to process them into digital art. I wanted to show
all the colors in one picture and group similar colors close to each other.
This turned out to be much less trivial than I expected, since the space
in which the colors live is the three dimensional &lt;span class="caps"&gt;RGB&lt;/span&gt; cube, but my image is
only two dimensional. There is no &lt;a href="https://codegolf.stackexchange.com/q/22144"&gt;&amp;#8220;correct&amp;#8221; way to project the colors&amp;nbsp;down.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here, I decided to put a 2D &lt;a href="https://en.wikipedia.org/wiki/Hilbert_curve"&gt;Hilbert curve&lt;/a&gt;
through the image and paint the colors in the order they are encountered by
a 3D Hilbert curve in the &lt;span class="caps"&gt;RGB&lt;/span&gt; cube. Ignoring the two default colors
&lt;code&gt;#F5F8FA&lt;/code&gt; and &lt;code&gt;#C0DEED&lt;/code&gt;, this produces this&amp;nbsp;image:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/twitter_background.png"&gt;&lt;img alt="Twitter profile background colors" src="/img/twitter_background.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And thanks to the Python packages &lt;code&gt;hilbertcurve&lt;/code&gt; and &lt;code&gt;pypng&lt;/code&gt; the code needed
to generate this image is quite&amp;nbsp;harmless:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hilbertcurve.hilbertcurve&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;png&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    turn an RGB string like `#C0DEED` into a tuple of integers,&lt;/span&gt;
&lt;span class="sd"&gt;    i.e., coordinates of the RGB cube&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    `color_histogram` is a dict mapping an rgb string like `#F5F8FA`&lt;/span&gt;
&lt;span class="sd"&gt;    to the number of usages of this color&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_background_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_histogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;F5F8FA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0DEED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_histogram&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate the size of the resulting image&lt;/span&gt;
    &lt;span class="c1"&gt;# for a 2D Hilbert curve, it mus be square with a width, which is a power of 2&lt;/span&gt;
    &lt;span class="n"&gt;num_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;min_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pixels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;

    &lt;span class="c1"&gt;# output buffer for a `width x width` png, with 4 color values per pixel&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;hc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# there are 256 = 2^8 values in each direction of the RGB cube&lt;/span&gt;
    &lt;span class="n"&gt;hc3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hc3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance_from_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="c1"&gt;# get the coordinate of the next pixel&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_from_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign the RGBA values to the pixel&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RGBA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The input histogram was in my case just a simple &lt;span class="caps"&gt;SQL&lt;/span&gt; query&amp;nbsp;away:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Image"></category><category term="Twitter"></category><category term="Code"></category><category term="Python"></category></entry><entry><title>Raspberry Router</title><link href="https://blog.schawe.me/raspberry-router.html" rel="alternate"></link><published>2021-05-10T20:19:00+02:00</published><updated>2021-05-10T20:19:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-10:/raspberry-router.html</id><summary type="html">&lt;p&gt;Für die Fälle, in denen man nur per &lt;span class="caps"&gt;WLAN&lt;/span&gt; einen Zugang
zum Internet und nur einen Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt; dabei hat, aber dennoch
kabelgebundenes Internet braucht, notiere ich diesen Eintrag.
Für weitergehende Informationen ist das &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;,
wie immer,&amp;nbsp;empfehlenswert.&lt;/p&gt;
&lt;p&gt;Wir müssen unseren Raspberry nur mit dem &lt;span class="caps"&gt;WLAN&lt;/span&gt; verbinden, das …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Für die Fälle, in denen man nur per &lt;span class="caps"&gt;WLAN&lt;/span&gt; einen Zugang
zum Internet und nur einen Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt; dabei hat, aber dennoch
kabelgebundenes Internet braucht, notiere ich diesen Eintrag.
Für weitergehende Informationen ist das &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;,
wie immer,&amp;nbsp;empfehlenswert.&lt;/p&gt;
&lt;p&gt;Wir müssen unseren Raspberry nur mit dem &lt;span class="caps"&gt;WLAN&lt;/span&gt; verbinden, das Ethernetkabel
einstecken und spezifizieren, dass der Traffic vom einen zum
anderen weitergeleitet werden&amp;nbsp;sollen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;RELATED,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Da unser Raspberry jetzt ein Router ist, muss er natürlich auch die üblichen Aufgaben
eines Routers übernehmen und die Geräte, die per Ethernet verbunden werden
per &lt;span class="caps"&gt;DHCP&lt;/span&gt; mit &lt;span class="caps"&gt;IP&lt;/span&gt; Adressen versorgen, beispielsweise mittels &lt;a href="https://wiki.archlinux.org/title/Dnsmasq"&gt;dnsmasq&lt;/a&gt;
mit folgender Konfiguration in &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#disable dns
port=0

dhcp-range=192.168.13.50,192.168.13.150,12h
bind-interfaces
dhcp-option=3,0.0.0.0
dhcp-option=6,1.1.1.1,8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bei der Gelegenheit kann man auch dafür sorgen, dass sämtlicher Traffic
durch ein &lt;span class="caps"&gt;VPN&lt;/span&gt; geleitet wird, indem man das &lt;code&gt;wlan0&lt;/code&gt; Interface oben durch
das konfigurierte &lt;span class="caps"&gt;VPN&lt;/span&gt;-Interface austauscht (zB. durch &lt;code&gt;tun0&lt;/code&gt; für OpenVPN
oder &lt;code&gt;wg0&lt;/code&gt; für&amp;nbsp;WireGuard).&lt;/p&gt;</content><category term="Snip"></category></entry><entry><title>Raspberry Router</title><link href="https://blog.schawe.me/en/raspberry-router.html" rel="alternate"></link><published>2021-05-10T20:19:00+02:00</published><updated>2021-05-10T20:19:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-10:/en/raspberry-router.html</id><summary type="html">&lt;p&gt;You need to connect something with an ethernet cable to the
internet, but there is only Wifi and all you have is a Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;No problem, all you need to do is connecting it to the Wifi, plug the
ethernet cable in and tell it to forward all traffic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You need to connect something with an ethernet cable to the
internet, but there is only Wifi and all you have is a Raspberry &lt;span class="caps"&gt;PI&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;No problem, all you need to do is connecting it to the Wifi, plug the
ethernet cable in and tell it to forward all traffic from the one interface
to the other, as described in the &lt;a href="https://wiki.archlinux.org/index.php/Internet_sharing"&gt;Arch Linux Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;RELATED,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;FORWARD&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wlan0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since our Raspberry is now a router, it should also assign &lt;span class="caps"&gt;IP&lt;/span&gt; addresses to the
devices connected to it via &lt;span class="caps"&gt;DHCP&lt;/span&gt;, for example with &lt;a href="https://wiki.archlinux.org/title/Dnsmasq"&gt;dnsmasq&lt;/a&gt;
and the following configuration in &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#disable dns
port=0

dhcp-range=192.168.13.50,192.168.13.150,12h
bind-interfaces
dhcp-option=3,0.0.0.0
dhcp-option=6,1.1.1.1,8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is also a good opportunity to route all traffic through a &lt;span class="caps"&gt;VPN&lt;/span&gt;,
by replacing the &lt;code&gt;wlan0&lt;/code&gt; interface above by the configured &lt;span class="caps"&gt;VPN&lt;/span&gt; interface
(e.g. &lt;code&gt;tun0&lt;/code&gt; for OpenVPN or &lt;code&gt;wg0&lt;/code&gt; for&amp;nbsp;WireGuard).&lt;/p&gt;</content><category term="Snip"></category></entry><entry><title>inline-python</title><link href="https://blog.schawe.me/inline-python.html" rel="alternate"></link><published>2021-05-05T20:31:00+02:00</published><updated>2021-05-05T20:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-05:/inline-python.html</id><summary type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dieses Minimalbeispiel ist natürlich nicht nützlich, aber ich habe es bereits produktiv
genutzt, um Dynamik auf &lt;a href="https://docs.rs/petgraph/"&gt;petgraph&lt;/a&gt; Graphen zu
simulieren und ihren Zustand per &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; zu&amp;nbsp;visualisieren.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph state visualized with graph-tool" class="invertable" src="/img/inlinepy_graph.png"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Python"></category></entry><entry><title>inline-python</title><link href="https://blog.schawe.me/en/inline-python.html" rel="alternate"></link><published>2021-05-05T20:31:00+02:00</published><updated>2021-05-05T20:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-05:/en/inline-python.html</id><summary type="html">&lt;p&gt;Use the right tool for the job. In my everyday life, this means writing simulations
in Rust and visualize the results in Python. Thanks to &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
this process works extremely&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Use the right tool for the job. In my everyday life, this means writing simulations
in Rust and visualize the results in Python. Thanks to &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
this process works extremely&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This minimal example is useless of course. But I already used this
crate productively to simulate dynamics on a &lt;a href="https://docs.rs/petgraph/"&gt;petgraph&lt;/a&gt;
graph and visualize its state via &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph state visualized with graph-tool" class="invertable" src="/img/inlinepy_graph.png"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Python"></category></entry><entry><title>Number of longest increasing subsequences</title><link href="https://blog.schawe.me/paper-lis2.html" rel="alternate"></link><published>2020-06-02T11:11:00+02:00</published><updated>2020-06-02T11:11:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-06-02:/paper-lis2.html</id><summary type="html">&lt;p&gt;Meine liebsten Probleme sind solche, die einfach scheinen aber sehr tief sind. Natürlich gehört
das &lt;a href="https://blog.schawe.me/paper-tsp-pt.html"&gt;Problem des Handlungsreisenden&lt;/a&gt; dazu: Es ist einfach zu verstehen,
dass der Müllmann bei jeder Mülltonne vorbei muss und dabei möglichst wenig Strecke fahren will.
Gerade deshalb ist es das Paradebeispiel für &lt;span class="caps"&gt;NP&lt;/span&gt;-schwere Probleme (technisch …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meine liebsten Probleme sind solche, die einfach scheinen aber sehr tief sind. Natürlich gehört
das &lt;a href="https://blog.schawe.me/paper-tsp-pt.html"&gt;Problem des Handlungsreisenden&lt;/a&gt; dazu: Es ist einfach zu verstehen,
dass der Müllmann bei jeder Mülltonne vorbei muss und dabei möglichst wenig Strecke fahren will.
Gerade deshalb ist es das Paradebeispiel für &lt;span class="caps"&gt;NP&lt;/span&gt;-schwere Probleme (technisch gesehen ist nur seine
Entscheidungs-Version &amp;#8220;Gibt es eine Tour, die kürzer ist als &lt;span class="math"&gt;\(X\)&lt;/span&gt;&amp;#8221; &lt;span class="caps"&gt;NP&lt;/span&gt;-schwer und nicht die typische
Optimierungsversion: &amp;#8220;Welche ist die kürzeste&amp;nbsp;Tour&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Aber fast noch besser gefällt mir das Problem der &lt;em&gt;längsten aufsteigenden Teilfolge&lt;/em&gt;, oder auf englisch,
&lt;em&gt;longest increasing subsequence&lt;/em&gt; (&lt;span class="caps"&gt;LIS&lt;/span&gt;): Gegeben eine
Folge von Zahlen &lt;span class="math"&gt;\(S_i\)&lt;/span&gt;, welche Teilfolge ist am längsten unter der Bedingung, dass die Zahlen&amp;nbsp;aufsteigen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eine längste aufsteigende Teilfolge ist in einer Folge markiert" class="invertable" src="img/lis_example.png"&gt;&lt;/p&gt;
&lt;p&gt;Dieses Problem ist so einfach, dass es erstmals von Stanisław Ulam als Fingerübung beschrieben wurde und nach meinem
Eindruck heutzutage als Übung für dynamische Programmierung in Universitäten verwendet wird. Wer weiß
wie viele Bewerber vor einem Whiteboard ins Schwitzen geraten sind bei dem Versuch es aus dem Stegreif zu&amp;nbsp;lösen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Surprising Mathematics of Longest Increasing Subsequences -- Dan Romik" src="/img/romik.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Auf der anderen Seite ist es aber offenbar tief genug, dass man ganze Bücher darüber schreiben kann.
Es zeigen sich überraschende Querverbindungen zu scheinbar unabhängigen Problemen.
Denn die Länge &lt;span class="math"&gt;\(L\)&lt;/span&gt; der &lt;span class="caps"&gt;LIS&lt;/span&gt; einer Permutation fluktuiert genauso wie der &lt;a href="https://en.wikipedia.org/wiki/Kardar%E2%80%93Parisi%E2%80%93Zhang_equation"&gt;Abstand von der Mitte zum Rand eines Kaffeeflecks&lt;/a&gt; oder die &lt;a href="https://www.quantamagazine.org/beyond-the-bell-curve-a-new-universal-law-20141015/"&gt;größten Eigenwerte von Zufallsmatrizen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nun ist die Lösung dieses Problems nicht eindeutig: Es kann viele längste aufsteigende Teilfolgen
geben. Tatsächlich wächst die Anzahl sogar exponentiell mit der Länge der ursprünglichen&amp;nbsp;Sequenz.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Verschiedene längste aufsteigende Teilfolgen der gleichen Folge" class="invertable" src="/img/lis_alternatives.png"&gt;&lt;/p&gt;
&lt;p&gt;Allerdings wurde bisher nie untersucht wie viele genau. Oftmals hört man, es sei nicht praktikabel
alle durchzuzählen, da es exponentiell viele seien. Und wenn es darum ginge alle zu enumerieren,
würde das stimmen. Aber wir wollen an dieser Stelle nur die Anzahl wissen, die wir mittels
dynamischer Programmierung effizient bestimmen können. Die Idee ist, dass wir für jedes Element,
das an Position &lt;span class="math"&gt;\(x\)&lt;/span&gt; in einer &lt;span class="caps"&gt;LIS&lt;/span&gt; auftauchen kann, berechnen, wie viele aufsteigende Teilfolgen
der Länge &lt;span class="math"&gt;\(L-x\)&lt;/span&gt; mit diesem Element&amp;nbsp;beginnen.&lt;/p&gt;
&lt;p&gt;Besonders einfach geht das, wenn wir zuerst eine Datenstruktur aufbauen, die kodiert welche
Elemente in einer &lt;span class="caps"&gt;LIS&lt;/span&gt; aufeinander folgen können. Dazu erweitern wir
&lt;a href="https://en.wikipedia.org/wiki/Patience_sorting"&gt;Patience Sort&lt;/a&gt;, und da dieser Algorithmus nach einem
Kartenspiel benannt ist, werden wir es auch mit Karten visualisieren: Wir schreiben jedes Element
unserer Sequenz auf eine Karte und legen die Karten auf einen Stapel, sodass das erste Element der Sequenz
oben liegt. Dann nehmen wir Karten von oben ab und legen sie auf verschiedene Stapel. Die erste Karte legen
wir auf den ersten, noch leeren Stapel. Die folgenden Karten legen wir auf den ersten Stapel, dessen
oberstes Element größer ist als die aktuelle Karte und ansonsten machen wir einen neuen Stapel rechts
davon auf. Jedes mal wenn wir eine Karte ablegen, lassen wir sie auf alle Karten, die aktuell auf dem
Vorgängerstapel liegen und kleiner sind, zeigen &amp;#8212; dies sind die Karten die in einer aufsteigenden
längsten Teilfolge direkt vor ihr auftauchen&amp;nbsp;können.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation von Patience Sort" class="invertable" src="/img/patience.gif"&gt;&lt;/p&gt;
&lt;p&gt;Am Ende haben wir &lt;span class="math"&gt;\(L\)&lt;/span&gt; Stapel, wobei &lt;span class="math"&gt;\(L\)&lt;/span&gt; die Länge der &lt;span class="caps"&gt;LIS&lt;/span&gt; ist, und wir können vom Stapel ganz rechts starten
und den Pfeilen folgen, um eine &lt;span class="caps"&gt;LIS&lt;/span&gt; zusammenzubauen. Wenn wir nur an der
&lt;a href="https://doi.org/10.1103/PhysRevE.101.062109"&gt;Länge interessiert wären&lt;/a&gt;, müssten wir uns über den Inhalt der Stapel keine Gedanken machen und der Algorithmus ließe sich sehr kompakt&amp;nbsp;darstellen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;lis_len&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nb"&gt;Ord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered non-unique element in sequence!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aber wir wollen mehr, deshalb notieren wir uns im nächsten Schritt bei allen Karten des
rechtesten Stapels wie viele aufsteigende Teilfolgen
der Länge &lt;span class="math"&gt;\(x=1\)&lt;/span&gt; mit ihnen starten, was trivialerweise je eine ist. Dann notieren wir bei allen Karten des
Stapels links davon wie viele aufsteigenden Teilfolgen der Länge 2 mit ihnen anfangen. Das können wir berechnen,
indem wir den Pfeilen rückwärts folgen und die Annotationen jeweils aufaddieren. Nachdem wir dies für
alle Stapel wiederholt haben und den linkesten Stapel beschriftet haben, können wir alle Annotationen des
linkesten Stapels aufaddieren, um die gesamte Anzahl &lt;span class="caps"&gt;LIS&lt;/span&gt; zu erhalten: hier &lt;span class="math"&gt;\(7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Beispiel der Datenstruktur zum Zählen der unterschiedlichen LIS" class="invertable" src="/img/lis_backpointer.png"&gt;&lt;/p&gt;
&lt;p&gt;Wie sich das ganze für längere Sequenzen aus unterschiedlichen Zufallsensembles im Detail verhält
haben wir in einem &lt;a href="https://hendrik.schawe.me/pdf/2020_liscount_PRE.pdf"&gt;Artikel&lt;/a&gt;&amp;nbsp;veröffentlicht.&lt;/p&gt;</content><category term="Phys"></category><category term="Veröffentlichung"></category><category term="Physik"></category><category term="Bild"></category></entry><entry><title>Number of longest increasing subsequences</title><link href="https://blog.schawe.me/en/paper-lis2.html" rel="alternate"></link><published>2020-06-02T11:11:00+02:00</published><updated>2020-06-02T11:11:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-06-02:/en/paper-lis2.html</id><summary type="html">&lt;p&gt;My favorite problems are those which seem simple but exhibit unexpected depth. A prime
example is the &lt;a href="https://blog.schawe.me/en/paper-tsp-pt.html"&gt;Traveling Salesperson Problem&lt;/a&gt;: It is simple to understand
that the garbage truck needs to collect every garbage container, while trying to take the shortest&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;But here, I want to talk about the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My favorite problems are those which seem simple but exhibit unexpected depth. A prime
example is the &lt;a href="https://blog.schawe.me/en/paper-tsp-pt.html"&gt;Traveling Salesperson Problem&lt;/a&gt;: It is simple to understand
that the garbage truck needs to collect every garbage container, while trying to take the shortest&amp;nbsp;route.&lt;/p&gt;
&lt;p&gt;But here, I want to talk about the problem of the &lt;em&gt;longest increasing subsequence&lt;/em&gt; (&lt;span class="caps"&gt;LIS&lt;/span&gt;): For a
given sequence of numbers, find the subsequence consisting of increasing numbers, which is&amp;nbsp;longest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A longest increasing subsequence is marked in a sequence" class="invertable" src="/img/lis_example.png"&gt;&lt;/p&gt;
&lt;p&gt;This problem is so simple that it was first studied almost as a placeholder by Stanisław Ulam in a
book chapter describing the Monte Carlo method. And judging by the google results, it seems to
be a common problem posed to university students. I am wondering how many job applicants were distressed
when trying to solve it in front of a&amp;nbsp;whiteboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Surprising Mathematics of Longest Increasing Subsequences -- Dan Romik" src="/img/romik.jpg"&gt;&lt;/p&gt;
&lt;p&gt;However, apparently one can write whole books about this problem. It turns out that there are
surprising connections to seemingly independent problems. For example, the length &lt;span class="math"&gt;\(L\)&lt;/span&gt; of a &lt;span class="caps"&gt;LIS&lt;/span&gt;
of a permutation fluctuates the same way as the
&lt;a href="https://en.wikipedia.org/wiki/Kardar%E2%80%93Parisi%E2%80%93Zhang_equation"&gt;distance from the center to the border of a coffee stain&lt;/a&gt;
or the &lt;a href="https://www.quantamagazine.org/beyond-the-bell-curve-a-new-universal-law-20141015/"&gt;largest eigenvalues of random matrices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution of this problem is not unique: A Sequence can contain multiple longest increasing
subsequences. Indeed, their number grows exponentially with the length of the original&amp;nbsp;sequence.&lt;/p&gt;
&lt;p&gt;![Different longest increasing subsequences within the same sequence](/img/lis_alternatives.png]{:&amp;nbsp;.invertable}&lt;/p&gt;
&lt;p&gt;But up to now, there did not exist any results about the precise number of different &lt;span class="caps"&gt;LIS&lt;/span&gt;.
A common sentiment is that counting all &lt;span class="caps"&gt;LIS&lt;/span&gt; was infeasible, since there are exponentially many.
And that would be true if we would want to enumerate them. But since we only want to now
the number, we can use dynamic programming to determine it efficiently. The basic idea
is that we calculate for each element that can appear at position &lt;span class="math"&gt;\(x\)&lt;/span&gt; in a &lt;span class="caps"&gt;LIS&lt;/span&gt; of how many
increasing subsequences of length &lt;span class="math"&gt;\(L-x\)&lt;/span&gt; it is the first&amp;nbsp;element.&lt;/p&gt;
&lt;p&gt;This becomes easy thanks to a datastructure encoding which elements can be subsequent in a &lt;span class="caps"&gt;LIS&lt;/span&gt;.
For this we extend &lt;a href="https://en.wikipedia.org/wiki/Patience_sorting"&gt;Patience Sort&lt;/a&gt;. Since the algorithm
is called after a game of cards, it is adequate to describe it with cards: We write each element of
our sequence on a card and sort the deck according to the sequence such that the first element is on
top. Then we take cards from the top of the deck. We put the topmost card on the table opening a stack.
We put the next card on the first stack whose top card is larger than it or open a new stack right of
the currently rightmost stack. Each time we put a card on the table, we also add pointers to all cards
of the stack left of the placed card which are smaller. These are the cards which could be its predecessor
in a &lt;span class="caps"&gt;LIS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation of Patience Sort" src="/img/patience.gif"&gt;&lt;/p&gt;
&lt;p&gt;In the end there are &lt;span class="math"&gt;\(L\)&lt;/span&gt; stacks, where &lt;span class="math"&gt;\(L\)&lt;/span&gt; is the length of the &lt;span class="caps"&gt;LIS&lt;/span&gt;. We can start from the rightmost
stack, select an arbitrary element and follow the pointers to build a &lt;span class="caps"&gt;LIS&lt;/span&gt;. If we were only
&lt;a href="https://doi.org/10.1103/PhysRevE.101.062109"&gt;interested in the length&lt;/a&gt;, we could disregard all but the top card of every
stack and could simply the&amp;nbsp;algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;lis_len&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;: &lt;span class="nb"&gt;Ord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered non-unique element in sequence!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But we want more, therefore we annotate each card of the rightmost stack with the number of increasing
subsequences of length &lt;span class="math"&gt;\(x=1\)&lt;/span&gt; of which they are the first element, which is trivially 1 for each card.
Then we continue with the stack left of it and annotate how many increasing subsequences of length 2
start with them. We can calculate this easily by following the pointers backwards and add up the
annotations of all predecessor cards. After repeating this and annotating the leftmost stack, we
can sum all annotations of the leftmost stack to get the total number of distinct &lt;span class="caps"&gt;LIS&lt;/span&gt;: here &lt;span class="math"&gt;\(7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of the datastructure to count LIS" class="invertable" src="/img/lis_backpointer.png"&gt;&lt;/p&gt;
&lt;p&gt;About the behavior for longer sequences from different random ensembles we published an
&lt;a href="https://hendrik.schawe.me/pdf/2020_liscount_PRE.pdf"&gt;article&lt;/a&gt;.&lt;/p&gt;</content><category term="Phys"></category><category term="Publication"></category><category term="Physics"></category><category term="Image"></category></entry><entry><title>compress-pdf</title><link href="https://blog.schawe.me/compress-pdf.html" rel="alternate"></link><published>2020-04-12T10:26:00+02:00</published><updated>2020-04-12T10:26:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2020-04-12:/compress-pdf.html</id><summary type="html">&lt;p&gt;Um ein &lt;code&gt;pdf&lt;/code&gt; mit vielen zu hoch aufgelösten Bildern auf eine angemessene
Dateigröße zu bringen (durch das Herunterskalieren und gegebenenfalls
Neukodieren der Bilder), kann einfach ghostscript genutzt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Qualitätspresets …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Um ein &lt;code&gt;pdf&lt;/code&gt; mit vielen zu hoch aufgelösten Bildern auf eine angemessene
Dateigröße zu bringen (durch das Herunterskalieren und gegebenenfalls
Neukodieren der Bilder), kann einfach ghostscript genutzt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Qualitätspresets sind &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook&lt;/code&gt;, &lt;code&gt;printer&lt;/code&gt;, &lt;code&gt;prepress&lt;/code&gt; und &lt;code&gt;default&lt;/code&gt;.
Weitere Optionsnamen können durch folgendes Kommando ermittelt&amp;nbsp;werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currentpagedevice { exch ==only ( ) print == } forall&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>compress-pdf</title><link href="https://blog.schawe.me/en/compress-pdf.html" rel="alternate"></link><published>2020-04-12T10:26:00+02:00</published><updated>2020-04-12T10:26:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2020-04-12:/en/compress-pdf.html</id><summary type="html">&lt;p&gt;To compress of a &lt;code&gt;pdf&lt;/code&gt; with many high resolution images
to a sensible filesize (by downscaling and reencoding the images),
one can use&amp;nbsp;ghostscript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The available presets are &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;To compress of a &lt;code&gt;pdf&lt;/code&gt; with many high resolution images
to a sensible filesize (by downscaling and reencoding the images),
one can use&amp;nbsp;ghostscript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4&lt;span class="w"&gt; &lt;/span&gt;-dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/ebook&lt;span class="w"&gt; &lt;/span&gt;-dEmbedAllFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dSubsetFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-dNOPAUSE&lt;span class="w"&gt; &lt;/span&gt;-dQUIET&lt;span class="w"&gt; &lt;/span&gt;-dBATCH&lt;span class="w"&gt; &lt;/span&gt;-sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf&lt;span class="w"&gt; &lt;/span&gt;input.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The available presets are &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;ebook&lt;/code&gt;, &lt;code&gt;printer&lt;/code&gt;, &lt;code&gt;prepress&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;.
More options can be listed&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gs&lt;span class="w"&gt; &lt;/span&gt;-sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currentpagedevice { exch ==only ( ) print == } forall&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>smartphone webcam</title><link href="https://blog.schawe.me/smartphone-webcam.html" rel="alternate"></link><published>2020-04-04T10:59:00+02:00</published><updated>2020-04-04T10:59:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-04-04:/smartphone-webcam.html</id><summary type="html">&lt;p&gt;Um die Kamera eines Smartphones als Webcam für eine Videokonferenz auf dem Computer zu nutzen,
braucht man zuerst eine App, die das Bild der Kamera als &lt;code&gt;http&lt;/code&gt;-Stream bereit
stellt, bspw. &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=de"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Für Linux existieren die Projekte &lt;code&gt;v4l2loopback&lt;/code&gt; und &lt;code&gt;ffmpeg&lt;/code&gt; mit deren Hilfe
der Stream als Webcam input genutzt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Um die Kamera eines Smartphones als Webcam für eine Videokonferenz auf dem Computer zu nutzen,
braucht man zuerst eine App, die das Bild der Kamera als &lt;code&gt;http&lt;/code&gt;-Stream bereit
stellt, bspw. &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=de"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Für Linux existieren die Projekte &lt;code&gt;v4l2loopback&lt;/code&gt; und &lt;code&gt;ffmpeg&lt;/code&gt; mit deren Hilfe
der Stream als Webcam input genutzt werden kann (hier für den Fall, dass das
Smartphone die &lt;span class="caps"&gt;IP&lt;/span&gt; &lt;code&gt;192.168.1.127&lt;/code&gt; hat):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;modprobe&lt;span class="w"&gt; &lt;/span&gt;v4l2loopback
ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:v&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-vf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Natürlich kann man beliebige Filter von &lt;code&gt;ffmpeg&lt;/code&gt; anwenden, zum Beispiel einen
&lt;code&gt;colorkey&lt;/code&gt; oder &lt;code&gt;chromakey&lt;/code&gt;, um ein beliebiges Bild &lt;code&gt;background.jpg&lt;/code&gt; als
virtuellen Hintergrund zu nutzen. Hier für den Fall, dass ein weißes Bettlaken
als &amp;#8220;green screen&amp;#8221; genutzt&amp;nbsp;wird:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;images/background.jpg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-filter_complex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[1:v]colorkey=0xbbbbbb:0.3:0.2[foregroud];[0:v][foregroud]overlay[composite];[composite]format=yuv420p[out]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[out]:v&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ähnlich kann auch das Smartphone-Mikrophon als Mikrophon für den Computer genutzt
werden. Hier mithilfe von &lt;code&gt;pulseaudio&lt;/code&gt; und &lt;code&gt;gstreamer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pactl&lt;span class="w"&gt; &lt;/span&gt;load-module&lt;span class="w"&gt; &lt;/span&gt;module-null-sink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
pactl&lt;span class="w"&gt; &lt;/span&gt;set-default-source&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam.monitor&amp;quot;&lt;/span&gt;
gst-launch-1.0&lt;span class="w"&gt; &lt;/span&gt;souphttpsrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.1.127:8080/audio.wav&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is-live&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;audio/x-raw,format&lt;span class="o"&gt;=&lt;/span&gt;S16LE,layout&lt;span class="o"&gt;=&lt;/span&gt;interleaved,rate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44100&lt;/span&gt;,channels&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;queue&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;pulsesink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>smartphone webcam</title><link href="https://blog.schawe.me/en/smartphone-webcam.html" rel="alternate"></link><published>2020-04-04T10:59:00+02:00</published><updated>2020-04-04T10:59:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2020-04-04:/en/smartphone-webcam.html</id><summary type="html">&lt;p&gt;To use the camera of a smartphone for a video conference on a computer, first
an app is needed, which provides the image of the camera as a &lt;code&gt;http&lt;/code&gt; stream,
for example &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=en"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Linux we can use &lt;code&gt;v4l2loopback&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt; to use the stream as a virtual
webcam …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To use the camera of a smartphone for a video conference on a computer, first
an app is needed, which provides the image of the camera as a &lt;code&gt;http&lt;/code&gt; stream,
for example &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;amp;hl=en"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Webcam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Linux we can use &lt;code&gt;v4l2loopback&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt; to use the stream as a virtual
webcam (here for the case that the smartphone has the &lt;span class="caps"&gt;IP&lt;/span&gt; &lt;code&gt;192.168.1.127&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;modprobe&lt;span class="w"&gt; &lt;/span&gt;v4l2loopback
ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:v&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-vf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, one can use any filter &lt;code&gt;ffmpeg&lt;/code&gt; offers, for example a &lt;code&gt;colorkey&lt;/code&gt;
or &lt;code&gt;chromakey&lt;/code&gt;, to use any image &lt;code&gt;background.jpg&lt;/code&gt; as a virtual background.
Here for the case that a white sheet is used as a &amp;#8220;green&amp;nbsp;screen&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;images/background.jpg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;http://192.168.1.127:8080/video&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;rawvideo&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;nobuffer&lt;span class="w"&gt; &lt;/span&gt;-flags&lt;span class="w"&gt; &lt;/span&gt;low_delay&lt;span class="w"&gt; &lt;/span&gt;-fflags&lt;span class="w"&gt; &lt;/span&gt;discardcorrupt&lt;span class="w"&gt; &lt;/span&gt;-filter_complex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[1:v]colorkey=0xbbbbbb:0.3:0.2[foregroud];[0:v][foregroud]overlay[composite];[composite]format=yuv420p[out]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-map&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[out]:v&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;v4l2&lt;span class="w"&gt; &lt;/span&gt;/dev/video2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, one can use the microphone of the smartphone as audio input for the
computer. Here using &lt;code&gt;pulseaudio&lt;/code&gt; and &lt;code&gt;gstreamer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pactl&lt;span class="w"&gt; &lt;/span&gt;load-module&lt;span class="w"&gt; &lt;/span&gt;module-null-sink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
pactl&lt;span class="w"&gt; &lt;/span&gt;set-default-source&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam.monitor&amp;quot;&lt;/span&gt;
gst-launch-1.0&lt;span class="w"&gt; &lt;/span&gt;souphttpsrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.1.127:8080/audio.wav&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is-live&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;audio/x-raw,format&lt;span class="o"&gt;=&lt;/span&gt;S16LE,layout&lt;span class="o"&gt;=&lt;/span&gt;interleaved,rate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44100&lt;/span&gt;,channels&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;queue&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;pulsesink&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipwebcam&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Phase Transitions of Traveling Salesperson Problems solved with Linear Programming and Cutting Planes</title><link href="https://blog.schawe.me/paper-tsp-pt.html" rel="alternate"></link><published>2018-07-31T06:28:00+02:00</published><updated>2018-07-31T06:28:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-07-31:/paper-tsp-pt.html</id><summary type="html">&lt;p&gt;In diesem Artikel wird ein Ensemble von Problemen des Handlungsreisenden (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
eingeführt, das abhängig von einem Parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; von einer trivial einfach
zu lösenden Konfiguration, nämlich Städte, die äquidistant auf einem Kreis angeordnet
sind, zum zufälligen euklidischen &lt;span class="caps"&gt;TSP&lt;/span&gt; in der Ebene&amp;nbsp;interpoliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;Danach werden mittels &lt;a href="https://de.wikipedia.org/wiki/Lineare_Optimierung"&gt;linearer Programmierung&lt;/a&gt; einige
Phasenübergänge festgestellt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In diesem Artikel wird ein Ensemble von Problemen des Handlungsreisenden (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
eingeführt, das abhängig von einem Parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; von einer trivial einfach
zu lösenden Konfiguration, nämlich Städte, die äquidistant auf einem Kreis angeordnet
sind, zum zufälligen euklidischen &lt;span class="caps"&gt;TSP&lt;/span&gt; in der Ebene&amp;nbsp;interpoliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;Danach werden mittels &lt;a href="https://de.wikipedia.org/wiki/Lineare_Optimierung"&gt;linearer Programmierung&lt;/a&gt; einige
Phasenübergänge festgestellt, ab welchen Werten von &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; das Problem
schwierig zu lösen wird. Zu zwei dieser Übergänge werden strukturelle
Eigenschaften der optimalen Lösung gefunden, die sich an dieser Stelle
ebenfalls charakteristisch ändern. Da die optimale Lösung nicht von der
Lösungsmethode abhängt, sind diese Phasenübergänge also nicht nur von Bedeutung
für das spezielle Lineare Programm bzw. den Algorithmus der zu dessen Lösung
genutzt wurde, sondern fundamentale Eigenschaft dieses &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;Ensembles.&lt;/p&gt;
&lt;p&gt;Im Detail haben wir die klassische Formulierung von Dantzig&amp;nbsp;genutzt:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \label{eq:objective}
    &amp;amp;\text{minimize}     &amp;amp;  \sum_i \sum_{j&amp;lt;i} c_{ij} x_{ij}\\
    \label{eq:int}
    &amp;amp;\text{subject to}   &amp;amp;  x_{ij}                                &amp;amp;\in \{0,1\}\\ %\mathbb{Z}\\
    \label{eq:inout}
    &amp;amp;                    &amp;amp;  \sum_{j} x_{ij}                       &amp;amp;= 2&amp;amp;            &amp;amp; \forall i \in V \\
    \label{eq:sec}
    &amp;amp;                    &amp;amp;  \sum_{i \in S, j \notin S} x_{ij}     &amp;amp;\ge 2&amp;amp;          &amp;amp; \forall S \varsubsetneq V, S \ne \varnothing
\end{align*}&lt;/div&gt;
&lt;p&gt;Hier ist &lt;span class="math"&gt;\(c_{ij}\)&lt;/span&gt; die Distanzmatrix zwischen allen Paaren von Städten aus &lt;span class="math"&gt;\(V\)&lt;/span&gt; und &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt;
die gesuchte Adjazenzmatrix, also &lt;span class="math"&gt;\(x_{ij} = 1\)&lt;/span&gt;, wenn &lt;span class="math"&gt;\(i\)&lt;/span&gt; und &lt;span class="math"&gt;\(j\)&lt;/span&gt; aufeinanderfolgende Stationen
der Tour sind und &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt; sonst. Die erste Zeile minimiert also die Strecke der Tour.
Um zu vermeiden, dass wir die triviale Lösung &lt;span class="math"&gt;\(x_{ij}=0\)&lt;/span&gt;, also &amp;#8220;wenn wir zu Hause
bleiben müssen wir am wenigsten Strecke zurücklegen&amp;#8221; finden, zwingt die dritte
Zeile unseren Handlungsreisenden seine Tour so zu planen, dass in Summe zwei
Striche an jede Stadt gezeichnet werden &amp;#8212; genug, um hinein und wieder hinaus
zu reisen. Allerdings, ist unser Handlungsreisender clever und würde versuchen uns
auszutricksen, indem er halbe Striche einzeichnen würde, wie
&lt;a href="https://blog.schawe.me/tspview.html"&gt;in einem anderen Blogeintrag visualisiert&lt;/a&gt;. Deshalb ist die
Bedingung in der zweiten Zeile nötig, die die Einträge in der Adjazenzmatrix auf
ganze Zahlen beschränkt. Dann bleibt nur noch das Problem, dass mehrere Routen,
die nicht verbunden sind erlaubt wären, sodass wir sie durch die letzte Zeile
verbieten: die &lt;em&gt;Subtour Elimination Constraints&lt;/em&gt;. Der aufmerksame Leser mag
schon erkannt haben, dass es für jede Untermenge von Städten so eine Constraint
definiert, also exponentiell viele in der Anzahl der Städte. Die Lösung
zu dieses Problem liegt darin, dass nur sehr wenige wirklich gebraucht werden, sodass
man das Problem ohne diese Constraint löst, testet ob eine verletzt ist, was mittels
der Berechnung eines &lt;a href="https://en.wikipedia.org/wiki/Minimum_cut"&gt;minimum cut&lt;/a&gt; sehr
schnell geht und dann eine einzelne Constraint, die diese Konfiguration verbietet
hinzufügt. Diese Methode iterativ Constraints hinzuzufügen wird meist als &lt;em&gt;Cutting Planes&lt;/em&gt;&amp;nbsp;bezeichnet.&lt;/p&gt;
&lt;p&gt;Also haben wir einen schnellen Algorithmus für das Problem des Handlungsreisenden
gefunden? Nein, leider können wir den &lt;a href="https://en.wikipedia.org/wiki/Millennium_Prize_Problems#P_versus_NP"&gt;Millenium Preis&lt;/a&gt; noch nicht beanspruchen. Es gibt keinen bekannten Algorithmus, der dieses Problem
unter Erfüllung der zweiten Zeilen, also Beschränkung auf ganzzahlige Lösungen lösen kann.
Aber sobald wir diese Bedingung fallen lassen, können wir klassische Verfahren der
linearen Programmierung nutzen, um dieses Problem effizient zu lösen. Dies wird auch
&lt;a href="https://en.wikipedia.org/wiki/Linear_programming_relaxation"&gt;Relaxation&lt;/a&gt; genannt. Die Länge der
Strecke ist immer eine untere Schranke für die tatsächliche Lösung. Und wenn unsere
Lösung per Zufall ganzzahlig ist, können wir uns sicher sein, die Optimale Lösung
gefunden zu&amp;nbsp;haben.&lt;/p&gt;
&lt;p&gt;Als Ordnungsparameter des Phasenübergangs zwischen leichten und schweren Konfigurationen
dient uns also die Wahrscheinlichkeit, dass
mittels eines Simplex-Solvers eine ganzzahlige, und damit optimale, Lösung
gefunden wird. Ohne die Subtour Elimination Constraints,
fällt der Phasenübergang auf den Punkt, an dem sich die optimale Lösung erstmals
von der Reihenfolge der Städte des ursprünglichen Kreises unterscheidet.
Mit den Subtour Elimination Constraints, fällt der Phasenübergang auf den
Punkt, wo die optimale Tour anfängt von einem Zickzack-Kurs auf große Meander zu
wechseln. Dies wird durch die geometrische Gewundenheit, die &lt;em&gt;Tortuosität&lt;/em&gt;,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \tau = \frac{n-1}{L} \sum_{i=1}^{n} \left( \frac{L_i}{S_i}-1 \right).
\end{align*}&lt;/div&gt;
&lt;p&gt;
ermittelt, die an diesem Punkt maximal wird. Hier wird die Tour in &lt;span class="math"&gt;\(N\)&lt;/span&gt;
Teilstücke mit gleichem Vorzeichen der Krümmung unterteilt und für jedes
Teilstück das Verhältnis von direkter Ende-zu-Ende-Distanz &lt;span class="math"&gt;\(S_i\)&lt;/span&gt; zu der
Länge entlang der Tour &lt;span class="math"&gt;\(L-i\)&lt;/span&gt;&amp;nbsp;summiert.&lt;/p&gt;
&lt;p&gt;Wir haben also kontinuierliche Phasenübergänge in der Schwierigkeit dieses Problems
mittels linearer Programmierung detektiert und sie mit strukturellen Änderungen
des Verhaltens in Verbindung&amp;nbsp;gebracht.&lt;/p&gt;</content><category term="Phys"></category><category term="Veröffentlichung"></category><category term="Physik"></category></entry><entry><title>Phase Transitions of Traveling Salesperson Problems solved with Linear Programming and Cutting Planes</title><link href="https://blog.schawe.me/en/paper-tsp-pt.html" rel="alternate"></link><published>2018-07-31T06:28:00+02:00</published><updated>2018-07-31T06:28:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-07-31:/en/paper-tsp-pt.html</id><summary type="html">&lt;p&gt;In this Article, we introduce an ensemble of the Traveling Salesperson problem (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
that can be tuned with a parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; from the trivial case of cities
equidistant on a circle to the random Euclidean &lt;span class="caps"&gt;TSP&lt;/span&gt; in a&amp;nbsp;plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;For this ensemble we determine some phase transitions from an &amp;#8220;easy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this Article, we introduce an ensemble of the Traveling Salesperson problem (&lt;span class="caps"&gt;TSP&lt;/span&gt;)
that can be tuned with a parameter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; from the trivial case of cities
equidistant on a circle to the random Euclidean &lt;span class="caps"&gt;TSP&lt;/span&gt; in a&amp;nbsp;plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Einfach und schwierig zu lösende TSP Konfigurationen" class="invertable" src="/img/tsp_interp.svg"&gt;&lt;/p&gt;
&lt;p&gt;For this ensemble we determine some phase transitions from an &amp;#8220;easy&amp;#8221; phase to
a &amp;#8220;not-that-easy&amp;#8221; phase using linear programming. For each of these transitions
we present structural properties of the optimal solution, which change at these
points characteristically. Since the optimal solution is independent of the
solution method, those phase transitions are not only relevant for the specific
linear program respectively the solver implementation used to solve them, but
a fundamental property of this &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;ensemble.&lt;/p&gt;
&lt;p&gt;We used the classical linear program of&amp;nbsp;Dantzig:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \label{eq:objective}
    &amp;amp;\text{minimize}     &amp;amp;  \sum_i \sum_{j&amp;lt;i} c_{ij} x_{ij}\\
    \label{eq:int}
    &amp;amp;\text{subject to}   &amp;amp;  x_{ij}                                &amp;amp;\in \{0,1\}\\ %\mathbb{Z}\\
    \label{eq:inout}
    &amp;amp;                    &amp;amp;  \sum_{j} x_{ij}                       &amp;amp;= 2&amp;amp;            &amp;amp; \forall i \in V \\
    \label{eq:sec}
    &amp;amp;                    &amp;amp;  \sum_{i \in S, j \notin S} x_{ij}     &amp;amp;\ge 2&amp;amp;          &amp;amp; \forall S \varsubsetneq V, S \ne \varnothing
\end{align}&lt;/div&gt;
&lt;p&gt;Here &lt;span class="math"&gt;\(c_{ij}\)&lt;/span&gt; is the distance matrix between all pairs of cities
of &lt;span class="math"&gt;\(V\)&lt;/span&gt; and &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt; is the adjacency matrix, i.e., &lt;span class="math"&gt;\(x_{ij} = 1\)&lt;/span&gt;,
if &lt;span class="math"&gt;\(i\)&lt;/span&gt; and &lt;span class="math"&gt;\(j\)&lt;/span&gt; are consecutive in the tour and &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt; otherwise.
Therefore, the first line minimizes the length of the tour.
To avoid that we conclude that &lt;span class="math"&gt;\(x_{ij} = 0\)&lt;/span&gt;, i.e., staying at home,
is identified as the optimal tour, we introduce the third line to
force each city to have two connections, enough to enter and leave.
But our salesman is clever and can trick us by choosing
&lt;span class="math"&gt;\(x_{ij} = 0.5\)&lt;/span&gt;. Since we can not interpret this, we introduce line 2
to force all &lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt; to integers.
Still valid are two unconnected tours, which we forbid with
the fourth line, the &lt;em&gt;subtour elimination constraints&lt;/em&gt;.
Well, the careful reader might already see that we defined
one constraint for each subset of the cities, which are exponentially
many in the number of cities. But we can solve this by starting
without this class of constraints and only adding the ones which
are actually violated by a solution. The violated ones can luckily
be found easily by calculating the &lt;a href="https://en.wikipedia.org/wiki/Minimum_cut"&gt;minimum cut&lt;/a&gt; of the proposed solution. The corresponding
constraint can be added and the procedure is repeated until no
subtour elimination constraint is violated&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;So does that mean that we found an efficient algorithm to solve
the traveling salesperson problem? No, unfortunately we can not
claim the &lt;a href="https://en.wikipedia.org/wiki/Millennium_Prize_Problems#P_versus_NP"&gt;Millenium Prize&lt;/a&gt; yet. There is no known
algorithm which can efficiently solve this problem under the
integer constraint.
But if we drop this constraint, we can use efficient algorithms
of linear programming to solve the
&lt;a href="https://en.wikipedia.org/wiki/Linear_programming_relaxation"&gt;relaxation&lt;/a&gt;. The resulting length will always
be a lower bound on the actual solution and if we, by chance, find
an integer solution, we can be sure that it is actually the
optimal&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;As the order parameter of the transitions from easy to hard we use the probability that a simplex
solver yields an integer, and therefore optimal, solution. Without  the Subtour Elimination Constraints,
the transition occurs at the point at which the optimal solution deviates
from the order of the cities on the initial circle. With the Subtour
Elimination Constraints the transition coincides with the point at which
the optimal tour changes from a zig-zag course to larger meandering arcs.
This is measured by the&amp;nbsp;tortuosity
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \tau = \frac{n-1}{L} \sum_{i=1}^{n} \left( \frac{L_i}{S_i}-1 \right).
\end{align*}&lt;/div&gt;
&lt;p&gt;
which is maximal at this point. For the tortuosity the tour is divided in &lt;span class="math"&gt;\(N\)&lt;/span&gt;
parts of same-sign-curvature. For each part the ratio of the direct end-to-end
distance &lt;span class="math"&gt;\(S_i\)&lt;/span&gt; to the length along the arc &lt;span class="math"&gt;\(L_i\)&lt;/span&gt; is&amp;nbsp;summed.&lt;/p&gt;
&lt;p&gt;So, we detected continuous phase transitions in the hardness
of the problem with linear programming and correlated them
with structural&amp;nbsp;changes.&lt;/p&gt;</content><category term="Phys"></category><category term="Publication"></category><category term="Physics"></category></entry><entry><title>relay ssh</title><link href="https://blog.schawe.me/relay-ssh.html" rel="alternate"></link><published>2018-03-21T10:46:00+01:00</published><updated>2018-03-21T10:46:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-03-21:/relay-ssh.html</id><summary type="html">&lt;p&gt;Um sich per Server &lt;code&gt;relay&lt;/code&gt; mit &lt;code&gt;target&lt;/code&gt; zu verbinden. Nützlich wenn &lt;code&gt;target&lt;/code&gt;
hinter einer Firewall versteckt, aber von &lt;code&gt;relay&lt;/code&gt; erreichbar&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies kann mit anderen Optionen kombiniert werden, sodass eine Portweiterleitung
stattfinden kann, über die bspw. &lt;code&gt;sshfs&lt;/code&gt; genutzt werden&amp;nbsp;kann.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Um sich per Server &lt;code&gt;relay&lt;/code&gt; mit &lt;code&gt;target&lt;/code&gt; zu verbinden. Nützlich wenn &lt;code&gt;target&lt;/code&gt;
hinter einer Firewall versteckt, aber von &lt;code&gt;relay&lt;/code&gt; erreichbar&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies kann mit anderen Optionen kombiniert werden, sodass eine Portweiterleitung
stattfinden kann, über die bspw. &lt;code&gt;sshfs&lt;/code&gt; genutzt werden&amp;nbsp;kann.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
sshfs&lt;span class="w"&gt; &lt;/span&gt;user2@localhost:/path&lt;span class="w"&gt; &lt;/span&gt;/mountpoint&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eine Kombination mit &lt;a href="https://blog.schawe.me/reverse-ssh.html"&gt;reverse-ssh&lt;/a&gt;
könnte so&amp;nbsp;aussehen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user2@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>relay ssh</title><link href="https://blog.schawe.me/en/relay-ssh.html" rel="alternate"></link><published>2018-03-21T10:46:00+01:00</published><updated>2018-03-21T10:46:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-03-21:/en/relay-ssh.html</id><summary type="html">&lt;p&gt;Connect via a server &lt;code&gt;relay&lt;/code&gt; with &lt;code&gt;target&lt;/code&gt;. Useful if &lt;code&gt;target&lt;/code&gt; is behind a
firewall, but reachable from &lt;code&gt;relay&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be combined with other options. This way a port forwarding can
be established over which, e.g., &lt;code&gt;sshfs&lt;/code&gt; can be&amp;nbsp;used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Connect via a server &lt;code&gt;relay&lt;/code&gt; with &lt;code&gt;target&lt;/code&gt;. Useful if &lt;code&gt;target&lt;/code&gt; is behind a
firewall, but reachable from &lt;code&gt;relay&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be combined with other options. This way a port forwarding can
be established over which, e.g., &lt;code&gt;sshfs&lt;/code&gt; can be&amp;nbsp;used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;user2@target
sshfs&lt;span class="w"&gt; &lt;/span&gt;user2@localhost:/path&lt;span class="w"&gt; &lt;/span&gt;/mountpoint&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A combination with &lt;a href="https://blog.schawe.me/en/reverse-ssh.html"&gt;reverse-ssh&lt;/a&gt;
could look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;:localhost:22&lt;span class="w"&gt; &lt;/span&gt;-J&lt;span class="w"&gt; &lt;/span&gt;user1@relay&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user2@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>latexdiff</title><link href="https://blog.schawe.me/latexdiff.html" rel="alternate"></link><published>2018-01-11T15:28:00+01:00</published><updated>2018-01-11T15:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-01-11:/latexdiff.html</id><summary type="html">&lt;p&gt;Um die Unterschiede zwischen zwei Latex Dateien zu ermitteln, die beispielsweise
aus Git&amp;nbsp;kommen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und wenn man sowieso schon git benutzt, reicht es einfach den Hash des Commits
angeben, den man mit dem aktuellen Stand vergleichen&amp;nbsp;will.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Um die Unterschiede zwischen zwei Latex Dateien zu ermitteln, die beispielsweise
aus Git&amp;nbsp;kommen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und wenn man sowieso schon git benutzt, reicht es einfach den Hash des Commits
angeben, den man mit dem aktuellen Stand vergleichen&amp;nbsp;will.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef&lt;span class="w"&gt; &lt;/span&gt;filename.tex&lt;span class="w"&gt; &lt;/span&gt;--pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>latexdiff</title><link href="https://blog.schawe.me/en/latexdiff.html" rel="alternate"></link><published>2018-01-11T15:28:00+01:00</published><updated>2018-01-11T15:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2018-01-11:/en/latexdiff.html</id><content type="html">&lt;p&gt;Visualize the differences between two Latex&amp;nbsp;files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff&lt;span class="w"&gt; &lt;/span&gt;old.tex&lt;span class="w"&gt; &lt;/span&gt;new.tex&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;diff.tex
pdflatex&lt;span class="w"&gt; &lt;/span&gt;diff.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And if one is using git anyway, there is an even simpler way to compare
a given commit with the current&amp;nbsp;state.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexdiff-vc&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;96deadbeef&lt;span class="w"&gt; &lt;/span&gt;filename.tex&lt;span class="w"&gt; &lt;/span&gt;--pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>reverse ssh</title><link href="https://blog.schawe.me/reverse-ssh.html" rel="alternate"></link><published>2017-12-11T15:35:00+01:00</published><updated>2017-12-11T15:35:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-11:/reverse-ssh.html</id><summary type="html">&lt;p&gt;Führe auf dem Computer &lt;code&gt;target&lt;/code&gt;, der hinter einer Firewall steht und dennoch
per &lt;span class="caps"&gt;SSH&lt;/span&gt; erreichbar sein soll folgendes&amp;nbsp;aus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; muss erreichbar sein und in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
folgende Option aktiviert&amp;nbsp;haben&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jetzt kann …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Führe auf dem Computer &lt;code&gt;target&lt;/code&gt;, der hinter einer Firewall steht und dennoch
per &lt;span class="caps"&gt;SSH&lt;/span&gt; erreichbar sein soll folgendes&amp;nbsp;aus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; muss erreichbar sein und in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;
folgende Option aktiviert&amp;nbsp;haben&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jetzt kann man von beliebigen Clients auf den Computer &lt;code&gt;target&lt;/code&gt; zugreifen&amp;nbsp;per&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So kann man beispielsweise auch &lt;code&gt;sshfs&lt;/code&gt; nutzen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sshfs&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server:folder&lt;span class="w"&gt; &lt;/span&gt;~/sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>reverse ssh</title><link href="https://blog.schawe.me/en/reverse-ssh.html" rel="alternate"></link><published>2017-12-11T15:35:00+01:00</published><updated>2017-12-11T15:35:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-11:/en/reverse-ssh.html</id><summary type="html">&lt;p&gt;On the computer &lt;code&gt;target&lt;/code&gt; behind a firewall, in which you want to login in the
future,&amp;nbsp;do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; need to be reachable and needs to have the following option
set in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;On the computer &lt;code&gt;target&lt;/code&gt; behind a firewall, in which you want to login in the
future,&amp;nbsp;do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:19999:localhost:22&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; need to be reachable and needs to have the following option
set in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GatewayPorts yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now any client can reach &lt;code&gt;target&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can also used for, e.g., &lt;code&gt;sshfs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sshfs&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;user@server:folder&lt;span class="w"&gt; &lt;/span&gt;~/sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Pebble Rules</title><link href="https://blog.schawe.me/pebble-rules.html" rel="alternate"></link><published>2017-12-10T15:57:00+01:00</published><updated>2017-12-10T15:57:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-10:/pebble-rules.html</id><summary type="html">&lt;p&gt;Im letzten Monat habe ich jemanden getroffen, auf dessen &lt;a href="http://clisby.net/projects/pebble_app/"&gt;Armbanduhr eine &lt;span class="caps"&gt;MCMC&lt;/span&gt; Simulation von Hamilton-Pfaden&lt;/a&gt;
auf einem quadratischen Gitter liefen. Ich war derartig begeistert, dass ich
beschlossen habe auch etwas auf meiner Pebble simulieren zu lassen. Aufgrund
der geringen Auflösung des Displays (&lt;span class="math"&gt;\(144 \times 168\)&lt;/span&gt;) bieten sich &amp;#8220;blockige&amp;#8221;
Visualisierungen an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Im letzten Monat habe ich jemanden getroffen, auf dessen &lt;a href="http://clisby.net/projects/pebble_app/"&gt;Armbanduhr eine &lt;span class="caps"&gt;MCMC&lt;/span&gt; Simulation von Hamilton-Pfaden&lt;/a&gt;
auf einem quadratischen Gitter liefen. Ich war derartig begeistert, dass ich
beschlossen habe auch etwas auf meiner Pebble simulieren zu lassen. Aufgrund
der geringen Auflösung des Displays (&lt;span class="math"&gt;\(144 \times 168\)&lt;/span&gt;) bieten sich &amp;#8220;blockige&amp;#8221;
Visualisierungen an. Glücklicherweise habe ich schon genügend Spielereien
geschrieben, die sich eignen
[&lt;a href="https://blog.schawe.me/labyrinthartiger-zellularer-automat.html"&gt;1&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html"&gt;2&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/rule-90.html"&gt;3&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;4&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Pebble wurde zwar inzwischen von Fitbit aufgekauft, aber das &lt;span class="caps"&gt;SDK&lt;/span&gt; ist noch
verfügbar. Die neueren Exemplare lassen sich per JavaScript programmieren,
meine &amp;#8220;Kickstarter Edition&amp;#8221; aus der ersten Generation allerdings noch&amp;nbsp;nicht.&lt;/p&gt;
&lt;p&gt;Da ich meine Uhr also in C programmieren muss, konnte ich allerdings den
den alten Code aus &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Wolfram&amp;#8217;s Rules&lt;/a&gt;&amp;nbsp;wiederbenutzen.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/pebble-rules.jpg" width="800" height="1000" class="fixed-size-800"&gt;
&lt;source src="/vid/pebble-rules.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Code ist auf &lt;a href="https://github.com/surt91/pebble-wolfram"&gt;GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Bild"></category><category term="C"></category><category term="Code"></category><category term="GitHub"></category></entry><entry><title>A Fractal A Day</title><link href="https://blog.schawe.me/randomFractals.html" rel="alternate"></link><published>2017-11-29T10:47:00+01:00</published><updated>2017-11-29T10:47:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-11-29:/randomFractals.html</id><summary type="html">&lt;p&gt;Vor einiger Zeit habe ich ein Programm geschrieben, das verschiedene Typen von
Fraktalen generiert. Da viele Methoden Fraktale zu generieren relativ einfach
zu parallelisieren sind und großen Bedarf an Rechenkraft haben, habe ich mich
entschieden es in Rust zu implementieren. Bei Interesse kann das
&lt;a href="https://github.com/surt91/AFractalADay"&gt;Programm von Github bezogen&lt;/a&gt;&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor einiger Zeit habe ich ein Programm geschrieben, das verschiedene Typen von
Fraktalen generiert. Da viele Methoden Fraktale zu generieren relativ einfach
zu parallelisieren sind und großen Bedarf an Rechenkraft haben, habe ich mich
entschieden es in Rust zu implementieren. Bei Interesse kann das
&lt;a href="https://github.com/surt91/AFractalADay"&gt;Programm von Github bezogen&lt;/a&gt;&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da Fraktale nett anzuschauen sind, ist dieser Beitrag voller hochaufgelöster
Bilder. Damit diese Seite dennoch flüssig geladen wird &amp;#8212; auch bei langsamen
Verbindungen, habe ich extra für diesen Eintrag in die
&lt;a href="https://blog.schawe.me/image-preview.html"&gt;Technik dieses Blogs&lt;/a&gt; eingegriffen.
Außerdem gibt es &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt; auf
Twitter, der täglich ein zufälliges Fraktal&amp;nbsp;tweetet.&lt;/p&gt;
&lt;h3&gt;Escape&amp;nbsp;Time&lt;/h3&gt;
&lt;p&gt;Die erste Klasse von Fraktalen, die ich hier zeigen möchte, wird definiert durch
das Konvergenzverhalten des wiederholten Anwendens einer Funktion. Was genau
dieser Satz bedeutet, lässt sich am besten an einem Beispiel&amp;nbsp;erklären.&lt;/p&gt;
&lt;h4&gt;Mandelbrot-Menge&lt;/h4&gt;
&lt;p&gt;Das vermutlich bekannteste Fraktal ist das Apfelmännchen, das die
Mandelbrotmenge visualisiert. Das ist die Menge der komplexen Zahlen
&lt;span class="math"&gt;\(c = x + iy,\)&lt;/span&gt; die nicht konvergieren, wenn die Funktion &lt;span class="math"&gt;\(f_c(z) = z^2 + c\)&lt;/span&gt;
wiederholt angewendet wird. Also wenn die&amp;nbsp;Folge
&lt;/p&gt;
&lt;div class="math"&gt;$$f_c(0), f_c(f_c(0)), f_c(f_c(f_c(0))), ...$$&lt;/div&gt;
&lt;p&gt;
gegen einen endlichen Wert&amp;nbsp;strebt.&lt;/p&gt;
&lt;p&gt;Wenn man jeden Punkt &lt;span class="math"&gt;\(c\)&lt;/span&gt; auf der komplexen Ebene entsprechend des Konvergenzverhaltens
bezüglich dieser Folge einfärbt &amp;#8212; schwarz wenn es konvergiert, blau für langsame
Divergenz, rot für schnelle Divergenz &amp;#8212; erhält man ein solches&amp;nbsp;Bild:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/mandelbrot.png"&gt;&lt;img alt="Zoom auf das Apfelmännchen" src="/img/mandelbrot1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dies ist ein Zoom auf den Rand des Apfelmännchens. Tatsächlich ist die
Mandelbrotmenge kein Fraktal im eigentlichen Sinne, da seine fraktale Dimension
2 ist &amp;#8212; der schwarze Bereich füllt eine&amp;nbsp;Fläche.&lt;/p&gt;
&lt;p&gt;Es einfach möglich dieses Fraktal zu rastern und dabei jeden Pixel parallel zu
berechnen. Eine naive Implementierung könnte wie folgt&amp;nbsp;aussehen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// convenient iterators&lt;/span&gt;
&lt;span class="cp"&gt;#[macro_use]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;::&lt;span class="n"&gt;Itertools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// parallelism&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rayon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rayon&lt;/span&gt;::&lt;span class="n"&gt;prelude&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// complex numbers&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;::&lt;span class="n"&gt;complex&lt;/span&gt;::&lt;span class="n"&gt;Complex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;raster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;: &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// generate the points, we want to raster&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iproduct&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// start a parallel iterator on the points ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;par_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// ... mapping every point ...&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;map_to_cplx_plane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// ... to the number of iterations needed to diverge&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;time_to_diverge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;map_to_cplx_plane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// TODO: here we need to get the offset and scale somehow&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x_scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y_scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;: &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;: &lt;span class="nc"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;time_to_diverge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;: &lt;span class="nc"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;u64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// threshold is 2^2, since we compare to the square of the norm&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// as soon as the norm is &amp;gt;= 2 it is sure to diverge&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// abort after 1000 iterations&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm_sqr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_count&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Julia-Mengen&lt;/h4&gt;
&lt;p&gt;Nahe verwandt sind die Julia-Mengen. Hier benutzt man die gleiche Funktion &lt;span class="math"&gt;\(f_c\)&lt;/span&gt;,
allerdings färbt man jeden Punkt &lt;span class="math"&gt;\(z\)&lt;/span&gt; entsprechend seines Konvergenzverhaltens
bei einem festen Parameter &lt;span class="math"&gt;\(c\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/julia.png"&gt;&lt;img alt="Ein Julia-Fraktal" src="/img/julia1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tatsächlich ist jede beliebige Funktion &lt;span class="math"&gt;\(f\)&lt;/span&gt; erlaubt und nicht nur die oben erwähnte
quadratische. Mit unkonventioneller Zuordnung von Farben zu Divergenzzeiten
ergibt sich mit &lt;span class="math"&gt;\(f(z) = (-2.6-i) \cosh(z)\)&lt;/span&gt; dieses&amp;nbsp;Bild:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/julia2.png"&gt;&lt;img alt="Ein weiteres Julia-Fraktal" src="/img/julia2_1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Newton-Fraktal&lt;/h4&gt;
&lt;p&gt;Das &lt;a href="https://de.wikipedia.org/wiki/Newton-Verfahren"&gt;Newton-Verfahren zur Findung von Nullstellen&lt;/a&gt;
startet an einem beliebigen Punkt auf einer Kurve, und berechnet die Nullstelle
der Tangente an diesem Punkt. Mit der Tangente dieses Punktes wird genauso
verfahren. Dabei sollten sich die so erhaltenen Punkte immer dichter einer
Nullstelle nähern. Bei einer komplexen Funktion können wir dies für jeden
Startpunkt iterieren. Jeder Punkt wird gegen eine Nullstelle konvergieren, der
wir eine Farbe zuordnen und den Punkt mit dieser Farbe einfärben. Wenn wir die
Sättigung davon abhängig machen, wie schnell die Konvergenz ist, sieht das
Ergebnis für &lt;span class="math"&gt;\(f(x) = z^4 + 5^{z+i} + 15\)&lt;/span&gt; so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/newton.png"&gt;&lt;img alt="Newton Fraktal für f(x) = z^4 + 5^{z+i} + 15" src="/img/newton1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chaos&amp;nbsp;Game&lt;/h3&gt;
&lt;p&gt;Eine große Klasse von Fraktalen lässt sich mit dem Chaos Game erzeugen. Man
benutzt dazu mindestens zwei Abbildungen &lt;span class="math"&gt;\(f_1(z)\)&lt;/span&gt; und &lt;span class="math"&gt;\(f_2(z)\)&lt;/span&gt;, die jeweils einen
Punkt &lt;span class="math"&gt;\(z\)&lt;/span&gt; auf einen anderen Punkt abbilden. Man wählt einen Punkt zum Starten,
bildet ihn mit einer Zufälligen der beiden Abbildungen ab, zeichnet den
resultierenden Punkt ein und wiederholt dies sehr&amp;nbsp;oft.&lt;/p&gt;
&lt;p&gt;Dieser Algorithmus ist inherent sequenziell, allerdings kann man parallel an
vielen verschiedenen Punkten starten und die Ergebnisse dieser unabhängigen
Markovketten in einem Bild&amp;nbsp;zusammenführen.&lt;/p&gt;
&lt;p&gt;In Rust könnte der entsprechende Codeschnipsel so&amp;nbsp;aussehen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_cpus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;sync&lt;/span&gt;::&lt;span class="n"&gt;mpsc&lt;/span&gt;::&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_cpus&lt;/span&gt;::&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// create a transmitter, receiver pair&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// clone a transmitter for each thread&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// generator yielding the points from the chaos game&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// using a random seed&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sampler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_sampler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// we need some histogram implementation&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Histogram&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;::&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// feed the samples into the histogram&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations_per_task&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// send the finished histogram to the receiver&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// collect all parallel computed histograms into main_hist&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main_hist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Histogram&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;main_hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Sierpinski-Dreieck und&amp;nbsp;Barnsley-Farn&lt;/h4&gt;
&lt;p&gt;Mit dieser Methode kann man alte Bekannte wie das &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Sierpinski-Dreieck&lt;/a&gt;&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/sierpinski.png"&gt;&lt;img alt="Sierpinski-Dreieck" src="/img/sierpinski.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dazu benötigt man die drei affinen Transformationen, die man alle mit gleicher
Wahrscheinlichkeit&amp;nbsp;auswählt:
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}
f_1(\vec z) &amp;amp;=\begin{pmatrix}
            -1/4         &amp;amp; \sqrt 3 / 4 \\
            -\sqrt 3 / 4 &amp;amp; -1/4
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                -1/4\\
                \sqrt 3 / 4
        \end{pmatrix}\\
f_2(\vec z) &amp;amp;=\begin{pmatrix}
            1/2 &amp;amp; 0 \\
            0   &amp;amp; 1/2
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                1/4\\
                \sqrt 3 / 4
        \end{pmatrix}\\
f_3(\vec z) &amp;amp;=\begin{pmatrix}
            -1/4 &amp;amp; -\sqrt 3 / 4 \\
            \sqrt 3 / 4   &amp;amp; 1/4
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                1\\
                0
        \end{pmatrix}
\end{align}$$&lt;/div&gt;
&lt;p&gt;Ein anderes berühmtes Beispiel ist der Barnsley-Farn. Um ihn zu erzeugen, benutzt
man die folgenden vier affinen Abbildungen, die man mit den&amp;nbsp;Wahrscheinlichkeiten
&lt;/p&gt;
&lt;div class="math"&gt;$$p_1 = 0.01, p_2 = 0.85, p_3 = 0.07, p_4 = 0.07$$&lt;/div&gt;
&lt;p&gt;
verwendet:
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}
f_1(z) &amp;amp;=\begin{pmatrix}
                0.16\\
                0
        \end{pmatrix}\\
f_2(z) &amp;amp;=\begin{pmatrix}
            0.85 &amp;amp; 0.04 \\
            0    &amp;amp; -0.04
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.85\\
                1.6
        \end{pmatrix}\\
f_3(z) &amp;amp;=\begin{pmatrix}
            0.2 &amp;amp; -0.26 \\
            0   &amp;amp; 0.23
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.22\\
                1.6
        \end{pmatrix}\\
f_4(z) &amp;amp;=\begin{pmatrix}
            -0.15 &amp;amp; 0.28 \\
            0     &amp;amp; 0.26
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.24\\
                0.44
        \end{pmatrix}\\
\end{align}$$&lt;/div&gt;
&lt;p&gt;Als Ergebnis erhält man diesen&amp;nbsp;Farn.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/fern.png"&gt;&lt;img alt="Bernsley-Farn" src="/img/fern.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Fractal&amp;nbsp;Flame&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://flam3.com/flame_draves.pdf"&gt;Fractal Flame&lt;/a&gt; ist der Name einer Klasse
von Zufallsfraktalen, die nach dem gleichen Muster wie oben aus einer Reihe
affiner Transformationen &lt;span class="math"&gt;\(A_i\)&lt;/span&gt; bestehen. Zusätzlich können die affinen
Transformationen mit einer nichtlinearen &lt;em&gt;Variation&lt;/em&gt; &lt;span class="math"&gt;\(V_j\)&lt;/span&gt; erweitert werden,
sodass &lt;span class="math"&gt;\(f_i(\vec z) = V_j(A_i(\vec z))\)&lt;/span&gt; (oder Linearkombinationen dieser Variationen).
Zur Visualisierung werden die Punkte nicht direkt gezeichnet, sondern in ein
Histogramm eingetragen, aus dem die Farbintensitäten typischerweise
logarithmisch berechnet&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/horseshoe.png"&gt;&lt;img alt="Fractal Flame, 'Horseshoe' Variation" src="/img/horseshoe1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hier wird jedem &lt;span class="math"&gt;\(f_i\)&lt;/span&gt; ein Farbton zugeordnet. Die Farbe eines Punktes ist eine
Mischung dieser Farben, die widerspiegelt, wie oft eine Abbildung genutzt wurde,
um an diesen Punkt zu&amp;nbsp;gelangen.&lt;/p&gt;
&lt;p&gt;Interessanterweise sind diese Systeme anscheinend sehr anfällig für schlechte
Zufallszahlen, was sich in &amp;#8220;Löchern&amp;#8221; in den ansonsten glatten Flächen bemerkbar&amp;nbsp;macht.&lt;/p&gt;
&lt;h4&gt;Möbius&amp;nbsp;Flame&lt;/h4&gt;
&lt;p&gt;Diese Fraktale sind nahezu identisch zu den Fractal Flames, nur dass anstatt von
affinen Transformationen Möbius Transformationen auf der komplexen Ebene genutzt&amp;nbsp;werden.&lt;/p&gt;
&lt;div class="math"&gt;$$f_i(z) = \frac{a_i z + b_i}{c_i z + d_i}$$&lt;/div&gt;
&lt;p&gt;&lt;a href="/img/mobius.png"&gt;&lt;img alt="Möbius Flame" src="/img/mobius1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Wie findet man &amp;#8220;gute&amp;#8221;&amp;nbsp;Parameter?&lt;/h4&gt;
&lt;p&gt;Offenbar hat dieser Typ von Fraktal sehr viele freie Parameter. Um hübsche
Resultate zu generieren, müssen sie angepasst werden. Tatsächlich gibt es mit
&lt;a href="https://electricsheep.org/"&gt;electric sheep&lt;/a&gt; (ich hoffe stark, dass es eine
&lt;a href="https://de.wikipedia.org/wiki/Tr%C3%A4umen_Androiden_von_elektrischen_Schafen%3F"&gt;Blade Runner&lt;/a&gt;
Referenz ist) ein Crowdsourcing-Projekt,
das mithilfe von evolutionären Algorithmen und dem Feedback von Menschen
besonders ansehnliche Fraktale&amp;nbsp;erzeugt.&lt;/p&gt;
&lt;p&gt;Für mein Programm habe ich eine simplere Methode genutzt. Damit man ein Fraktal
gut sehen kann, sollte seine fraktale Dimension größer als 1 sein. Abschätzbar
ist es relativ einfach über die &lt;a href="https://en.wikipedia.org/wiki/Correlation_dimension"&gt;Korrelations-Dimension&lt;/a&gt;.
Dazu misst man die paarweisen Abstände von Punkten und misst den Exponenten ihrer
kumulativen&amp;nbsp;Verteilungsfunktion.&lt;/p&gt;
&lt;p&gt;Kombiniert mit einigen Heuristiken, die zu langgestreckte Fraktale verhindert,
sind die Ergebnisse meist&amp;nbsp;ansprechend&lt;/p&gt;
&lt;h3&gt;Weitere&amp;nbsp;Fraktale&lt;/h3&gt;
&lt;p&gt;Es gibt natürlich viel mehr Typen von Fraktalen. Auch wenn &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;
sie bisher nicht zeichnen kann, habe ich einige Bilder angefertigt, die ich
hier auch gerne zeigen&amp;nbsp;möchte.&lt;/p&gt;
&lt;h4&gt;Diffusionsbegrenztes&amp;nbsp;Wachstum&lt;/h4&gt;
&lt;p&gt;Diffusionsbegrenztes Wachstum bildet das Wachstum von Kristallen in stark
verdünnten Lösungen ab. Man startet mit einem Seed und lässt dann einzelne
Teilchen diffundieren, bis sie auf dem Nachbarfeld eines Seeds landen, wo sie
dann bleiben und Teil des Seeds werden. Dieser Prozess bildet verästelte
Strukturen&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/dla_core.png"&gt;&lt;img alt="Diffusionsbegrenztes Wachstum" src="/img/dla_core1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Random&amp;nbsp;Walks&lt;/h4&gt;
&lt;p&gt;Einige Arten von Random Walks haben eine fraktale Dimension zwischen 1 und 2,
was sie zu ansehnlichen Fraktalen machen sollte. Der Smart Kinetic Self
Avoiding Walk, der in meinem &lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake&lt;/a&gt; die Strategie des
Autopiloten ist, hat eine fraktale Dimension von &lt;span class="math"&gt;\(\frac{7}{4}\)&lt;/span&gt;. 100000 Schritte
sehen so&amp;nbsp;aus:&lt;/p&gt;
&lt;p&gt;&lt;a class="invertable" href="/img/sksaw.png"&gt;&lt;img alt="Smart Kinetic Self Avoiding Walk, 100000 Schritte" src="/img/sksaw1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Code"></category><category term="Chaos"></category><category term="Formel"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>Platzhalterbilder</title><link href="https://blog.schawe.me/image-preview.html" rel="alternate"></link><published>2017-11-29T10:21:00+01:00</published><updated>2017-11-29T10:21:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-11-29:/image-preview.html</id><summary type="html">&lt;p&gt;Große Bilder können die Ladezeit von Webseiten dramatisch verschlechtern.
Schlimmer als weiße Flächen ist das sprungartige Verschieben des Textes, wenn
weiter oben gerade ein Bild fertig geladen wurde. Allerdings müssen Bilder bei
immer weiter steigenden Pixeldichten der Anzeigegeräte auch immer
hochaufgelöster werden und gleichzeitig über langsame 3G-Verbindungen
geladen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Große Bilder können die Ladezeit von Webseiten dramatisch verschlechtern.
Schlimmer als weiße Flächen ist das sprungartige Verschieben des Textes, wenn
weiter oben gerade ein Bild fertig geladen wurde. Allerdings müssen Bilder bei
immer weiter steigenden Pixeldichten der Anzeigegeräte auch immer
hochaufgelöster werden und gleichzeitig über langsame 3G-Verbindungen
geladen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da der &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;Eintrag über Fraktale&lt;/a&gt; einige recht große
Bilder enthält, habe ich ein Pelican-Plugin geschrieben,&amp;nbsp;das&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vorschau-.jpg erzeugt, die in der Regel kleiner als 1 kB&amp;nbsp;sind,&lt;/li&gt;
&lt;li&gt;jedes Bild durch die data-uri des Previews ersetzt und dies verschwommen anzeigt, bis das Originalbild per JavaScript nachgeladen&amp;nbsp;ist.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Das sieht dann etwa so&amp;nbsp;aus:&lt;/p&gt;
&lt;video controls width="800" height="460"&gt;
&lt;source src="/vid/image_preview.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Glücklicherweise ist es recht einfach mit Python html zu parsen und data-uri
zu erzeugen, sodass mein Plugin im Wesentlichen fertig generiertes html nimmt
und folgendes&amp;nbsp;tut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_thumbnail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;b64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data:image/jpeg;base64,&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b64&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# TODO: replace img source by the data-uri&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nachdem alles vorbereitet ist, ist die clientseitige Logik mit ein paar Zeilen
&lt;a href="https://github.com/surt91/purepelican/blob/1e1371d644de4b3af733e78bebe4869bc9121681/static/js/img.js"&gt;JavaScript&lt;/a&gt;
und &lt;a href="https://github.com/surt91/purepelican/blob/1e1371d644de4b3af733e78bebe4869bc9121681/static/sass/_images.scss"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/a&gt;
recht&amp;nbsp;simpel.&lt;/p&gt;
&lt;p&gt;Die Idee ist, dynamisch die voll aufgelösten Bilder per JavaScript zu laden und
mit dem &lt;code&gt;onLoad&lt;/code&gt; Event sichtbar zu&amp;nbsp;machen.&lt;/p&gt;</content><category term="Meta"></category><category term="Bild"></category><category term="JavaScript"></category><category term="Python"></category></entry><entry><title>jsnake</title><link href="https://blog.schawe.me/jsnake.html" rel="alternate"></link><published>2017-11-02T17:30:00+01:00</published><updated>2017-11-02T17:30:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-11-02:/jsnake.html</id><summary type="html">&lt;p&gt;Bisher habe ich immer nur kurze Fragmente in JavaScript geschrieben, die
meist nur Gimmicks bezweckten oder Bibliotheken aufrufen. JavaScript ist im
Moment möglicherweise die wichtigste Sprache: Schließlich ist sämtlicher
clientseitiger Code des Webs JavaScript &amp;#8212; und dank Node wohl auch nennenswerte
Teile des Servercodes. Zumindest macht man nichts falsch, wenn man …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bisher habe ich immer nur kurze Fragmente in JavaScript geschrieben, die
meist nur Gimmicks bezweckten oder Bibliotheken aufrufen. JavaScript ist im
Moment möglicherweise die wichtigste Sprache: Schließlich ist sämtlicher
clientseitiger Code des Webs JavaScript &amp;#8212; und dank Node wohl auch nennenswerte
Teile des Servercodes. Zumindest macht man nichts falsch, wenn man sich etwas
mit JavaScript vertraut macht.
Deshalb ist das neuste &amp;#8212; und simpelste &amp;#8212; Mitglied meiner Snake Sammlung
[&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;]
in JavaScript&amp;nbsp;gehalten.&lt;/p&gt;
&lt;p&gt;Ausprobieren kann man es gleich&amp;nbsp;hier:&lt;/p&gt;
&lt;canvas id="jsnake" class="fixed-size-400 center"&gt;&lt;/canvas&gt;
&lt;script async src="/js/jsnake/jsnake.js"&gt;&lt;/script&gt;

&lt;p&gt;In der Spielwelt herrschen helikale Randbedingungen, hauptsächlich weil es etwas
anderes ist als gewöhnliche periodische Ränder. Außerdem hat es den Vorteil,
dass man keinen Pause-Modus braucht, weil diese Randbedingungen dafür sorgen,
dass die Schlange sich nicht beißt, wenn man sie einfach geradeaus laufen&amp;nbsp;lässt.&lt;/p&gt;
&lt;p&gt;Ich habe gehört, dass JavaScript sich in den letzten Jahren stark
weiterentwickelt hat. Tatsächlich scheint mir
diese Sprache einige interessante Sprachelemente erhalten zu haben, wie &lt;em&gt;arrow
functions&lt;/em&gt; &lt;code&gt;x =&amp;gt; x*x&lt;/code&gt; für lambdas oder den &lt;em&gt;spread operator&lt;/em&gt; &lt;code&gt;...&lt;/code&gt; den ich am
ehesten mit Pythons &lt;em&gt;splat&lt;/em&gt; &lt;code&gt;*&lt;/code&gt; vergleichen möchte.
Ich will nicht behaupten, dass das folgende kartesische Produkt der beste Code
oder leserlich wäre, aber interessant&amp;nbsp;allemal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SIZE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anscheinend gibt es mit der nächsten geplanten Version (&lt;span class="caps"&gt;ES6&lt;/span&gt;) noch mehr nette
Sprachelemente. Unter anderem &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"&gt;Module&lt;/a&gt;.
Ich bin geradezu sprachlos, dass man bisher keine Sprachunterstützung für
die Verteilung des Quellcodes über mehrere Dateien hatte. Anscheinend bin ich
noch zu sehr von den Konzepten der &amp;#8220;C-artigen&amp;#8221; Sprachen&amp;nbsp;beeinflusst.&lt;/p&gt;
&lt;p&gt;Da &lt;code&gt;jsnake&lt;/code&gt; nur ein paar Zeilen in einer Datei sind und sich ein ganzes GitHub
Repository deshalb nicht lohnt, habe ich es in einen &lt;a href="https://gist.github.com/surt91/42eb076974e325433b66a5077d4623eb"&gt;Gist&lt;/a&gt;&amp;nbsp;hochgeladen.&lt;/p&gt;</content><category term="Code"></category><category term="JavaScript"></category><category term="Game"></category><category term="Snake"></category></entry><entry><title>png2gif</title><link href="https://blog.schawe.me/png2gif.html" rel="alternate"></link><published>2017-10-31T11:46:00+01:00</published><updated>2017-10-31T11:46:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-10-31:/png2gif.html</id><content type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein animiertes &lt;code&gt;.gif&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.png&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Natürlich klappt das nicht nur für &lt;code&gt;.png&lt;/code&gt; und alle anderen Optionen von
Imagemagick lassen sich&amp;nbsp;kombinieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-resize&lt;span class="w"&gt; &lt;/span&gt;256x256&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.svg&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2gif</title><link href="https://blog.schawe.me/en/png2gif.html" rel="alternate"></link><published>2017-10-31T11:46:00+01:00</published><updated>2017-10-31T11:46:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-10-31:/en/png2gif.html</id><content type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; into an animated &lt;code&gt;.gif&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.png&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Naturally, this works not olny for &lt;code&gt;.png&lt;/code&gt; and all other options of
Imagemagick can be used as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-resize&lt;span class="w"&gt; &lt;/span&gt;256x256&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-layers&lt;span class="w"&gt; &lt;/span&gt;Optimize&lt;span class="w"&gt; &lt;/span&gt;*.svg&lt;span class="w"&gt; &lt;/span&gt;out.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>rsnake</title><link href="https://blog.schawe.me/rsnake.html" rel="alternate"></link><published>2017-09-06T17:40:00+02:00</published><updated>2017-09-06T17:40:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-09-06:/rsnake.html</id><summary type="html">&lt;p&gt;In meinem letzten Einträgen ist bereits angeklungen, dass ich Rust mag. Und wie
die Erfahrung [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;]
zeigt, dauert es nie lange bis ich eine Snake-Abwandlung&amp;nbsp;programmiere.&lt;/p&gt;
&lt;p&gt;Dieses Mal verfolgt der Autopilot die Strategie des &lt;a href="https://doi.org/10.1103/PhysRevB.31.2993"&gt;smart kinetic walk&lt;/a&gt;,
(ein Model aus der statistischen Physik zur Simulation von Polymeren,)
um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In meinem letzten Einträgen ist bereits angeklungen, dass ich Rust mag. Und wie
die Erfahrung [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;]
zeigt, dauert es nie lange bis ich eine Snake-Abwandlung&amp;nbsp;programmiere.&lt;/p&gt;
&lt;p&gt;Dieses Mal verfolgt der Autopilot die Strategie des &lt;a href="https://doi.org/10.1103/PhysRevB.31.2993"&gt;smart kinetic walk&lt;/a&gt;,
(ein Model aus der statistischen Physik zur Simulation von Polymeren,)
um sich nicht selbst zu beißen &amp;#8212; leider setzt diese Strategie ein unendlich
großes Spielfeld&amp;nbsp;voraus.&lt;/p&gt;
&lt;p&gt;Die grundlegende Idee ist, dass die Schlange immer wenn sie sich selbst begegnet
prüft welcher nächste Schritt sie in einer Schlaufe fängt und welcher nach außen
führt. Mit offenen Randbedingungen, also auf einem unendlich großen Feld lässt
sich dass das in konstanter Zeit erledigen, wenn die Schlange an jedem Segment
ihres Körpers die Anzahl der Rechts- und Linksdrehungen speichert. Bei
periodischen Randbedingungen funktioniert das allerdings nicht mehr, sodass der
Autopilot eine Best-First-Search durchführt. Auf offenen Randbedingungen würde
es ausreichen einen Weg vom potentiell nächstem Schritt zu einem beliebigen
Punkt außerhalb eines Rechtecks, das die Schlange einschließt, zu finden.
Bei periodischen Randbedingungen ist es nicht so eindeutig. Ich habe mich
entschlossen, dass die Schlange sich nur so bewegen soll, dass immer ein Pfad
zu ihrem Schwanz existiert. Tatsächlich führt diese Strategie zu unterhaltsamen
und nicht perfekten&amp;nbsp;Spielverläufen.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/rsnake.png" width="400" height="400" class="fixed-size-400"&gt;
&lt;source src="/vid/rsnake.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Vollständigkeit halber sind noch ein nicht vorausplanender und ein
perfekter, aber langweiliger, Autopilot&amp;nbsp;dabei.&lt;/p&gt;
&lt;p&gt;Da die Quellen auf &lt;a href="https://github.com/surt91/rsnake"&gt;GitHub&lt;/a&gt; liegen, ist
es nur vier Zeilen entfernt &amp;#8212; weniger, wenn der Rustcompiler bereits installiert&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# curl https://sh.rustup.rs -sSf | sh  # never copy `| sh` in your terminal&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/surt91/rsnake
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rsnake
&lt;span class="w"&gt;    &lt;/span&gt;cargo&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Progressive Web App</title><link href="https://blog.schawe.me/progressive-web-app.html" rel="alternate"></link><published>2017-09-01T18:15:00+02:00</published><updated>2017-09-01T18:15:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-09-01:/progressive-web-app.html</id><summary type="html">&lt;p&gt;Seit Anfang September ist dieses Blog eine &lt;em&gt;Progressive Web App&lt;/em&gt;. Das bedeutet,
dass dieses Blog nun auch offline funktioniert und man es auf dem Smartphone
als App hinzufügen&amp;nbsp;kann.&lt;/p&gt;
&lt;h3&gt;Warum? &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;&lt;img alt="Lighthouse" class="icon" src="/img/lighthouse.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nun, Chrome bietet mit &lt;em&gt;Lighthouse&lt;/em&gt; Ratschläge, wie man seine Website verbessern
kann. Einer der vier Unterpunkte heißt &lt;em&gt;Progressive Web App …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seit Anfang September ist dieses Blog eine &lt;em&gt;Progressive Web App&lt;/em&gt;. Das bedeutet,
dass dieses Blog nun auch offline funktioniert und man es auf dem Smartphone
als App hinzufügen&amp;nbsp;kann.&lt;/p&gt;
&lt;h3&gt;Warum? &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;&lt;img alt="Lighthouse" class="icon" src="/img/lighthouse.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nun, Chrome bietet mit &lt;em&gt;Lighthouse&lt;/em&gt; Ratschläge, wie man seine Website verbessern
kann. Einer der vier Unterpunkte heißt &lt;em&gt;Progressive Web App&lt;/em&gt; und war frustrierend
schlecht bewertet. Die folgenden Schritte habe ich also nur für Lighthouse
gemacht und es hat sich auf jeden Fall&amp;nbsp;gelohnt:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lighthouse-Audit Ergebnisse" src="/img/lighthouse_audit.png"&gt;&lt;/p&gt;
&lt;h3&gt;Wie?&lt;/h3&gt;
&lt;p&gt;Lighthouse bietet eine Checkliste, auf der neben einigen Punkten, die
generell eine gute Idee sind, drei Punkte aufgeführt sind, die erfüllt sein&amp;nbsp;müssen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Site is served over &lt;span class="caps"&gt;HTTPS&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Dank &lt;em&gt;Let&amp;#8217;s Encrypt&lt;/em&gt; ist das kein Problem&amp;nbsp;mehr.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The start &lt;span class="caps"&gt;URL&lt;/span&gt; (at least) loads while offline&lt;ul&gt;
&lt;li&gt;Das ist der aufwendigste Teil. Um dies zu erreichen muss man einen
&lt;em&gt;service worker&lt;/em&gt; registrieren. Damit der &lt;em&gt;service worker&lt;/em&gt; weiß, welche
Dateien notwendig sind, benutze ich nach jedem erfolgreichen Build
&lt;a href="https://github.com/GoogleChrome/sw-precache"&gt;sw-precache&lt;/a&gt; mit einer
&lt;a href="https://github.com/surt91/blog/blob/1d29d7bd848e31bfa4dc3f57bd140e92cbdf6de5/sw-config.js"&gt;sehr einfachen Konfiguration&lt;/a&gt;.
Dadurch benötige ich jetzt Node, um das Blog zu erstellen &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metadata provided for Add to Home screen&lt;ul&gt;
&lt;li&gt;Damit ist eine &lt;code&gt;manifest.json&lt;/code&gt; gemeint. Diese Datei enthält links zu Icons,
die als Appsymbol benutzt werden, wenn man die Seite auf Android oder Windows
installiert. Und es legt die Farbe der Adressleiste im mobilen Chrome fest.
Ein nützlicher Dienst, um ein solches Manifest zu erstellen, ist
&lt;a href="https://app-manifest.firebaseapp.com/"&gt;app-manifest.firebaseapp.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Was&amp;nbsp;jetzt?&lt;/h2&gt;
&lt;p&gt;Service Worker ermöglichen Benachrichtigungen von einer Website. Ein natürlicher
nächster Schritt wäre es also Benachrichtigungen zu versenden, wenn ein neuer
Post online ist. Auf der anderen Seite bin ich selbst immer etwas genervt von
Websites, die mich benachrichtigen wollen und der Lighthouse Punktestand ist
schon optimal, also wird das wohl nicht&amp;nbsp;passieren.&lt;/p&gt;</content><category term="Meta"></category><category term="JavaScript"></category></entry><entry><title>Push to Publish 2</title><link href="https://blog.schawe.me/push-to-publish-b.html" rel="alternate"></link><published>2017-08-27T13:36:00+02:00</published><updated>2017-08-27T13:36:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-08-27:/push-to-publish-b.html</id><summary type="html">&lt;p&gt;Nachdem ich vor Kurzem einen &lt;a href="https://blog.schawe.me/push-to-publish.html"&gt;euphorischen Eintrag&lt;/a&gt;
über mein automatisiertes Update dieses Blogs via Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; und GitHub pages
geschrieben habe, bin ich jetzt auf eine einfachere Lösung&amp;nbsp;gestoßen.&lt;/p&gt;
&lt;h3&gt;Alles unter einem Dach bei Netlify &lt;a href="https://www.netlify.com/"&gt;&lt;img alt="Netlify Logo" class="icon" src="/img/netlify.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Es gibt einen einfachen Buildservice, der zwar nicht so flexibel ist wie
Travis-&lt;span class="caps"&gt;CI&lt;/span&gt;, aber …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nachdem ich vor Kurzem einen &lt;a href="https://blog.schawe.me/push-to-publish.html"&gt;euphorischen Eintrag&lt;/a&gt;
über mein automatisiertes Update dieses Blogs via Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; und GitHub pages
geschrieben habe, bin ich jetzt auf eine einfachere Lösung&amp;nbsp;gestoßen.&lt;/p&gt;
&lt;h3&gt;Alles unter einem Dach bei Netlify &lt;a href="https://www.netlify.com/"&gt;&lt;img alt="Netlify Logo" class="icon" src="/img/netlify.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Es gibt einen einfachen Buildservice, der zwar nicht so flexibel ist wie
Travis-&lt;span class="caps"&gt;CI&lt;/span&gt;, aber für dieses Blog ausreicht. Netlify baut die Seite also bei
jedem Push in ein beobachtetes GitHub Repository. Nach Konfiguration des &lt;span class="caps"&gt;DNS&lt;/span&gt;
und einem weiteren Knopfdruck ist die Seite mit einem &lt;span class="caps"&gt;SSL&lt;/span&gt; Zertifikat von
&lt;em&gt;Let&amp;#8217;s Encrypt&lt;/em&gt; ausgestattet und erreichbar.
Also Bonus kann man selbst &lt;span class="caps"&gt;HTTP&lt;/span&gt;-Header bestimmen über eine &lt;code&gt;_headers&lt;/code&gt; Datei:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Strict&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transport&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Security&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31536000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;includeSubDomains&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also kann man &lt;span class="caps"&gt;HTTP&lt;/span&gt;/2 Server Push ausprobieren, ohne einen Server betreiben zu&amp;nbsp;müssen.&lt;/p&gt;</content><category term="Meta"></category><category term="Hosting"></category></entry><entry><title>png2vp9</title><link href="https://blog.schawe.me/png2vp9.html" rel="alternate"></link><published>2017-08-26T11:05:00+02:00</published><updated>2017-08-26T11:05:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-08-26:/png2vp9.html</id><summary type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein zur Web-Wiedergabe geeignetes
&lt;code&gt;VP9&lt;/code&gt;, das von allen &lt;a href="http://caniuse.com/webm/embed"&gt;wichtigen Browsern unterstützt&lt;/a&gt;&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Konvertiere einen Ordner voller &lt;code&gt;.png&lt;/code&gt; in ein zur Web-Wiedergabe geeignetes
&lt;code&gt;VP9&lt;/code&gt;, das von allen &lt;a href="http://caniuse.com/webm/embed"&gt;wichtigen Browsern unterstützt&lt;/a&gt;&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;-


ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;libopus&lt;span class="w"&gt; &lt;/span&gt;-b:a&lt;span class="w"&gt; &lt;/span&gt;64k&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;webm&lt;span class="w"&gt; &lt;/span&gt;video.webm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Für maximale Kompatibilität kann als Fallback noch ein &lt;code&gt;MP4&lt;/code&gt; erstellt&amp;nbsp;werden.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-pix_fmt&lt;span class="w"&gt; &lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-profile:v&lt;span class="w"&gt; &lt;/span&gt;baseline&lt;span class="w"&gt; &lt;/span&gt;-level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;video.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Einbettung erfolgt&amp;nbsp;mit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.webm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/webm; codecs=vp9,vorbis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2vp9</title><link href="https://blog.schawe.me/en/png2vp9.html" rel="alternate"></link><published>2017-08-26T11:05:00+02:00</published><updated>2017-08-26T11:05:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-08-26:/en/png2vp9.html</id><summary type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; files into a weboptimized &lt;code&gt;VP9&lt;/code&gt;, which is supported
by all &lt;a href="http://caniuse.com/webm/embed"&gt;important Browsers&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Convert a folder of &lt;code&gt;.png&lt;/code&gt; files into a weboptimized &lt;code&gt;VP9&lt;/code&gt;, which is supported
by all &lt;a href="http://caniuse.com/webm/embed"&gt;important Browsers&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;null&lt;span class="w"&gt; &lt;/span&gt;-


ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:v&lt;span class="w"&gt; &lt;/span&gt;libvpx-vp9&lt;span class="w"&gt; &lt;/span&gt;-pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-b:v&lt;span class="w"&gt; &lt;/span&gt;1000K&lt;span class="w"&gt; &lt;/span&gt;-threads&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-speed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-tile-columns&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-frame-parallel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-auto-alt-ref&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lag-in-frames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-aq-mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-c:a&lt;span class="w"&gt; &lt;/span&gt;libopus&lt;span class="w"&gt; &lt;/span&gt;-b:a&lt;span class="w"&gt; &lt;/span&gt;64k&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;webm&lt;span class="w"&gt; &lt;/span&gt;video.webm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For maximum compatibility create a &lt;code&gt;MP4&lt;/code&gt; as&amp;nbsp;fallback.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-an&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-pix_fmt&lt;span class="w"&gt; &lt;/span&gt;yuv420p&lt;span class="w"&gt; &lt;/span&gt;-profile:v&lt;span class="w"&gt; &lt;/span&gt;baseline&lt;span class="w"&gt; &lt;/span&gt;-level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;video.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Embed&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.webm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/webm; codecs=vp9,vorbis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/video.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Push to Publish</title><link href="https://blog.schawe.me/push-to-publish.html" rel="alternate"></link><published>2017-08-11T17:00:00+02:00</published><updated>2017-08-11T17:00:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-08-11:/push-to-publish.html</id><summary type="html">&lt;p&gt;Seit Anfang August wird dieses Blog nicht mehr
&lt;a href="https://blog.schawe.me/blogumzug.html"&gt;von einem Raspberry aus den eigenen vier Wänden ausgeliefert&lt;/a&gt;,
sondern von GitHub pages. Da die Quellen dieses Blogs bereits &lt;a href="https://github.com/surt91/blog"&gt;auf GitHub&lt;/a&gt;
sind, ist dies ein konsequenter&amp;nbsp;Schritt.&lt;/p&gt;
&lt;h3&gt;Hosting auf GitHub Pages &lt;a href="https://github.com/"&gt;&lt;img alt="GitHub Logo" class="icon" src="/img/octocat.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GitHub bietet hosting von statischen Seiten an, was perfekt zu diesem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seit Anfang August wird dieses Blog nicht mehr
&lt;a href="https://blog.schawe.me/blogumzug.html"&gt;von einem Raspberry aus den eigenen vier Wänden ausgeliefert&lt;/a&gt;,
sondern von GitHub pages. Da die Quellen dieses Blogs bereits &lt;a href="https://github.com/surt91/blog"&gt;auf GitHub&lt;/a&gt;
sind, ist dies ein konsequenter&amp;nbsp;Schritt.&lt;/p&gt;
&lt;h3&gt;Hosting auf GitHub Pages &lt;a href="https://github.com/"&gt;&lt;img alt="GitHub Logo" class="icon" src="/img/octocat.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GitHub bietet hosting von statischen Seiten an, was perfekt zu diesem Pelican
Blog passt. Die Verwaltung ist denkbar einfach: Für jedes Repository ist der
Branch &lt;code&gt;gh-pages&lt;/code&gt; unter &lt;code&gt;[username].github.io/[reponame]&lt;/code&gt;, hier z.B.
&lt;a href="https://surt91.github.io/blog"&gt;surt91.github.io/blog&lt;/a&gt;,&amp;nbsp;erreichbar.&lt;/p&gt;
&lt;p&gt;Will man unter einer eigenen Domain erreichbar sein, reicht es aus, im &lt;span class="caps"&gt;DNS&lt;/span&gt; für die
Domain einen &lt;span class="caps"&gt;CNAME&lt;/span&gt; Eintrag auf &lt;code&gt;[username].github.io&lt;/code&gt; anzulegen und im root des
&lt;code&gt;gh-pages&lt;/code&gt; Branches eine Datei &lt;code&gt;CNAME&lt;/code&gt; mit der eigenen Domain anzulegen, hier&amp;nbsp;z.B.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog.schawe.me&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;CNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Primär dient GitHub pages dazu Jekyll Seiten zu erstellen und auszuliefern, was
zu Konflikten führen kann, wenn man einfach nur statische Seiten im &lt;code&gt;gh-pages&lt;/code&gt;
Branch vorhält. Dies lässt sich einfach vermeiden, indem man eine Datei
&lt;code&gt;.nojekyll&lt;/code&gt; im root&amp;nbsp;anlegt.&lt;/p&gt;
&lt;h3&gt;Automatische Erstellung durch Travis &lt;span class="caps"&gt;CI&lt;/span&gt; &lt;a href="https://travis-ci.org/"&gt;&lt;img alt="Travis CI Logo" class="icon" src="/img/travis.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Natürlich könnte man das statische &lt;span class="caps"&gt;HTML&lt;/span&gt; auf einem lokalen Computer erstellen
und per Hand in den &lt;code&gt;gh-pages&lt;/code&gt; Branch pushen. Aber man kann das auch einem
Dienst wie Travis &lt;a href="https://de.wikipedia.org/wiki/Kontinuierliche_Integration"&gt;&lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;&amp;nbsp;überlassen.&lt;/p&gt;
&lt;p&gt;Die Idee ist, dass jedes Mal wenn man die Quellen seiner Seite ändert &amp;#8212; im
Fall von Pelican werden die Blogeinträge in Markdown geschrieben und dann in
&lt;span class="caps"&gt;HTML&lt;/span&gt; konvertiert &amp;#8212; ein Server die Seite erstellt und das Ergebnis in den
&lt;code&gt;gh-pages&lt;/code&gt; Branch pusht. Dadurch wird ein Update der Website auf ein einfaches
&lt;code&gt;git push&lt;/code&gt; reduziert.&lt;/p&gt;
&lt;p&gt;Die Konfiguration von Travis &lt;span class="caps"&gt;CI&lt;/span&gt; wird durch eine denkbar einfache &lt;span class="caps"&gt;YAML&lt;/span&gt; Datei
definiert.
Eine (vereinfachte) Konfiguration für dieses Blog sieht beispielsweise so&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pelican is a python program&lt;/span&gt;
&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# install pelican and some more packages&lt;/span&gt;
&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pip&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-r&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;requirements.txt&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# generate static html through pelican&amp;#39;s makefile&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make publish&lt;/span&gt;

&lt;span class="c1"&gt;# deploy to github pages&lt;/span&gt;
&lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pages&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;skip_cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;$GITHUB_TOKEN&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Falls Fehler beim Erstellen auftreten, schickt Travis eine Email und bricht die
Veröffentlichung ab. Wenn keine Fehler auftreten, wird wenige Sekunden später
die neue Version von GitHub&amp;nbsp;ausgeliefert.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; verschlüsselt von&amp;nbsp;Cloudflare®&lt;/h3&gt;
&lt;p&gt;Die &lt;code&gt;github.io&lt;/code&gt; Domains werden zwar verschlüsselt ausgeliefert, aber natürlich
kann GitHub keine &lt;span class="caps"&gt;SSL&lt;/span&gt; Zertifikate für die eigene Domain ausstellen lassen.
[Update: Mittlerweile kann GitHub das.]
Man kann auch kein eigenes Zertifikat hochladen. Aber die Situation ist nicht
so aussichtslos wie sie scheint. Cloudflare ermöglicht es, allerdings müssen
ein paar Bedingungen erfüllt&amp;nbsp;sein.&lt;/p&gt;
&lt;p&gt;Cloudflare&amp;nbsp;muss&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;als &lt;span class="caps"&gt;DNS&lt;/span&gt; Service für die gewünschte Domain genutzt werden&amp;nbsp;und&lt;/li&gt;
&lt;li&gt;als Proxy vor der Seite benutzt&amp;nbsp;werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Als Bonus können wir Cloudflares &lt;a href="https://de.wikipedia.org/wiki/Content_Delivery_Network"&gt;&lt;span class="caps"&gt;CDN&lt;/span&gt;&lt;/a&gt;&amp;nbsp;nutzen.&lt;/p&gt;
&lt;p&gt;Sobald sich Cloudflare um das &lt;span class="caps"&gt;DNS&lt;/span&gt; der Domain kümmert, kann über das Dashboard
&lt;span class="caps"&gt;SSL&lt;/span&gt; aktiviert werden &amp;#8212; und wenn man schon dabei ist, sollte man auch die
&lt;code&gt;Always use HTTPS&lt;/code&gt; und &lt;code&gt;HSTS&lt;/code&gt; Optionen&amp;nbsp;aktivieren.&lt;/p&gt;</content><category term="Meta"></category><category term="Hosting"></category></entry><entry><title>Vicsek</title><link href="https://blog.schawe.me/vicsek.html" rel="alternate"></link><published>2017-08-08T21:46:00+02:00</published><updated>2017-08-08T21:46:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-08-08:/vicsek.html</id><summary type="html">&lt;p&gt;Das &lt;a href="https://doi.org/10.1103/PhysRevLett.75.1226"&gt;Vicsek-Modell&lt;/a&gt; wurde 1995
vorgeschlagen, um das Schwarmverhalten von Vögeln oder Fischen zu modellieren.
Die Idee ist, dass jedes Individuum seine Bewegungsrichtung an der seiner
Nachbarn anpasst. Wenn jedes Individuum genügend Nachbarn hat und die
Störeinflüsse nicht zu groß sind, bilden sich Schwärme. Videos von solchen
Schwärmen werden auf allen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Das &lt;a href="https://doi.org/10.1103/PhysRevLett.75.1226"&gt;Vicsek-Modell&lt;/a&gt; wurde 1995
vorgeschlagen, um das Schwarmverhalten von Vögeln oder Fischen zu modellieren.
Die Idee ist, dass jedes Individuum seine Bewegungsrichtung an der seiner
Nachbarn anpasst. Wenn jedes Individuum genügend Nachbarn hat und die
Störeinflüsse nicht zu groß sind, bilden sich Schwärme. Videos von solchen
Schwärmen werden auf allen größeren Konferenzen der Statistischen Physik
gezeigt &amp;#8212; und jetzt auch&amp;nbsp;hier.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/vicsek.png"&gt;
&lt;source src="/vid/vicsek.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Auf &lt;a href="https://github.com/surt91/vicsek"&gt;GitHub&lt;/a&gt; findet sich das Programm,
das ich für obiges Video geschrieben habe. Es ist in Rust geschrieben und
zeigt die Simulation per Piston auf dem&amp;nbsp;Bildschirm.&lt;/p&gt;
&lt;p&gt;Ich habe sehr großen Gefallen an Rust gefunden &amp;#8212; gerade für ein Projekt wie
dieses scheint es ideal geeignet. Es ist so schnell wie C, aber man muss sich
keinerlei Gedanken um den Speicher machen und einige andere Fehlerklassen, die
der Compiler direkt verhindert. Rayon macht Parallelisierung so einfach wie
OpenMP &amp;#8212; mit dem Vorteil, dass der Compiler einen Fehler ausgibt, falls es
eine Variable gibt, aus der parallel gelesen und geschrieben&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Als Beispiel, warum ich Rust als sehr leserlich und elegant empfinde, möchte
ich folgendes (unvollständige) Beispiel&amp;nbsp;ansehen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Proximity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Vicsek&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proximity&lt;/span&gt;: &lt;span class="nc"&gt;Proximity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vicsek&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proximity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Proximity&lt;/span&gt;::&lt;span class="n"&gt;Neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_direction_neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Proximity&lt;/span&gt;::&lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_direction_disk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Methode &lt;code&gt;update()&lt;/code&gt; passt die Richtung an, in die ihr Argument im nächsten
Zeitschritt fliegen soll. In meiner Simulation gibt es zwei Möglichkeiten:
entweder orientiert man sich an seinen &lt;code&gt;n&lt;/code&gt; nächsten Nachbarn oder an allen
Vögeln innerhalb eines Radius von &lt;code&gt;r&lt;/code&gt;. Der Datentyp &lt;code&gt;Proximity&lt;/code&gt; kann eines von
beiden beinhalten &amp;#8212; welches vorhanden ist, kann elegant per Pattern-Matching
ermittelt&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Brauche ich länger, um Rust zu schreiben als C oder C++? Vermutlich, aber ich
verbringe weniger Zeit mit dem Debuggen. Netto also mehr&amp;nbsp;Spaß.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Code"></category></entry><entry><title>A Graph a Day</title><link href="https://blog.schawe.me/randomGraphs.html" rel="alternate"></link><published>2017-05-13T17:36:00+02:00</published><updated>2017-05-13T17:36:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-05-13:/randomGraphs.html</id><summary type="html">&lt;p&gt;Vor einiger Zeit habe ich &lt;a href="https://twitter.com/randomGraphs"&gt;@randomGraphs&lt;/a&gt;
geschrieben: Ein Twitterbot, der einen Zufallsgraphen pro Tag&amp;nbsp;tweetet.&lt;/p&gt;
&lt;p&gt;Die meisten Graphtypen, die er darstellen kann stammen aus der NetworkX
Bibliothek oder sind reale Netzwerke. Ein paar &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Proximity&lt;/a&gt;
&lt;a href="https://blog.schawe.me/relative-neighborhood-graph.html"&gt;Graphs&lt;/a&gt; habe ich selbst geschrieben.
Die Darstellung und gegebenenfalls das Layout übernimmt Cytoscape oder
&lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; (dessen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor einiger Zeit habe ich &lt;a href="https://twitter.com/randomGraphs"&gt;@randomGraphs&lt;/a&gt;
geschrieben: Ein Twitterbot, der einen Zufallsgraphen pro Tag&amp;nbsp;tweetet.&lt;/p&gt;
&lt;p&gt;Die meisten Graphtypen, die er darstellen kann stammen aus der NetworkX
Bibliothek oder sind reale Netzwerke. Ein paar &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Proximity&lt;/a&gt;
&lt;a href="https://blog.schawe.me/relative-neighborhood-graph.html"&gt;Graphs&lt;/a&gt; habe ich selbst geschrieben.
Die Darstellung und gegebenenfalls das Layout übernimmt Cytoscape oder
&lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; (dessen Autor diesem Bot&amp;nbsp;folgt).&lt;/p&gt;
&lt;p&gt;Bei diesem Projekt habe ich exzessiv Gebrauch von Pythons &lt;code&gt;Decorator&lt;/code&gt; und
&lt;code&gt;Introspection&lt;/code&gt; gemacht, sodass man, um einen neuen Graphtyp einzuführen
nur eine Methode schreiben muss, die eine Graph-Datenstruktur zurück gibt.
Einstellungen, welche Darstellungen erlaubt sind, werden per &lt;code&gt;decorator&lt;/code&gt;
getätigt und alle Methoden werden per Introspection automatisch zum Pool
hinzugefügt, aus dem der Zufallsgenerator&amp;nbsp;zieht.&lt;/p&gt;
&lt;p&gt;Eine typische Methode sieht etwa so&amp;nbsp;aus.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@synonym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Barabasi Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@synonym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;preferential attachment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;styles_all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@layout&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kamada-kawai&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;force-directed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sfdp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fruchterman_reingold&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;radial_tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generateBarabasiAlbert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barabasi_albert_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gen is networkx Generator&lt;/span&gt;
    &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Barabási-Albert Graph&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;, N = &lt;/span&gt;&lt;span class="si"&gt;{N}&lt;/span&gt;&lt;span class="s2"&gt;, m = &lt;/span&gt;&lt;span class="si"&gt;{m}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und liefert für &lt;span class="math"&gt;\(N=226, m=1\)&lt;/span&gt; und das &lt;code&gt;radial_tree&lt;/code&gt; Layout beispielsweise
diesen Graph. Die Größe der Knoten wird hier von der
&lt;a href="https://en.wikipedia.org/wiki/Betweenness_centrality"&gt;Betweenness Centrality&lt;/a&gt;&amp;nbsp;bestimmt.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph" src="/img/barabasi.png"&gt;&lt;/p&gt;
&lt;p&gt;Die &lt;code&gt;@synonym&lt;/code&gt; Decorators ermöglichen die zweite Funktion des Bots, denn
er tweetet nicht nur einmal am Tag einen zufälligen Graphen, sondern reagiert
auch auf Mentions. Falls in der Mention der Name der Methode oder eines der
per &lt;code&gt;@synonym&lt;/code&gt; registrierten Worte auftaucht, antwortet er mit einem Bild des
entsprechenden Graphen. Dank &lt;code&gt;fuzzywuzzy&lt;/code&gt; ist es sogar resistent gegen&amp;nbsp;Tippfehler.&lt;/p&gt;
&lt;p&gt;Twitter unterstützt leider keine Vektorgrafiken und wandelt Bilder gerne in
stark komprimierte &lt;code&gt;.jpg&lt;/code&gt;, was gerade bei diesen Graphen zu störenden
Artefakten führt. Dagegen hilft es, wenn ich einen Rand aus transparenten
Pixeln dem Bild hinzufüge. Das führt dazu, dass Twitter &lt;code&gt;.jpg&lt;/code&gt; nicht als
geeignetes Format ansieht und die Bilder im verlustfreien &lt;code&gt;.png&lt;/code&gt; ausliefert.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-alpha&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;-channel&lt;span class="w"&gt; &lt;/span&gt;RGBA&lt;span class="w"&gt; &lt;/span&gt;-bordercolor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rgba(0,0,0,0)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-border&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1x1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;input.png&lt;span class="w"&gt; &lt;/span&gt;output.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Graph" src="/img/agraphaday.png"&gt;&lt;/p&gt;
&lt;p&gt;Der komplette Quellcode ist auf &lt;a href="https://github.com/surt91/AGraphADay"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Python"></category><category term="Code"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>make</title><link href="https://blog.schawe.me/make.html" rel="alternate"></link><published>2016-11-02T15:41:00+01:00</published><updated>2016-11-02T15:41:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-11-02:/make.html</id><summary type="html">&lt;p&gt;Als Obi-Wan zu Luke gesagt&amp;nbsp;hat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the weapon of a Jedi Knight.
Not as clumsy or random as a blaster;
an elegant weapon for a more civilized&amp;nbsp;age.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Obi-Wan Kenobi&lt;/cite&gt; (1977)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meinte er vermutlich &lt;code&gt;make&lt;/code&gt;. (Fun Fact: &lt;code&gt;make&lt;/code&gt; wurde auch &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;1977 veröffentlicht&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Mit wenigen Zeilen im &lt;code&gt;Makefile&lt;/code&gt; kann …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Als Obi-Wan zu Luke gesagt&amp;nbsp;hat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the weapon of a Jedi Knight.
Not as clumsy or random as a blaster;
an elegant weapon for a more civilized&amp;nbsp;age.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Obi-Wan Kenobi&lt;/cite&gt; (1977)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meinte er vermutlich &lt;code&gt;make&lt;/code&gt;. (Fun Fact: &lt;code&gt;make&lt;/code&gt; wurde auch &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;1977 veröffentlicht&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Mit wenigen Zeilen im &lt;code&gt;Makefile&lt;/code&gt; kann man nicht nur sein &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; Projekt
kompilieren, sondern auch alle Plots neu zeichnen, die sich geändert haben.
Für unser Beispiel gehen wir davon aus, dass zum Plotten Gnuplot mit dem &lt;code&gt;epslatex&lt;/code&gt; Terminal genutzt
wird und folgende Verzeichnisstruktur des Projektes&amp;nbsp;vorliegt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
+-- data
|   + datafile1.dat
|   + datafile2.dat
+-- images
|   +-- img1.svg
|   +-- img2.tex
+-- plots
|   +-- style.gps
|   +-- plot1.gp
|   +-- plot2.gp
+-- myDocument.tex
+-- chapter1.tex
+-- chapter2.tex
+-- lit.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dann kümmert sich das folgende &lt;code&gt;Makefile&lt;/code&gt; darum, dass die Daten für die Plots
heruntergeladen werden, alle Plots, TikZ und .svg parallel zu .pdf gerendert
werden und sobald das geschehen ist, das Dokument kompiliert&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DOCUMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;myDocument

&lt;span class="c"&gt;# get all image files from their directories&lt;/span&gt;
&lt;span class="nv"&gt;PLOTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;plots/*.gp&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;TIKZ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;images/*.tex&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SVG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;images/*.svg&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# we want the images to be pdf&lt;/span&gt;
&lt;span class="nv"&gt;PLOTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:%.gp&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SVG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG:%.svg&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;TIKZ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ:%.tex&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;IMAGES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# get all tex files&lt;/span&gt;
&lt;span class="nv"&gt;TEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;*.tex&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;BIBFILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lit.bib

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;DOKUMENT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.&lt;span class="n"&gt;pdf&lt;/span&gt;

&lt;span class="c"&gt;# we need chapters, images and the bib file to create our document&lt;/span&gt;
&lt;span class="c"&gt;# also recompile, whenever one of those changes&lt;/span&gt;
&lt;span class="nf"&gt;$(DOCUMENT).pdf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TEX&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;IMAGES&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;BIBFILE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;$(DOCUMENT).pdf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;tex&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;biber&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null

&lt;span class="c"&gt;# gnuplot generates texfiles from the .gp files&lt;/span&gt;
&lt;span class="c"&gt;# make sure to regenerate all tex files, if the style&lt;/span&gt;
&lt;span class="c"&gt;# or the data changes&lt;/span&gt;
&lt;span class="nf"&gt;%.tex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;gp&lt;/span&gt; &lt;span class="n"&gt;plots&lt;/span&gt;/&lt;span class="n"&gt;style&lt;/span&gt;.&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gnuplot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# use this rule to convert .svg to pdf&lt;/span&gt;
&lt;span class="nf"&gt;$(SVG)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;svg&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;*F&lt;span class="k"&gt;)&lt;/span&gt;.pdf&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# use this rule only to generate .pdf from the &amp;quot;image type&amp;quot; .tex files&lt;/span&gt;
&lt;span class="nf"&gt;$(TIKZ) $(PLOTS)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;tex&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;log,aux&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;-inc.eps&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;-inc-eps-converted-to.pdf

&lt;span class="c"&gt;# rule to extract data from its archive&lt;/span&gt;
&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%: %.&lt;span class="n"&gt;tar&lt;/span&gt;.&lt;span class="n"&gt;xz&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-xf&lt;span class="w"&gt; &lt;/span&gt;$&amp;lt;

&lt;span class="c"&gt;# rule to download the archive with the data&lt;/span&gt;
&lt;span class="nf"&gt;%.tar.xz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;-nv&lt;span class="w"&gt; &lt;/span&gt;https://some.domain.tld/where/your/data/is/&lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proper&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;data
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DOCUMENT&lt;span class="k"&gt;)&lt;/span&gt;.pdf

&lt;span class="c"&gt;# delete temporary files&lt;/span&gt;
&lt;span class="nf"&gt;proper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;data.tar.xz
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:.pdf&lt;span class="o"&gt;=&lt;/span&gt;.eps&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*-inc.eps&lt;span class="w"&gt; &lt;/span&gt;*-inc-eps-converted-to.pdf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:.pdf&lt;span class="o"&gt;=&lt;/span&gt;.tex&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;plots/fit.log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DOCUMENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;log,aux,bbl,blg,toc,out,lof,lot,snm,nav,tec,glg,glo,gls,xdy,acn,acr,alg,bcf,run.xml&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dazu baut &lt;code&gt;make&lt;/code&gt; einen gerichteten azyklischen Graphen (&lt;span class="caps"&gt;DAG&lt;/span&gt;) aus den
Abhängigkeiten auf und führt die Dinge, deren Abhängigkeiten erfüllt sind,
parallel&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;Das grundlegende Element einer &lt;code&gt;Makefile&lt;/code&gt; sind die Rules, die generell so
aufgebaut&amp;nbsp;sind&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prerequisites&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dabei gibt die erste Zeile die Abhängigkeiten welche &lt;code&gt;prerequisites&lt;/code&gt; bestehen
müssen, um durch Ausführung des &lt;code&gt;recipe&lt;/code&gt; die &lt;code&gt;targets&lt;/code&gt; zu&amp;nbsp;erstellen.&lt;/p&gt;
&lt;p&gt;Die Nützlichkeit von &lt;code&gt;make&lt;/code&gt; wird zu großen Teilen durch automatische
Variablen (zB. &lt;code&gt;$*&lt;/code&gt;) oder Pattern Rules (&lt;code&gt;%.pdf&lt;/code&gt;) hergestellt.
Dazu verweise ich allerdings lieber auf die &lt;a href="https://www.gnu.org/software/make/manual/"&gt;offizielle Dokumentation&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="make"></category><category term="LaTeX"></category><category term="TikZ"></category><category term="Gnuplot"></category></entry><entry><title>Labyrinthartiger Zellulärer Automat</title><link href="https://blog.schawe.me/labyrinthartiger-zellularer-automat.html" rel="alternate"></link><published>2016-10-14T21:38:00+02:00</published><updated>2016-10-14T21:38:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-10-14:/labyrinthartiger-zellularer-automat.html</id><summary type="html">&lt;p&gt;Der wohl berühmteste zelluläre Automat ist vermutlich &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;.
Er und nahe Verwandte sind geradezu lächerlich gut untersucht. &lt;a href="http://www.conwaylife.com/"&gt;Das LifeWiki&lt;/a&gt;
gibt einen ganz guten Überblick.
Die Regeln sind einfach: Jede Zelle hat 8 Nachbarn, wenn genau 3 Nachbarn leben,
erwacht sie auch zum Leben, bei weniger als …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Der wohl berühmteste zelluläre Automat ist vermutlich &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;.
Er und nahe Verwandte sind geradezu lächerlich gut untersucht. &lt;a href="http://www.conwaylife.com/"&gt;Das LifeWiki&lt;/a&gt;
gibt einen ganz guten Überblick.
Die Regeln sind einfach: Jede Zelle hat 8 Nachbarn, wenn genau 3 Nachbarn leben,
erwacht sie auch zum Leben, bei weniger als 2 oder mehr als 3 stirbt sie (23/3).
Wenn man die Regeln des Automaten ändert, kann man mit 12345/3 &lt;a href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html"&gt;labyrinth&lt;/a&gt;artige
Strukturen&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/cellular_maze.png"&gt;
&lt;source src="/vid/cellular_maze.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/610615d7204a8994ed1145be710df130"&gt;Gist auf GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category></entry><entry><title>Relative Neighborhood Graph</title><link href="https://blog.schawe.me/relative-neighborhood-graph.html" rel="alternate"></link><published>2016-10-02T15:34:00+02:00</published><updated>2016-10-02T15:34:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-10-02:/relative-neighborhood-graph.html</id><summary type="html">&lt;video controls loop autoplay poster="/img/rng.png" width="100%"&gt;
&lt;source src="/vid/rng.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Zu jedem Zeitpunkt ist im obigen Video ein Relative Neighborhood Graph (&lt;span class="caps"&gt;RNG&lt;/span&gt;) zu
sehen. Der &lt;span class="caps"&gt;RNG&lt;/span&gt; verbindet Knoten miteinander, die nahe beieinander sind.
Für die Knotenmenge &lt;span class="math"&gt;\(V\)&lt;/span&gt; muss also eine Metrik definiert sein, sodass eine
Distanz &lt;span class="math"&gt;\(d_{ij}\)&lt;/span&gt; zwischen zwei Knoten definiert …&lt;/p&gt;</summary><content type="html">&lt;video controls loop autoplay poster="/img/rng.png" width="100%"&gt;
&lt;source src="/vid/rng.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Zu jedem Zeitpunkt ist im obigen Video ein Relative Neighborhood Graph (&lt;span class="caps"&gt;RNG&lt;/span&gt;) zu
sehen. Der &lt;span class="caps"&gt;RNG&lt;/span&gt; verbindet Knoten miteinander, die nahe beieinander sind.
Für die Knotenmenge &lt;span class="math"&gt;\(V\)&lt;/span&gt; muss also eine Metrik definiert sein, sodass eine
Distanz &lt;span class="math"&gt;\(d_{ij}\)&lt;/span&gt; zwischen zwei Knoten definiert ist. Dann verbindet der &lt;span class="caps"&gt;RNG&lt;/span&gt;
alle Knoten, die die&amp;nbsp;Bedingung
&lt;/p&gt;
&lt;div class="math"&gt;$$
    d_{ij} \le \max(d_{ik}, d_{kj}) \quad \forall k \in V\setminus\{i, j\}
$$&lt;/div&gt;
&lt;p&gt;
erfüllen.&lt;/p&gt;
&lt;p&gt;Dementsprechend simpel kann man einen &lt;span class="caps"&gt;RNG&lt;/span&gt;&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Euclidean distance&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Insert edges according to the RNG rules into the graph G&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;possible_blocker&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;distToC1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_blocker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;distToC2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_blocker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distToC1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;distToC2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# this node is in the lune and blocks&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# generate some random coordinates&lt;/span&gt;
    &lt;span class="n"&gt;coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# draw the graph G&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_networkx_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_networkx_edges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interessanterweise tauchen alle Kanten des &lt;span class="caps"&gt;RNG&lt;/span&gt; auch in der Delaunay Triangulation
der gleichen Knotenmenge auf. Dies kann man nutzen, um RNGs in &lt;span class="math"&gt;\(\mathcal{O}(N \log N)\)&lt;/span&gt;
zu&amp;nbsp;konstruieren.&lt;/p&gt;
&lt;p&gt;Meiner persönlichen Meinung nach, bildet der &lt;span class="caps"&gt;RNG&lt;/span&gt; mit dem Verhältnis von Knoten
zu Kanten ein ästhetisches&amp;nbsp;Optimum.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="Formel"></category></entry><entry><title>optipng</title><link href="https://blog.schawe.me/optipng.html" rel="alternate"></link><published>2016-10-02T12:56:00+02:00</published><updated>2016-10-02T12:56:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-10-02:/optipng.html</id><content type="html">&lt;p&gt;Optimiere &lt;code&gt;.png&lt;/code&gt; Bilder. Kleinere Größe, kein&amp;nbsp;Qualitätsverlust.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;optipng&lt;span class="w"&gt; &lt;/span&gt;-o7&lt;span class="w"&gt; &lt;/span&gt;*.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>optipng</title><link href="https://blog.schawe.me/en/optipng.html" rel="alternate"></link><published>2016-10-02T12:56:00+02:00</published><updated>2016-10-02T12:56:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-10-02:/en/optipng.html</id><content type="html">&lt;p&gt;Optimize &lt;code&gt;.png&lt;/code&gt; images. Smaller size, no quality&amp;nbsp;loss.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;optipng&lt;span class="w"&gt; &lt;/span&gt;-o7&lt;span class="w"&gt; &lt;/span&gt;*.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>Perfect Dependencies</title><link href="https://blog.schawe.me/perfect-dependencies.html" rel="alternate"></link><published>2016-09-17T20:27:00+02:00</published><updated>2016-09-17T20:27:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/perfect-dependencies.html</id><summary type="html">&lt;p&gt;Man hat ein großes C++ Projekt, ändert einen Header, führt &lt;code&gt;make&lt;/code&gt; aus und
ein seltsamer Fehler tritt im Programm auf. Das liegt natürlich daran, dass
&lt;code&gt;make&lt;/code&gt; nicht alle Quelldateien neu kompiliert hat, die den Header einbinden.
Woher sollte &lt;code&gt;make&lt;/code&gt; das auch wissen? Alle Header per Hand in der &lt;code&gt;Makefile&lt;/code&gt;
einzutragen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Man hat ein großes C++ Projekt, ändert einen Header, führt &lt;code&gt;make&lt;/code&gt; aus und
ein seltsamer Fehler tritt im Programm auf. Das liegt natürlich daran, dass
&lt;code&gt;make&lt;/code&gt; nicht alle Quelldateien neu kompiliert hat, die den Header einbinden.
Woher sollte &lt;code&gt;make&lt;/code&gt; das auch wissen? Alle Header per Hand in der &lt;code&gt;Makefile&lt;/code&gt;
einzutragen und zu pflegen, ist Wahnsinn und wird den Programmierer in denselben&amp;nbsp;treiben.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; ist ein sehr allgemein gehaltenes Programm, wie ich in einem &lt;a href="https://blog.schawe.me/make.html"&gt;vorherigen Eintrag&lt;/a&gt;
gezeigt habe. Sich um Eigenheiten von C oder C++ zu kümmern fällt also nicht
in den Aufgabenbereich von &lt;code&gt;make&lt;/code&gt;. Aber glücklicherweise gibt es ein Programm,
dessen Hauptaufgabe es ist, sich mit den Eigenheiten von C bzw. C++ auszukennen:
den Compiler.
Tatsächlich bietet (zumindest &lt;span class="caps"&gt;GCC&lt;/span&gt;) die Option eine C oder C++ Datei zu parsen
und alle inkludierten Header&amp;nbsp;auszugeben.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;g++&lt;span class="w"&gt; &lt;/span&gt;-MM&lt;span class="w"&gt; &lt;/span&gt;myCode.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das ausnutzend, bietet die &lt;a href="https://www.gnu.org/software/make/manual/"&gt;offizielle Dokumentation&lt;/a&gt;
von &lt;code&gt;GNU make&lt;/code&gt; folgende Rule, um je eine &amp;#8220;dependency&amp;#8221; &lt;code&gt;Makefile&lt;/code&gt;
pro &lt;code&gt;.c&lt;/code&gt; Datei zu erzeugen und automatisch&amp;nbsp;einzubinden.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%.d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;@set&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CPPFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;’s,&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="se"&gt;\)\.&lt;/span&gt;o&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;]&lt;/span&gt;*,&lt;span class="se"&gt;\1&lt;/span&gt;.o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;,g’&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;

&lt;span class="cp"&gt;include $(sources:.c=.d)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Falls man &lt;code&gt;.o&lt;/code&gt; Dateien in ein &lt;code&gt;obj/&lt;/code&gt; Verzeichnis speichert, muss man die
Regex anpassen. In meinen Projekten leistet mir diese Rule gute&amp;nbsp;Dienste.&lt;/p&gt;
&lt;p&gt;Alternativ könnte man natürlich auf ein anderes Buildsystem statt handgepflegter
Makefiles&amp;nbsp;umsteigen.&lt;/p&gt;</content><category term="Code"></category><category term="make"></category><category term="C++"></category></entry><entry><title>png2mp4</title><link href="https://blog.schawe.me/png2mp4.html" rel="alternate"></link><published>2016-09-17T18:48:00+02:00</published><updated>2016-09-17T18:48:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/png2mp4.html</id><content type="html">&lt;p&gt;Konvertiere einen Ordner mit passend nummerierten &lt;code&gt;.png&lt;/code&gt;
in ein &lt;code&gt;x264&lt;/code&gt; Video im &lt;code&gt;.mp4&lt;/code&gt; Format mit gegebener&amp;nbsp;Framerate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;vid.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>png2mp4</title><link href="https://blog.schawe.me/en/png2mp4.html" rel="alternate"></link><published>2016-09-17T18:48:00+02:00</published><updated>2016-09-17T18:48:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/en/png2mp4.html</id><content type="html">&lt;p&gt;Convert a folder with enumerated &lt;code&gt;.png&lt;/code&gt; files into a &lt;code&gt;x264&lt;/code&gt; Video
i a &lt;code&gt;.mp4&lt;/code&gt; container with a given frame&amp;nbsp;rate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;image2&lt;span class="w"&gt; &lt;/span&gt;-pattern_type&lt;span class="w"&gt; &lt;/span&gt;glob&lt;span class="w"&gt; &lt;/span&gt;-framerate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img*.png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-vcodec&lt;span class="w"&gt; &lt;/span&gt;libx264&lt;span class="w"&gt; &lt;/span&gt;vid.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>svg2png</title><link href="https://blog.schawe.me/svg2png.html" rel="alternate"></link><published>2016-09-17T18:46:00+02:00</published><updated>2016-09-17T18:46:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/svg2png.html</id><content type="html">&lt;p&gt;Konvertiere &lt;code&gt;.svg&lt;/code&gt; in &lt;code&gt;.png&lt;/code&gt; mit weißem&amp;nbsp;Hintergrund.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e img.png -h 1080 img.svg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oder einen ganzen&amp;nbsp;Ordner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.svg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e $(basename -s .svg $i).png -h 1080 $i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>svg2png</title><link href="https://blog.schawe.me/en/svg2png.html" rel="alternate"></link><published>2016-09-17T18:46:00+02:00</published><updated>2016-09-17T18:46:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/en/svg2png.html</id><content type="html">&lt;p&gt;Convert &lt;code&gt;.svg&lt;/code&gt; into &lt;code&gt;.png&lt;/code&gt; with white&amp;nbsp;background.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e img.png -h 1080 img.svg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or a complete&amp;nbsp;folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.svg
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#fff\&amp;quot; -e $(basename -s .svg $i).png -h 1080 $i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>TSPview</title><link href="https://blog.schawe.me/tspview.html" rel="alternate"></link><published>2016-09-17T15:41:00+02:00</published><updated>2016-09-17T15:41:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-09-17:/tspview.html</id><summary type="html">&lt;p&gt;Das Problem des Handlungsreisenden ist es, die kürzeste Rundtour zu planen,
sodass man alle Städte besucht. Es ist eines der berühmtesten
Optimierungsprobleme und gehört zur Klasse &lt;a href="https://de.wikipedia.org/wiki/NP-Schwere"&gt;&lt;span class="caps"&gt;NP&lt;/span&gt;-hard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Es gibt also (&lt;a href="https://de.wikipedia.org/wiki/P-NP-Problem"&gt;bis jetzt&lt;/a&gt;)
keine effiziente Möglichkeit zur Lösung. Allerdings gibt es
&lt;a href="https://scholar.google.fr/scholar?q=euclidean+tsp+ptas&amp;amp;hl=de"&gt;Näherungen&lt;/a&gt;,
&lt;a href="https://scholar.google.fr/scholar?q=tsp+linear+programming"&gt;untere Schranken&lt;/a&gt;
und unzählige&amp;nbsp;Heuristiken.&lt;/p&gt;
&lt;p&gt;Die einfachsten dieser …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Das Problem des Handlungsreisenden ist es, die kürzeste Rundtour zu planen,
sodass man alle Städte besucht. Es ist eines der berühmtesten
Optimierungsprobleme und gehört zur Klasse &lt;a href="https://de.wikipedia.org/wiki/NP-Schwere"&gt;&lt;span class="caps"&gt;NP&lt;/span&gt;-hard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Es gibt also (&lt;a href="https://de.wikipedia.org/wiki/P-NP-Problem"&gt;bis jetzt&lt;/a&gt;)
keine effiziente Möglichkeit zur Lösung. Allerdings gibt es
&lt;a href="https://scholar.google.fr/scholar?q=euclidean+tsp+ptas&amp;amp;hl=de"&gt;Näherungen&lt;/a&gt;,
&lt;a href="https://scholar.google.fr/scholar?q=tsp+linear+programming"&gt;untere Schranken&lt;/a&gt;
und unzählige&amp;nbsp;Heuristiken.&lt;/p&gt;
&lt;p&gt;Die einfachsten dieser Heuristiken habe ich in einem kleinen Programm TSPview
implementiert, mitsamt Visualisierung. Der Quellcode ist auf
&lt;a href="https://github.com/surt91/TSPview"&gt;GitHub&lt;/a&gt; zu&amp;nbsp;finden.&lt;/p&gt;
&lt;video controls loop width="100%"&gt;
&lt;source src="/vid/tspview2.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;h2&gt;Algorithmen&lt;/h2&gt;
&lt;p&gt;Hier folgt eine kurze Beschreibung der verwendeten Algorithmen und jeweils ein
Bild, welche Lösung die Methode auf einer berühmten Instanz des &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;findet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="42 Hauptstädte in Amerika" class="invertable" src="/img/tsp.png"&gt;
Das sind 42 Hauptstädte der Vereinigten Staaten von Amerika und Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; (Hawaii und
Alaska, sowie einige Staaten an der Ostküste, die das Problem nicht schwieriger
machen, fehlen). Dieses Problem war das erste größere, das 1956 beweisbar
optimal gelöst&amp;nbsp;wurde.&lt;/p&gt;
&lt;h3&gt;Nearest&amp;nbsp;Neighbor&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Nearest Neighbor" class="invertable" src="/img/tsp_nearestNeighbor.png"&gt;
Die Nearest Neighbor Heuristik (&lt;span class="math"&gt;\(\mathcal{O}(N^2)\)&lt;/span&gt;) startet bei einer zufälligen Stadt und wählt
als nächste Stadt immer die Stadt, die am nächsten an der aktuellen Stadt ist und
noch nicht besucht&amp;nbsp;wurde.&lt;/p&gt;
&lt;h3&gt;Greedy&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Greedy" class="invertable" src="/img/tsp_greedy.png"&gt;
Diese Heuristik (&lt;span class="math"&gt;\(\mathcal{O}(N^2 \log N)\)&lt;/span&gt;) ist ähnlich zu &lt;a href="https://de.wikipedia.org/wiki/Algorithmus_von_Kruskal"&gt;Kruskals Algorithmus für minimal spannende Bäume&lt;/a&gt;.
Sie nimmt die kürzeste Verbindung zwischen zwei Städten und fügt sie der Tour
hinzu, wenn sie in der Tour noch erlaubt&amp;nbsp;ist.&lt;/p&gt;
&lt;h3&gt;Farthest&amp;nbsp;Insertion&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Farthest Insertion" class="invertable" src="/img/tsp_farIn.png"&gt;
Farthest Insertion (&lt;span class="math"&gt;\(\mathcal{O}(N^3)\)&lt;/span&gt;) startet bei einer zufälligen Stadt und fügt dann die Stadt,
die am weitesten von der aktuellen Tour entfernt ist an der Stelle in die Tour,
die dafür sorgt, dass die Tour möglichst kurz&amp;nbsp;bleibt.&lt;/p&gt;
&lt;h3&gt;Two-Opt&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Two-Opt" class="invertable" src="/img/tsp_twoOpt.png"&gt;
Two-Opt beginnt mit einer beliebigen Tour, die bspw. durch eine der obigen
Heuristken erstellt wurde und verbessert sie, indem sie zwei Verbindungen nimmt
und die Endpunkte über Kreuz austauscht, wenn die Tour dadurch verbunden bleibt
und kürzer&amp;nbsp;wird.&lt;/p&gt;
&lt;h3&gt;Lineare Programmierung mit &amp;#8220;Subtour Elimination&amp;nbsp;Cuts&amp;#8221;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Linear Programming" class="invertable" src="/img/tsp_LP.png"&gt;
Lineare Programmierung (&lt;span class="caps"&gt;LP&lt;/span&gt;) zu erklären, würde diesen Artikel sprengen. Aber diese Methode liefert
untere Schranken für die Tourlänge und kann somit benutzt werden, um die
Qualität einer heuristischen Lösung abzuschätzen. Falls man die optimale
Lösung durch lineare Programmierung findet, erkennt man sie auch sofort als&amp;nbsp;optimal.&lt;/p&gt;
&lt;p&gt;Für weitere Details, kann ich auf einen &lt;a href="http://arxiv.org/abs/1512.08554"&gt;arXiv Artikel&lt;/a&gt;
von mir&amp;nbsp;verweisen.&lt;/p&gt;
&lt;h3&gt;Concorde&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Optimale Tour" class="invertable" src="/img/tsp_opt.png"&gt;
&lt;a href="http://www.math.uwaterloo.ca/tsp/concorde.html"&gt;Concorde&lt;/a&gt;
ist der &amp;#8220;State of the Art&amp;#8221; Solver für das Problem des Handlungsreisenden
und löst problemlos Instanzen mit mehr als 1000 Städten.
Intern benutzt es zwar eine Menge Heuristiken, allerdings auch lineare
Programmierung, um nachzuweisen, dass die gefundene Lösung optimal&amp;nbsp;ist.&lt;/p&gt;
&lt;h2&gt;Technische&amp;nbsp;Details&lt;/h2&gt;
&lt;p&gt;TSPview ist ein Python3 Programm, das zur Darstellung PyQt5 benutzt, das sich
per &lt;code&gt;pip3 install PyQt5&lt;/code&gt; einfach installieren&amp;nbsp;lässt.&lt;/p&gt;
&lt;p&gt;Darüber hinaus enthält es eine optionale Abhängigkeit zu &lt;span class="caps"&gt;CPLEX&lt;/span&gt;, einem
kommerziellen &lt;span class="caps"&gt;LP&lt;/span&gt;&amp;nbsp;solver.&lt;/p&gt;
&lt;h3&gt;boost::python&lt;/h3&gt;
&lt;p&gt;Da das Hauptprogramm in Python geschrieben ist, aber der &lt;span class="caps"&gt;LP&lt;/span&gt;-Teil in C++,
braucht man eine Möglichkeit der Kommunikation. Glücklicherweise gibt es
mit &lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/python/doc/html/index.html"&gt;boost::python&lt;/a&gt;
eine Möglichkeit C++ Klassen in Python als Python-Klassen zu&amp;nbsp;benutzen.&lt;/p&gt;
&lt;p&gt;Um beispielsweise die C++ Klasse &lt;code&gt;MyClass&lt;/code&gt;, deren Konstruktor einen Integer und
eine Python-Liste entgegen nehmen soll, in Python benutzen und &lt;code&gt;myMethod&lt;/code&gt;
aufrufen zu können, reicht folgender&amp;nbsp;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;boost/python.hpp&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// implement MyClass&lt;/span&gt;

&lt;span class="n"&gt;BOOST_PYTHON_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyClass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myMethod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="C++"></category><category term="Python"></category><category term="GitHub"></category><category term="Code"></category><category term="Video"></category><category term="Bild"></category></entry><entry><title>Blogumzug</title><link href="https://blog.schawe.me/blogumzug.html" rel="alternate"></link><published>2016-09-14T21:12:00+02:00</published><updated>2016-09-14T21:12:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-14:/blogumzug.html</id><summary type="html">&lt;p&gt;Soeben habe ich mein Blog von Blogger auf einen kleinen Raspberry Pi 2 in meiner
Wohnung verschoben. Als Engine benutze ich &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;,
ein statischer Blog Generator in Python, der mir auf den ersten Blick sehr&amp;nbsp;gefällt.&lt;/p&gt;
&lt;p&gt;Nicht nur, dass ich alle Einträge jetzt in &lt;a href="https://de.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;
schreiben kann, was es ermöglicht …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soeben habe ich mein Blog von Blogger auf einen kleinen Raspberry Pi 2 in meiner
Wohnung verschoben. Als Engine benutze ich &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;,
ein statischer Blog Generator in Python, der mir auf den ersten Blick sehr&amp;nbsp;gefällt.&lt;/p&gt;
&lt;p&gt;Nicht nur, dass ich alle Einträge jetzt in &lt;a href="https://de.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;
schreiben kann, was es ermöglicht das ganze Blog per &lt;a href="https://de.wikipedia.org/wiki/Git"&gt;git&lt;/a&gt;
zu verwalten (dementsprechend gibt es den Quellcode auf &lt;a href="https://github.com/surt91/blog"&gt;GitHub&lt;/a&gt;),
sondern es steht mit &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; ein sehr
hübsches Syntax Highlighting zur&amp;nbsp;Verfügung.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Q_rsqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threehalfs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.5F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="c1"&gt;// evil floating point bit level hacking&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x5f3759df&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// what the fuck?&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threehalfs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// 1st iteration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Außerdem Formeln in &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; Notation dank &lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$\mathcal H = \sum_{\left&amp;lt; i, j \right&amp;gt;} s_i s_j$$&lt;/div&gt;
&lt;p&gt;Ich werde diese Gelegenheit außerdem nutzen die meisten Einträge meines Blogs
zu verwerfen und nur einige ausgewählte zu überarbeiten und hier zu&amp;nbsp;veröffentlichen.&lt;/p&gt;</content><category term="Meta"></category><category term="Python"></category><category term="Code"></category><category term="Formel"></category><category term="Hosting"></category></entry><entry><title>SimulatedSort</title><link href="https://blog.schawe.me/simulatedsort.html" rel="alternate"></link><published>2014-06-14T15:20:00+02:00</published><updated>2014-06-14T15:20:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-06-14:/simulatedsort.html</id><summary type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Simulated_annealing"&gt;Simulated Annealing&lt;/a&gt;
ist eine Optimierungsmethode, die von natürlichen
Kristallisationsprozessen inspiriert ist. Man startet in der Schmelze
bei hohen Temperaturen und lässt es dann abkühlen, sodass die Atome sich
in einem Zustand minimaler Energie anordnen, dem Kristallgitter. Wenn
man also für ein Optimierungsproblem die zu optimierende Größe als
Energie ansieht, und …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Simulated_annealing"&gt;Simulated Annealing&lt;/a&gt;
ist eine Optimierungsmethode, die von natürlichen
Kristallisationsprozessen inspiriert ist. Man startet in der Schmelze
bei hohen Temperaturen und lässt es dann abkühlen, sodass die Atome sich
in einem Zustand minimaler Energie anordnen, dem Kristallgitter. Wenn
man also für ein Optimierungsproblem die zu optimierende Größe als
Energie ansieht, und man eine Lösung durch eine kleine Änderung in eine
andere Lösung verwandeln kann, kann man mit dieser Methode eine Näherung
für das Optimum&amp;nbsp;finden.&lt;/p&gt;
&lt;p&gt;Wenn wir also eine Sequenz &lt;span class="math"&gt;\(S\)&lt;/span&gt; von &lt;span class="math"&gt;\(N\)&lt;/span&gt; Zahlen sortieren wollen, können wir die
Summe der Differenzen zwischen benachbarten Zahlen als Energie
betrachten, denn die ist minimal in einer sortierten&amp;nbsp;Liste.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \mathcal{H} = \sum_{i=1}^{N-1} \left| S_i - S_{i+1} \right|
\end{equation}&lt;/div&gt;
&lt;p&gt;
Um eine Lösung in eine andere zu verwandeln, reicht es zwei Elemente der Sequenz
zu&amp;nbsp;tauschen.&lt;/p&gt;
&lt;p&gt;Der Kern von Simulated Annealing ist der Metropolis&amp;nbsp;Algorithmus.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Starte bei einer hohen Temperatur &lt;span class="math"&gt;\(T\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Berechne die Energie &lt;span class="math"&gt;\(\mathcal{H}(S)\)&lt;/span&gt; der aktuellen Konfiguration &lt;span class="math"&gt;\(S\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Erzeuge eine neue Konfiguration &lt;span class="math"&gt;\(R\)&lt;/span&gt; durch eine kleine Änderunge von &lt;span class="math"&gt;\(S\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Akzeptiere &lt;span class="math"&gt;\(R\)&lt;/span&gt; mit der Wahscheinlichkeit
   &lt;div class="math"&gt;$$p_\mathrm{acc} = \min\left[1 ,\exp(-(\mathcal{H}(R) - \mathcal{H}(S))/T) \right],$$&lt;/div&gt;
   sodass eine &amp;#8220;sortiertere&amp;#8221; Sequenz immer akzeptiert wird und eine &amp;#8220;unsortiertere&amp;#8221;
   vor allem bei hohen Temperaturen. Wenn &lt;span class="math"&gt;\(R\)&lt;/span&gt; akzeptiert wird, gilt &lt;span class="math"&gt;\(S:=R\)&lt;/span&gt;,
   ansonsten wir die alte Konfiguration &lt;span class="math"&gt;\(S\)&lt;/span&gt; weiter&amp;nbsp;benutzt.&lt;/li&gt;
&lt;li&gt;Reduziere die Temperatur (beispielsweise durch Multiplikation mit einer Zahl
   etwas kleiner als 1) und breche ab, wenn die Zieltemperatur erreicht ist.
   Ansonsten beginne wieder bei Punkt&amp;nbsp;2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Genug der Theorie: In einem &lt;a href="https://gist.github.com/surt91/e399500e780e184d9ac7"&gt;Gist auf GitHub&lt;/a&gt;
präsentiere ich ein schnell terminierendes
Sortierprogramm, das zwar nicht immer eine sortierte Liste findet, aber
zumindest eine Näherung! Es ist also
&lt;a href="http://de.wikipedia.org/wiki/Bogosort"&gt;Bogosort&lt;/a&gt; in mehr als nur einer
Hinsicht&amp;nbsp;überlegen!&lt;/p&gt;
&lt;p&gt;Wer braucht da noch &lt;span class="math"&gt;\(\mathcal{O}(N \log(N))\)&lt;/span&gt;&amp;nbsp;Sortier-Algorithmen?!&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Physik"></category><category term="GitHub"></category></entry><entry><title>SHA-256 in 256 Zeilen</title><link href="https://blog.schawe.me/sha-256-in-256-zeilen.html" rel="alternate"></link><published>2014-04-23T20:27:00+02:00</published><updated>2014-04-23T20:27:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-04-23:/sha-256-in-256-zeilen.html</id><summary type="html">&lt;p&gt;Programmiersprachen muss man üben, um sie zu lernen und um sie nicht
wieder zu vergessen. Ich habe also meine Zeit damit vertrieben einen
&lt;a href="http://de.wikipedia.org/wiki/Sha256"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-256&lt;/a&gt; zu schreiben &amp;#8212; eine
&lt;a href="http://de.wikipedia.org/wiki/Kryptologische_Hashfunktion"&gt;kryptographische Hash&lt;/a&gt;
Funktion. Die &lt;a href="https://datatracker.ietf.org/doc/html/rfc6234"&gt;Spezifikation&lt;/a&gt; ist
glücklicherweise sehr sehr verständlich.
Und auch wenn es tausende andere Implementationen gibt, die schneller
sind, alle …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Programmiersprachen muss man üben, um sie zu lernen und um sie nicht
wieder zu vergessen. Ich habe also meine Zeit damit vertrieben einen
&lt;a href="http://de.wikipedia.org/wiki/Sha256"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-256&lt;/a&gt; zu schreiben &amp;#8212; eine
&lt;a href="http://de.wikipedia.org/wiki/Kryptologische_Hashfunktion"&gt;kryptographische Hash&lt;/a&gt;
Funktion. Die &lt;a href="https://datatracker.ietf.org/doc/html/rfc6234"&gt;Spezifikation&lt;/a&gt; ist
glücklicherweise sehr sehr verständlich.
Und auch wenn es tausende andere Implementationen gibt, die schneller
sind, alle Grenzfälle beachten (ich befürchte, dass mein Programm
Probleme auf Big Endian Systemen bekommt), und sogar Schaltkreise, die
hochoptimiert nur diese Operation beherrschen (Stichwort: Bitcoin &lt;span class="caps"&gt;ASIC&lt;/span&gt;), ist
meiner dennoch sehenswert, da er &lt;span class="caps"&gt;SHA&lt;/span&gt;-256 in 256 Zeilen&amp;nbsp;darstellt.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/surt91/11230311"&gt;Der Code ist als Gist auf GitHub&lt;/a&gt;, da
er in seinen 256 Zeilen ansonsten den Lesefluss stören&amp;nbsp;würde.&lt;/p&gt;
&lt;p&gt;In Python ist es übrigens etwas&amp;nbsp;kürzer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hallo Welt!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="C"></category><category term="Python"></category><category term="GitHub"></category></entry><entry><title>DGLshow</title><link href="https://blog.schawe.me/dglshow.html" rel="alternate"></link><published>2014-03-19T11:28:00+01:00</published><updated>2014-03-19T11:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-03-19:/dglshow.html</id><summary type="html">&lt;p&gt;Nachdem ich so vielen Differenzialgleichungssystemen [&lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;4&lt;/a&gt;]
begegnet bin, die sich nicht analytisch lösen lassen, habe ich mir ein
&lt;a href="https://github.com/surt91/DGLshow"&gt;Programm zur numerischen Lösung und Visualisierung derselben geschrieben&lt;/a&gt;.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
![Doppelpendel](/img/doublePendulum.png)
&lt;/video&gt;

&lt;p&gt;Die grundlegende Idee zur numerischen Lösung von Differentialgleichungen ist es, die Zeit
in diskreten Schritten &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; vergehen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nachdem ich so vielen Differenzialgleichungssystemen [&lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;4&lt;/a&gt;]
begegnet bin, die sich nicht analytisch lösen lassen, habe ich mir ein
&lt;a href="https://github.com/surt91/DGLshow"&gt;Programm zur numerischen Lösung und Visualisierung derselben geschrieben&lt;/a&gt;.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
![Doppelpendel](/img/doublePendulum.png)
&lt;/video&gt;

&lt;p&gt;Die grundlegende Idee zur numerischen Lösung von Differentialgleichungen ist es, die Zeit
in diskreten Schritten &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; vergehen zu lassen. Nach jedem Schritt wird der
Zustand so geändert, als ob sich während des Zeitschrittes nichts geändert
hätte und die &amp;#8220;Kräfte&amp;#8221; werden entsprechend der Bewegungsgleichungen neu berechnet.
Für infinitesimal kleine &lt;span class="math"&gt;\(\tau \to \mathrm{d}t\)&lt;/span&gt; ist diese Methode schließlich&amp;nbsp;exakt.&lt;/p&gt;
&lt;p&gt;Im einfachsten Fall, dem Euler Verfahren, sähe das für ein einfaches
Fadenpendel nach &lt;span class="math"&gt;\(k\)&lt;/span&gt; Zeitschritten so&amp;nbsp;aus
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\vartheta_{k+1} &amp;amp;= - mgl \sin(\vartheta_k)\\
    \dot\vartheta_{k+1} &amp;amp;= \tau \ddot\vartheta_{k} + \dot\vartheta_{k}\\
    \vartheta_{k+1} &amp;amp;= \tau \dot\vartheta_{k} + \vartheta_{k}
\end{align*}&lt;/div&gt;
&lt;p&gt;
Unglücklicherweise hat dieses Verfahren ernsthafte Probleme mit der Energieerhaltung
und braucht sehr kleine &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; für brauchbare Ergebnisse.
Es gibt deutlich ausgefeiltere Methoden, wie den &lt;a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods#The_Runge.E2.80.93Kutta_method"&gt;klassischen Runge-Kutta&lt;/a&gt;
Algorithmus. Es gibt Methoden, den Zeitschritt &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; während der Simulation
adaptiv anzupassen, um nur wenig Rechenaufwand in den wenig fehleranfälligen
Phasen zu verbringen. Es gibt spezialisierte Methoden, die sehr gut für bestimmte Bewegungsgleichungen
funktionieren, wie &lt;a href="https://en.wikipedia.org/wiki/Verlet_integration"&gt;Velocity-Verlet&lt;/a&gt;,
der oft für Molekulardynamiksimulationen eingesetzt&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Chaotische Systeme haben in der Regel etwas kompliziertere Bewegungsgleichungen. Das oben abgebildete
Doppelpendel etwa wird, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;wie ich in einem anderen Post beschrieben habe&lt;/a&gt;
durch folgendes Ungetüm&amp;nbsp;beschrieben.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\theta_1 &amp;amp;= \frac{m_2 \cos(\theta_1 - \theta_2) (l_1 \sin(\theta_1 - \theta_2) \dot\theta_1^2 - g \sin(\theta_2)) + m_2 l_2 \sin(\theta_1 - \theta_2) \dot\theta_2^2 + (m_1 + m_2) g \sin(\theta_1)}{m_2 l_1 \cos^2(\theta_1 - \theta_2) - (m_1+m_2) l_1} \\
    \ddot\theta_2 &amp;amp;= \frac{m_2 l_2 \cos(\theta_1 - \theta_2) \sin(\theta_1 - \theta_2) \dot\theta_2^2 + (m_1+m_2) l_1 \sin(\theta_1 - \theta_2) \dot\theta_1^2 + (m_1+m_2) g \cos(\theta_1 - \theta_2) \sin(\theta_1) - (m_1+m_2) g \sin(\theta_2)}{(m_1+m_2) l_2 - m_2 l_2 \cos^2(\theta_1 - \theta_2)}
\end{align*}&lt;/div&gt;
&lt;p&gt;Anfangs empfiehlt es sich also etwas einfacheres und vertrauteres zu lösen,
wie den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Lorenz-Attraktor&lt;/a&gt;
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ \\
\end{align*}&lt;/div&gt;
&lt;p&gt;Oder das &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot{\vec{x}_1} &amp;amp;= -\frac{Gm_2}{\left(x_1 - x_2\right)^3} (\vec{x}_1 - \vec{x}_2) - \frac{Gm_3}{\left(x_1 - x_3\right)^3} (\vec{x}_1 - \vec{x}_3)\\
    \ddot{\vec{x}_2} &amp;amp;= -\frac{Gm_1}{\left(x_2 - x_1\right)^3} (\vec{x}_2 - \vec{x}_1) - \frac{Gm_3}{\left(x_2 - x_3\right)^3} (\vec{x}_2 - \vec{x}_3)\\
    \ddot{\vec{x}_3} &amp;amp;= -\frac{Gm_1}{\left(x_3 - x_1\right)^3} (\vec{x}_3 - \vec{x}_1) - \frac{Gm_2}{\left(x_3 - x_2\right)^3} (\vec{x}_3 - \vec{x}_2)\\
\end{align*}&lt;/div&gt;
&lt;p&gt;Da man das 3-Körperproblem trivial auf ein &lt;span class="math"&gt;\(N\)&lt;/span&gt;-Körperproblem erweitern kann,
habe ich hier ein &amp;#8220;Sonnensystem&amp;#8221; bzw. Bohrsches &amp;#8220;Atom&amp;#8221;-modell&amp;nbsp;simuliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sonnensystem" src="/img/planets.png"&gt;&lt;/p&gt;
&lt;p&gt;Um die obigen (bewegten) Bilder zu erzeugen und um ein bewegtes Doppelpendel
für meinen Schreibtisch zu haben, &amp;#8212; wennauch nur auf einem Bildschirm &amp;#8212; habe
ich in C++ einen adaptiven Runge-Kutta-4 Löser geschrieben, der mit den Qt
Zeichenprimitiven animiert&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Auch wenn der Code nicht sehr aufgeräumt ist und Startwerte im Quellcode
angepasst werden müssen, sind die Quellen auf GitHub:
&lt;a href="https://github.com/surt91/DGLshow"&gt;github.com/surt91/DGLshow&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="C++"></category><category term="Physik"></category><category term="Video"></category><category term="Bild"></category><category term="GitHub"></category><category term="Formel"></category><category term="Chaos"></category></entry><entry><title>Doppelpendel</title><link href="https://blog.schawe.me/double-pendulum.html" rel="alternate"></link><published>2014-03-19T11:27:00+01:00</published><updated>2014-03-19T11:27:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-03-19:/double-pendulum.html</id><summary type="html">&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;/video&gt;

&lt;p&gt;Das ist ein Doppelpendel. Ein Doppelpendel ist neben dem &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
und dem Lorenz-Attraktor [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;]
das Paradebeispiel für analytisch unlösbare Bewegungsgleichungen
und chaotisches Verhalten. Aus diesem Grund sollte ein Doppelpendel auf keinem
Schreibtisch fehlen und bietet sich als grandiose Geschenkidee für Physiker&amp;nbsp;an.&lt;/p&gt;
&lt;p&gt;Dass es analytisch unlösbar ist, lässt sich …&lt;/p&gt;</summary><content type="html">&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;/video&gt;

&lt;p&gt;Das ist ein Doppelpendel. Ein Doppelpendel ist neben dem &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
und dem Lorenz-Attraktor [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;]
das Paradebeispiel für analytisch unlösbare Bewegungsgleichungen
und chaotisches Verhalten. Aus diesem Grund sollte ein Doppelpendel auf keinem
Schreibtisch fehlen und bietet sich als grandiose Geschenkidee für Physiker&amp;nbsp;an.&lt;/p&gt;
&lt;p&gt;Dass es analytisch unlösbar ist, lässt sich mit einem nicht rigorosen Argument
anschaulich machen: Ein Blick auf die&amp;nbsp;Bewegungsgleichungen:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    (m_1 + m_2) l_1 \ddot\vartheta_1 + m_2 l_2 \ddot\vartheta_2 \cos(\vartheta_1 - \vartheta_2) + m_2 l_2 \dot\vartheta_2^2 \sin(\vartheta_1 - \vartheta_2) + g(m_1 + m_2) \sin(\vartheta_1) &amp;amp;= 0\\
    m_2 l_2 \ddot\vartheta_2 + m_2 l_1 \ddot\vartheta_1 \cos(\vartheta_1 - \vartheta_2) - m_2 l_1 \dot\vartheta_1^2 \sin(\vartheta_1 - \vartheta_2) + m_2 g \sin(\vartheta_2) &amp;amp;= 0
\end{align*}&lt;/div&gt;
&lt;p&gt;Das sind die Differentialgleichungen für die beiden Winkel &lt;span class="math"&gt;\(\vartheta_1\)&lt;/span&gt; und &lt;span class="math"&gt;\(\vartheta_2\)&lt;/span&gt;
des Doppelpendels. &lt;span class="math"&gt;\(m_i\)&lt;/span&gt; sind die beiden Massen und &lt;span class="math"&gt;\(l_i\)&lt;/span&gt; die&amp;nbsp;Fadenlängen.&lt;/p&gt;
&lt;p&gt;Unser Ziel ist es das obige Video zu erstellen, dazu müssen wir die Bahnkurve,
also &lt;span class="math"&gt;\(\vartheta_1(t)\)&lt;/span&gt; und &lt;span class="math"&gt;\(\vartheta_2(t)\)&lt;/span&gt; bestimmen.
Dazu müssen wir die obigen Gleichungen, die sich relativ simpel,
&lt;a href="/img/doppelpendel_math.webp"&gt;wenn auch mühsam, per Lagrange-Formalismus herleiten lassen&lt;/a&gt;,
zunächst nach den Winkelbeschleunigungen&amp;nbsp;aufgelösen.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\vartheta_1 &amp;amp;= \frac{m_2 \cos(\vartheta_1 - \vartheta_2) (l_1 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_1^2 - g \sin(\vartheta_2)) + m_2 l_2 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_2^2 + (m_1 + m_2) g \sin(\vartheta_1)}{m_2 l_1 \cos^2(\vartheta_1 - \vartheta_2) - (m_1+m_2) l_1} \\
    \ddot\vartheta_2 &amp;amp;= \frac{m_2 l_2 \cos(\vartheta_1 - \vartheta_2) \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_2^2 + (m_1+m_2) l_1 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_1^2 + (m_1+m_2) g \cos(\vartheta_1 - \vartheta_2) \sin(\vartheta_1) - (m_1+m_2) g \sin(\vartheta_2)}{(m_1+m_2) l_2 - m_2 l_2 \cos^2(\vartheta_1 - \vartheta_2)}
\end{align*}&lt;/div&gt;
&lt;p&gt;Diese Gleichungen sind durchaus sehr unhandlich und können nicht analytisch,
gelöst werden &amp;#8212; aber &lt;a href="https://blog.schawe.me/dglshow.html"&gt;numerisch ist es kein Problem&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Video"></category><category term="Bild"></category><category term="Formel"></category><category term="Chaos"></category></entry><entry><title>Ising Modell zur Bildentrauschung</title><link href="https://blog.schawe.me/ising-modell-zur-bildentrauschung.html" rel="alternate"></link><published>2013-12-22T12:37:00+01:00</published><updated>2013-12-22T12:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-22:/ising-modell-zur-bildentrauschung.html</id><summary type="html">&lt;p&gt;Eines der bekanntesten Modelle der statistischen Physik ist das &lt;a href="http://de.wikipedia.org/wiki/Ising-Modell"&gt;Ising-Modell&lt;/a&gt;. Es besteht aus
(klassischen) Spins auf einem Gitter im Wärmebad und soll magnetische
Eigenschaften von Festkörpern modellieren. Es zeigt nämlich in 2D und 3D
(und 4D &amp;#8230; ) einen Phasenübergang zweiter Ordnung von &amp;#8220;magnetisch&amp;#8221; zu
&amp;#8220;nicht magnetisch&amp;#8221;, so wie ferromagnetische Materialien, die …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eines der bekanntesten Modelle der statistischen Physik ist das &lt;a href="http://de.wikipedia.org/wiki/Ising-Modell"&gt;Ising-Modell&lt;/a&gt;. Es besteht aus
(klassischen) Spins auf einem Gitter im Wärmebad und soll magnetische
Eigenschaften von Festkörpern modellieren. Es zeigt nämlich in 2D und 3D
(und 4D &amp;#8230; ) einen Phasenübergang zweiter Ordnung von &amp;#8220;magnetisch&amp;#8221; zu
&amp;#8220;nicht magnetisch&amp;#8221;, so wie ferromagnetische Materialien, die oberhalb
der Curie Temperatur nicht mehr ferromagnetisch&amp;nbsp;sind.&lt;/p&gt;
&lt;p&gt;In einfachen Worten: Die Spins des Ising-Modells richten sich so aus
wie ihre Nachbarn und die Temperatur bringt sie wieder&amp;nbsp;durcheinander.&lt;/p&gt;
&lt;p&gt;Aber es wäre natürlich langweilig das Modell so zu benutzen, wie alle
anderen auch. Deshalb stelle ich hier eine Anwendung aus
&lt;a href="http://scholar.google.de/scholar?q=bishop+pattern+recognition+and+machine+learning&amp;amp;hl=de"&gt;Pattern Recgonition and Machine Learning&lt;/a&gt;
vor, die nichts mehr mit Magneten zu tun hat: Rauschunterdrückung in&amp;nbsp;Bildern.&lt;/p&gt;
&lt;p&gt;Andererseits bin ich Physiker und darf deshalb nichts machen, was direkt
nützlich wäre, also beschränke ich mich auf schwarz-weiße Bilder, die
man direkt auf das &amp;#8220;spin up&amp;#8221;-&amp;#8220;spin down&amp;#8221; des Ising-Modells abbilden&amp;nbsp;kann.&lt;/p&gt;
&lt;p&gt;Die Idee ist, das jeder Spin einem Pixel &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; entspricht. Dann koppelt man
die Spins des Ising-Modells &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; an die Pixel &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; des verrauschten Bildes
über einen zusätzlichen&amp;nbsp;Energie-Term
&lt;/p&gt;
&lt;div class="math"&gt;$$\mathcal{H} = - \beta \sum_{\left&amp;lt; i,j \right&amp;gt;} x_i x_j - \eta \sum_i x_i y_i.$$&lt;/div&gt;
&lt;p&gt;
Dabei bedeutet &lt;span class="math"&gt;\(\left&amp;lt; i,j \right&amp;gt;\)&lt;/span&gt;, dass man über alle Nachbarn von &lt;span class="math"&gt;\(i\)&lt;/span&gt;&amp;nbsp;summiert.&lt;/p&gt;
&lt;p&gt;Von diesem Modell kann man dann per &lt;a href="https://blog.schawe.me/simulatedsort.html"&gt;Simulated Annealing&lt;/a&gt;
den Grundzustand suchen oder man macht es sich einfach equilibriert bei &lt;span class="math"&gt;\(T=0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ising-Modell" class="invertable" src="/img/standaloneIsing.svg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Das Schema dazu wurde bereits in
&lt;a href="https://blog.schawe.me/oberflachenkachelung-mit-tikz.html"&gt;diesem Post&lt;/a&gt;
gezeigt. Graue Knoten entsprechen den Pixeln des verrauschten Bilds &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; und weiße
Knoten den Ising-Spins &lt;span class="math"&gt;\(x_i\)&lt;/span&gt;, die am Ende als Pixel des entrauschten Bilds
interpretiert&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Genug der Theorie. Es wird Zeit für pixelige Bilder. Leider hatte ich
kein verrauschtes Bild, also habe ich ein beliebiges Bild gemalt und 10%
aller Pixel&amp;nbsp;invertiert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vorher-Nachher Vergleich" class="invertable" src="/img/vorhernachher.png"&gt;&lt;/p&gt;
&lt;p&gt;Links das verrauschte Bild und rechts das entrauschte. Ja, nicht
perfekt. Und in dem zitierten Buch wird auf der gleichen Seite noch eine
sehr viel bessere Methode angesprochen. Aber die hatte nichts mit dem
Ising-Modell zu tun. Und man sieht ja auch eine Verbesserung.&amp;nbsp;Oder?&lt;/p&gt;
&lt;p&gt;Nebenbei bemerkt, kann man das Ising-Modell auch als
&lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;zellulären&lt;/a&gt; &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Automaten&lt;/a&gt; mit
zufälligem Element betrachten, denn jeder Spin ist eine Zelle, die nur
lokal von seinen Nachbarn und zufällig durch die Temperatur beeinflusst&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/7789753"&gt;Gist auf Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Physik"></category><category term="GitHub"></category><category term="Bild"></category></entry><entry><title>Depth First Search und Labyrinthe</title><link href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html" rel="alternate"></link><published>2013-12-15T12:30:00+01:00</published><updated>2013-12-15T12:30:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-15:/depth-first-search-und-labyrinthe.html</id><summary type="html">&lt;p&gt;Ein Algorithmus, von dem jeder schoneinmal gehört haben sollte, ist die
Tiefensuche (Depth First Search). Wenn man Zusammenhangskomponenten in einem
Graphen finden will oder nach einem bestimmten Knoten in einem Graphen sucht,
ist die Tiefensuche meist der einfachste und oft ein geeigneter Algorithmus
mit einer Zeitkomplexität &lt;span class="math"&gt;\(\mathcal{O}(N+M …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ein Algorithmus, von dem jeder schoneinmal gehört haben sollte, ist die
Tiefensuche (Depth First Search). Wenn man Zusammenhangskomponenten in einem
Graphen finden will oder nach einem bestimmten Knoten in einem Graphen sucht,
ist die Tiefensuche meist der einfachste und oft ein geeigneter Algorithmus
mit einer Zeitkomplexität &lt;span class="math"&gt;\(\mathcal{O}(N+M)\)&lt;/span&gt;, die linear in der Anzahl der
Knoten und der Kanten ist. Da man gefühlt alle Graphalgorithmen am besten
rekursiv beschreiben kann, folgt hier eine (nichtrigorose)&amp;nbsp;Beschreibung.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Man startet die Tiefensuche an einem beliebigen&amp;nbsp;Knoten.&lt;/li&gt;
&lt;li&gt;Bei jedem noch nicht besuchten Nachbarn startet man wieder eine&amp;nbsp;Tiefensuche.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aber was macht man im Alltag mit einer Tiefensuche?
Meine Antwort darauf ist: Labyrinthe&amp;nbsp;bauen.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/maze.png"&gt;
&lt;source src="/vid/maze.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Bei dieser Gelegenheit muss &lt;code&gt;NetworkX&lt;/code&gt; erwähnt werden. Ein Python
Modul, das sehr schöne Klassen für Graphen bereitstellt und perfekt geeignet
ist, um schnell Prototypen von Graphalgorithmen zu&amp;nbsp;testen.&lt;/p&gt;
&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/7790052"&gt;Gist auf GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category></entry><entry><title>Oberflächenkachelung mit TikZ</title><link href="https://blog.schawe.me/oberflachenkachelung-mit-tikz.html" rel="alternate"></link><published>2013-12-08T12:37:00+01:00</published><updated>2013-12-08T12:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-08:/oberflachenkachelung-mit-tikz.html</id><summary type="html">&lt;p&gt;Man arbeitet an einem Seminarvortrag und will ein Modell auf einem
periodischen Gitter erklären. Natürlich kann man sich nicht entscheiden,
wie viele &lt;a href="http://de.wikipedia.org/wiki/Elementarzelle"&gt;Elementarzellen&lt;/a&gt;
man darstellen möchte. Außerdem ist es einem zuwider mehrere
Elementarzellen per Hand zu&amp;nbsp;schreiben.&lt;/p&gt;
&lt;p&gt;Wer kennt das&amp;nbsp;nicht?&lt;/p&gt;
&lt;p&gt;Glücklicherweise gibt es eine Lösung. Weil man alle seine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Man arbeitet an einem Seminarvortrag und will ein Modell auf einem
periodischen Gitter erklären. Natürlich kann man sich nicht entscheiden,
wie viele &lt;a href="http://de.wikipedia.org/wiki/Elementarzelle"&gt;Elementarzellen&lt;/a&gt;
man darstellen möchte. Außerdem ist es einem zuwider mehrere
Elementarzellen per Hand zu&amp;nbsp;schreiben.&lt;/p&gt;
&lt;p&gt;Wer kennt das&amp;nbsp;nicht?&lt;/p&gt;
&lt;p&gt;Glücklicherweise gibt es eine Lösung. Weil man alle seine Aufzeichnungen
sowieso in LaTeX setzt, benutzt
man &lt;a href="http://www.texample.net/tikz/examples/"&gt;TikZ&lt;/a&gt;, bastelt eine
Elementarzelle und kachelt sie über die Ebene, bis man das Gefühl hat,
dass es genau passend für die Präsentation ist.
Als Bonus kann man noch mit den Parametern spielen, um einen möglichst
überzeugenden pseudo 3D-Effekt zu&amp;nbsp;erzielen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;standalone&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikz&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\shear&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.2&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\height&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;1.0&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\radius&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.1&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\xspacing&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\yspacing&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.5&lt;span class="nb"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;% two-dimensional lattice, with three dimensional basis&lt;/span&gt;
        &lt;span class="c"&gt;% decreasing counter, otherwise there will be lines through the circles&lt;/span&gt;
        &lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\x&lt;/span&gt; in &lt;span class="nb"&gt;{&lt;/span&gt;4,...,0&lt;span class="nb"&gt;}{&lt;/span&gt;
            &lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\y&lt;/span&gt;/&lt;span class="k"&gt;\dx&lt;/span&gt; in &lt;span class="nb"&gt;{&lt;/span&gt;3,...,0&lt;span class="nb"&gt;}{&lt;/span&gt;
                &lt;span class="c"&gt;% primitive vectors&lt;/span&gt;
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;-&lt;span class="k"&gt;\xspacing&lt;/span&gt;/2 , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            )
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;+&lt;span class="k"&gt;\xspacing&lt;/span&gt;/2, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            );
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;-&lt;span class="k"&gt;\shear&lt;/span&gt;/2    , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;-&lt;span class="k"&gt;\yspacing&lt;/span&gt;/2)
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;+&lt;span class="k"&gt;\shear&lt;/span&gt;/2   , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\yspacing&lt;/span&gt;/2);
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;             , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            )
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;            , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;    );

                &lt;span class="c"&gt;% base&lt;/span&gt;
                &lt;span class="k"&gt;\fill&lt;/span&gt;&lt;span class="na"&gt;[white]&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;        ) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
                &lt;span class="k"&gt;\draw&lt;/span&gt;        (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;        ) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);

                &lt;span class="k"&gt;\fill&lt;/span&gt;&lt;span class="na"&gt;[gray]&lt;/span&gt;  (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
                &lt;span class="k"&gt;\draw&lt;/span&gt;        (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
            &lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Isingmodell mit Kopplung" class="invertable" src="/img/standaloneIsing.svg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Und damit wäre wiedereinmal die Vorliebe dieses Blogs für &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;schwarz-weiße
Bilder&lt;/a&gt;,
die entweder &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Linien und Kreise&lt;/a&gt;
oder &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;zu große&lt;/a&gt;
&lt;a href="https://blog.schawe.me/rule-90.html"&gt;Pixel&lt;/a&gt;
enthalten,&amp;nbsp;bestätigt.&lt;/p&gt;</content><category term="Code"></category><category term="LaTeX"></category><category term="TikZ"></category><category term="Bild"></category><category term="Code"></category></entry><entry><title>Rule 90</title><link href="https://blog.schawe.me/rule-90.html" rel="alternate"></link><published>2013-12-01T15:11:00+01:00</published><updated>2013-12-01T15:11:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-01:/rule-90.html</id><summary type="html">&lt;p&gt;Vor kurzem habe ich angefangen &amp;#8220;&lt;a href="http://www.greenteapress.com/complexity/index.html"&gt;Think Complexity&lt;/a&gt;&amp;#8221; zu
lesen &amp;#8212; ein leicht verständliches, interessantes Buch, in dem unter
anderem &lt;a href="http://de.wikipedia.org/wiki/Zellul%C3%A4rer_Automat"&gt;Zelluläre Automaten&lt;/a&gt;
angesprochen werden. Und zwar die &lt;a href="http://www.stephenwolfram.com/publications/academic/?cat=cellular-automata"&gt;von Stephen Wolfram&lt;/a&gt;
&amp;#8212; ja der Stephen Wolfram, der
&lt;a href="http://www.wolfram.com/mathematica/"&gt;Mathematica&lt;/a&gt; und
&lt;a href="http://www.wolframalpha.com/"&gt;Wolfram|Alpha&lt;/a&gt; entwickelt hat (vermutlich
jedoch nicht allein).
Zelluläre Automaten eignen sich natürlich sehr gut …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor kurzem habe ich angefangen &amp;#8220;&lt;a href="http://www.greenteapress.com/complexity/index.html"&gt;Think Complexity&lt;/a&gt;&amp;#8221; zu
lesen &amp;#8212; ein leicht verständliches, interessantes Buch, in dem unter
anderem &lt;a href="http://de.wikipedia.org/wiki/Zellul%C3%A4rer_Automat"&gt;Zelluläre Automaten&lt;/a&gt;
angesprochen werden. Und zwar die &lt;a href="http://www.stephenwolfram.com/publications/academic/?cat=cellular-automata"&gt;von Stephen Wolfram&lt;/a&gt;
&amp;#8212; ja der Stephen Wolfram, der
&lt;a href="http://www.wolfram.com/mathematica/"&gt;Mathematica&lt;/a&gt; und
&lt;a href="http://www.wolframalpha.com/"&gt;Wolfram|Alpha&lt;/a&gt; entwickelt hat (vermutlich
jedoch nicht allein).
Zelluläre Automaten eignen sich natürlich sehr gut, pixelige Bilder zu
erstellen, wie der
&lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conways-Game-of-Life-Post&lt;/a&gt;
beweist. Daher, lasse ich erstmal ein Bild&amp;nbsp;sprechen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wolframs Rule 90" class="invertable" src="/img/wolfram090.png"&gt;&lt;/p&gt;
&lt;p&gt;Die Idee ist, dass man mit einem eindimensionalen Zustand startet, und
einen neuen Zustand daraus mit lokalen Regeln, die je einen rechten und
linken Nachbarn berücksichtigen, erzeugt. Stellt man diese Zustände
untereinander da, entstehen Strukturen, wie die, die an ein
&lt;a href="http://de.wikipedia.org/wiki/Sierpinski-Dreieck"&gt;Sierpinski-Dreieck&lt;/a&gt;
erinnert.
Die &lt;a href="http://www.wolframalpha.com/input/?i=rule+90"&gt;Erklärung&lt;/a&gt;, wie genau
diese Regeln lauten, und wie sie definiert sind, überlasse ich
passenderweise&amp;nbsp;Wolfram|Alpha.&lt;/p&gt;
&lt;p&gt;Und damit ich auch etwas sage, das tiefsinnig erscheint: Die Dreieckige
Form entspricht übrigens
dem &lt;a href="http://de.wikipedia.org/wiki/Lichtkegel"&gt;Vorwärtslichtkegel&lt;/a&gt; des
Startwertes in der ersten Zeile. Die &lt;span class="math"&gt;\(y\)&lt;/span&gt;-Achse entspricht hier schließlich
einer Zeit und die &amp;#8220;Lichtgeschwindigkeit&amp;#8221;, mit der Beeinflussungen
propagieren können, ist 1 Pixel pro&amp;nbsp;Iteration.&lt;/p&gt;
&lt;p&gt;Den Quellcode gibt es natürlich bei
&lt;a href="https://github.com/surt91/-bungen-in-C/blob/master/numeric/cellular_automata.c"&gt;GitHub&lt;/a&gt;.
Wenn auch nur in einem &amp;#8220;kleine Fingerübungen in&amp;nbsp;C&amp;#8221;-Repo.&lt;/p&gt;
&lt;p&gt;Für Liebhaber, hier noch eins im original 1982&amp;nbsp;Retro-Look.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wolframs Rule 150" src="/img/wolfram150.png"&gt;&lt;/p&gt;
&lt;p&gt;Passend zur Jahreszeit, wie ich&amp;nbsp;finde.&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Bild"></category><category term="GitHub"></category></entry><entry><title>Lissajous Figuren in Gnuplot</title><link href="https://blog.schawe.me/lissajous-figuren-in-gnuplot.html" rel="alternate"></link><published>2013-10-09T13:17:00+02:00</published><updated>2013-10-09T13:17:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-10-09:/lissajous-figuren-in-gnuplot.html</id><summary type="html">&lt;p&gt;Da nicht jeder das nötige Kleingeld für ein Oszilloskop und
Funktionsgenerator hat, aber jeder gerne eine
&lt;a href="http://de.wikipedia.org/wiki/Lissajous-Figur"&gt;Lissajous-Figur&lt;/a&gt; laufen
haben möchte, liefere ich hier den entsprechenden Gnuplot&amp;nbsp;Code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;reset&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lissajous.gif&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6250&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;yr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;parametric&lt;/span&gt;
&lt;span class="k"&gt;unset …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Da nicht jeder das nötige Kleingeld für ein Oszilloskop und
Funktionsgenerator hat, aber jeder gerne eine
&lt;a href="http://de.wikipedia.org/wiki/Lissajous-Figur"&gt;Lissajous-Figur&lt;/a&gt; laufen
haben möchte, liefere ich hier den entsprechenden Gnuplot&amp;nbsp;Code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;reset&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lissajous.gif&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6250&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;yr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;parametric&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xtics&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ytics&lt;/span&gt;

&lt;span class="nf"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;t&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;t&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.999&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;animateLissajou.gp&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Datei &amp;#8220;&lt;code&gt;animateLissajou.gp&lt;/code&gt;&amp;#8221; sieht dann so&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;trange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;plot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;notitle&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;reread&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Stark angelehnt an diesen
&lt;a href="http://gnuplot-surprising.blogspot.de/2011/09/creating-gif-animation-using-gnuplot.html"&gt;Blogeintrag&lt;/a&gt;.
Das Ergenis sieht dann so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lissajous Figur" class="invertable" src="/img/lissajous.gif"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Gnuplot"></category><category term="Code"></category><category term="Video"></category></entry><entry><title>Bootstrapping</title><link href="https://blog.schawe.me/bootstrapping.html" rel="alternate"></link><published>2013-09-26T19:13:00+02:00</published><updated>2013-09-26T19:13:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-09-26:/bootstrapping.html</id><summary type="html">&lt;p&gt;Wer kennt das nicht: Man hat sich ein Python Skript geschrieben, um
seine Daten per &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)"&gt;Bootstrap Resampling&lt;/a&gt;
auszuwerten und stellt fest, dass das Konstrukt zur Bildung des &amp;#8220;Samples
mit&amp;nbsp;Ersetzungen&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;einfach nicht schnell genug ist.&lt;br&gt;
Aber glücklicherweise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wer kennt das nicht: Man hat sich ein Python Skript geschrieben, um
seine Daten per &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)"&gt;Bootstrap Resampling&lt;/a&gt;
auszuwerten und stellt fest, dass das Konstrukt zur Bildung des &amp;#8220;Samples
mit&amp;nbsp;Ersetzungen&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;einfach nicht schnell genug ist.&lt;br&gt;
Aber glücklicherweise gibt es &lt;a href="http://www.numpy.org/"&gt;numpy&lt;/a&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das ist &amp;#8212; zumindest in meinem Anwendungsfall &amp;#8212; spürbar schneller. Ich
werde in Zukunft also immer optimale Fehlerbalken&amp;nbsp;erzeugen.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Statistik"></category><category term="Code"></category></entry><entry><title>Seltsamer Attraktor</title><link href="https://blog.schawe.me/seltsamer-attraktor.html" rel="alternate"></link><published>2012-10-11T00:24:00+02:00</published><updated>2012-10-11T00:24:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-10-11:/seltsamer-attraktor.html</id><summary type="html">&lt;p&gt;Zuvor habe ich bereits den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Schmetterlingseffekt&lt;/a&gt;
erwähnt. Um den Zusammenhang mit Chaos zu zeigen, betrachten wir folgendes
Video von der Projektion in die y-z-Ebene von 13
Teilchen, die den Attraktor&amp;nbsp;durchlaufen.&lt;/p&gt;
&lt;video controls="controls" poster="/img/lorenz13yz.png" height="624" width="624"&gt;
&lt;source src="/vid/lorenz13yz.m4v" /&gt;
&lt;source src="/vid/lorenz13yz.mp4" type="video/mp4" /&gt;
&lt;source src="/vid/lorenz13yz.webm" type="video/webm" /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Alle Teilchen starten auf fast dem selben Punkt, aber nehmen sehr …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Zuvor habe ich bereits den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Schmetterlingseffekt&lt;/a&gt;
erwähnt. Um den Zusammenhang mit Chaos zu zeigen, betrachten wir folgendes
Video von der Projektion in die y-z-Ebene von 13
Teilchen, die den Attraktor&amp;nbsp;durchlaufen.&lt;/p&gt;
&lt;video controls="controls" poster="/img/lorenz13yz.png" height="624" width="624"&gt;
&lt;source src="/vid/lorenz13yz.m4v" /&gt;
&lt;source src="/vid/lorenz13yz.mp4" type="video/mp4" /&gt;
&lt;source src="/vid/lorenz13yz.webm" type="video/webm" /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Alle Teilchen starten auf fast dem selben Punkt, aber nehmen sehr
verschiedene Wege. Nach kurzer Zeit kann man den einzelnen Teilchen nicht mehr
ansehen, dass sie fast die gleichen Anfangsbedingungen&amp;nbsp;hatten.&lt;/p&gt;
&lt;p&gt;Lorenz war Meteorologe und sein&amp;nbsp;Differentialgleichungssystem
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ, \\
\end{align}&lt;/div&gt;
&lt;p&gt;
das dieses chaotische Verhalten zeigt, sollte die Atmosphäre&amp;nbsp;modellieren.&lt;/p&gt;
&lt;p&gt;Jetzt kann man verstehen, was es mit dem Schmetterling aus &lt;em&gt;Jurassic Park&lt;/em&gt;
auf sich&amp;nbsp;hat.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Er bewegt in Peking die Flügel, und
im Central Park gibt&amp;#8217;s Regen statt&amp;nbsp;Sonne.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Dr. Ian Malcolm&lt;/cite&gt; (1993)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sein Flügelschlag ändert den Zustand eines chaotischen
Systems, dem Wetter, ein wenig und nach einiger Zeit hat das System einen
grundlegend anderen Weg eingeschlagen, als ohne diesen&amp;nbsp;Flügelschlag.&lt;/p&gt;
&lt;p&gt;Dennoch sieht das Video irgendwie geordnet aus. Fast schon vorhersagbar.
&lt;a href="http://de.wikipedia.org/wiki/Chaosforschung#Der_seltsame_Attraktor"&gt;Seltsam.&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Video"></category><category term="Physik"></category><category term="Chaos"></category></entry><entry><title>Dreikörperproblem</title><link href="https://blog.schawe.me/dreikorperproblem.html" rel="alternate"></link><published>2012-06-03T16:21:00+02:00</published><updated>2012-06-03T16:21:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-06-03:/dreikorperproblem.html</id><summary type="html">&lt;p&gt;Nein, ich habe keine analytische Lösung dafür gefunden. (Soweit ich mich
erinnere, hat Poincaré bewiesen, dass es nicht lösbar ist.)
Aber ich habe eine numerische Lösung mit dem vorher vorgestellten
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Runge-Kutta Löser&lt;/a&gt;
erstellt. Und ich habe einen hübschen Film daraus&amp;nbsp;gemacht.&lt;/p&gt;
&lt;video controls="controls" height="600" width="600"&gt;
&lt;source src="/vid/dreiKorper.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;source src="/vid/dreiKorper.webm" type="video/webm"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Als …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nein, ich habe keine analytische Lösung dafür gefunden. (Soweit ich mich
erinnere, hat Poincaré bewiesen, dass es nicht lösbar ist.)
Aber ich habe eine numerische Lösung mit dem vorher vorgestellten
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Runge-Kutta Löser&lt;/a&gt;
erstellt. Und ich habe einen hübschen Film daraus&amp;nbsp;gemacht.&lt;/p&gt;
&lt;video controls="controls" height="600" width="600"&gt;
&lt;source src="/vid/dreiKorper.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;source src="/vid/dreiKorper.webm" type="video/webm"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Als Standbild ist es nicht ganz so ästhetisch, wie der
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Lorenz-Attraktor&lt;/a&gt;,
aber animiert ist es &amp;#8212; meiner Meinung nach &amp;#8212; wunderbar&amp;nbsp;anzusehen.&lt;/p&gt;
&lt;p&gt;Und hier die Startwerte: (bei einer Gravitationskonstanten von 1)
Blau: &lt;span class="math"&gt;\(M=5, x_0=0, y_0=0, v_x0=0, v_y0=0\)&lt;/span&gt;
Rot : &lt;span class="math"&gt;\(M=1, x_0=1, y_0=0, v_x0=0, v_y0=1\)&lt;/span&gt;
Grün: &lt;span class="math"&gt;\(M=1, x_0=1, y_0=1, v_x0=1,&amp;nbsp;v_y0=0\)&lt;/span&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Video"></category><category term="Chaos"></category></entry><entry><title>Schmetterlingseffekt</title><link href="https://blog.schawe.me/schmetterlingseffekt.html" rel="alternate"></link><published>2012-05-15T23:04:00+02:00</published><updated>2012-05-15T23:04:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-05-15:/schmetterlingseffekt.html</id><summary type="html">&lt;p&gt;Differentialgleichungen numerisch zu lösen macht mehr Spaß, als man
erwarten würde, wenn man es hört. Und sobald man den ersten
&lt;a href="http://de.wikipedia.org/wiki/Klassisches_Runge-Kutta-Verfahren"&gt;Runge-Kutta&lt;/a&gt;-Algorithmus
in einer kommerziellen Interpretersprache geschrieben hat, bemerkt man,
dass dieses Skript doch recht lange&amp;nbsp;braucht.&lt;/p&gt;
&lt;p&gt;Für dieses Problem gibt es zwei Lösungen: Entweder wird man zum Guru und …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Differentialgleichungen numerisch zu lösen macht mehr Spaß, als man
erwarten würde, wenn man es hört. Und sobald man den ersten
&lt;a href="http://de.wikipedia.org/wiki/Klassisches_Runge-Kutta-Verfahren"&gt;Runge-Kutta&lt;/a&gt;-Algorithmus
in einer kommerziellen Interpretersprache geschrieben hat, bemerkt man,
dass dieses Skript doch recht lange&amp;nbsp;braucht.&lt;/p&gt;
&lt;p&gt;Für dieses Problem gibt es zwei Lösungen: Entweder wird man zum Guru und
wendet irgendeine okkulte Matlab-Magie an, um das Programm schneller
laufen zu lassen, oder man schreibt das Programm in einer schönen
Sprache neu. In C zum&amp;nbsp;Beispiel.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/lorenzattraktor.png"&gt;&lt;img alt="Lorenzattraktor" src="/img/lorenzattraktor1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich habe mich für den einfachen Weg
entschieden und wenig überraschend eine Tempoverbesserung von Faktor
&lt;span class="math"&gt;\(\sim 140\)&lt;/span&gt; festgestellt. Jedenfalls für diesen
&lt;a href="http://de.wikipedia.org/wiki/Lorenzattraktor"&gt;Lorenzattraktor&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ \\
\end{align}&lt;/div&gt;
&lt;p&gt;
Geplottet habe ich die Werte dann mit &lt;a href="http://matplotlib.sourceforge.net/examples/mplot3d/lines3d_demo.html"&gt;Python und matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Warum ich den Titel
&amp;#8220;&lt;a href="http://de.wikipedia.org/wiki/Schmetterlingseffekt#Wissenschaftlicher_Hintergrund"&gt;Schmetterlingseffekt&lt;/a&gt;&amp;#8221;
gewählt habe? Naja, das Bild hier sieht ein wenig nach einem
Schmetterling aus. Und tatsächlich wurde der Schmetterlingseffekt nach diesem
Differentialgleichungssystem benannt &amp;#8212; und nicht nach der Geschichte aus
&lt;em&gt;Jurassic Park&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Er bewegt in Peking die Flügel, und
im Central Park gibt&amp;#8217;s Regen statt&amp;nbsp;Sonne.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Dr. Ian Malcolm&lt;/cite&gt; (1993)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wie genau der &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;Lorenzattraktor mit Chaos zusammenhängt, habe ich in diesem
Post dargestellt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Der Quellcode ist als &lt;a href="https://gist.github.com/surt91/54cdc0bcd86bae19c22b4856889ea519"&gt;Gist auf GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="C"></category><category term="Bild"></category><category term="Python"></category><category term="GitHub"></category><category term="Chaos"></category></entry><entry><title>mSnake - Noch ein Snake Clone</title><link href="https://blog.schawe.me/msnake.html" rel="alternate"></link><published>2012-04-22T14:50:00+02:00</published><updated>2012-04-22T14:50:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-04-22:/msnake.html</id><summary type="html">&lt;p&gt;Da ich gerade in der Uni mit Matlab zu tun habe, präsentiere ich &amp;#8220;stolz&amp;#8221;
&lt;code&gt;mSnake&lt;/code&gt;. (&lt;a href="https://github.com/surt91/mSnake"&gt;Quellen bei Github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/msnake.png"&gt;&lt;img alt="mSnake" height="286" src="/img/msnake.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Da ich so etwas schon &lt;a href="https://blog.schawe.me/snake.html"&gt;in C&lt;/a&gt; und
&lt;a href="https://blog.schawe.me/pysnake.html"&gt;in Python&lt;/a&gt;
geschrieben habe, möchte ich noch zum Ausdruck bringen, dass mir Python
davon am besten gefällt.
Matlab ist irgendwie anders. Vom Syntax ist …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da ich gerade in der Uni mit Matlab zu tun habe, präsentiere ich &amp;#8220;stolz&amp;#8221;
&lt;code&gt;mSnake&lt;/code&gt;. (&lt;a href="https://github.com/surt91/mSnake"&gt;Quellen bei Github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/msnake.png"&gt;&lt;img alt="mSnake" height="286" src="/img/msnake.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Da ich so etwas schon &lt;a href="https://blog.schawe.me/snake.html"&gt;in C&lt;/a&gt; und
&lt;a href="https://blog.schawe.me/pysnake.html"&gt;in Python&lt;/a&gt;
geschrieben habe, möchte ich noch zum Ausdruck bringen, dass mir Python
davon am besten gefällt.
Matlab ist irgendwie anders. Vom Syntax ist es C und Python gar nicht
mal unähnlich, dennoch sieht der Code (meiner jedenfalls) ganz anders
aus: Aufgrund vieler spezialisierter Matrix Funktionen, ist im gesamten
Programm nur eine Schleife enthalten: Die while-Schleife, die abbricht,
wenn man verloren hat. Ob das jetzt gut oder schlecht&amp;nbsp;ist&amp;#8230;&lt;/p&gt;</content><category term="Code"></category><category term="Matlab"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>PySnake</title><link href="https://blog.schawe.me/pysnake.html" rel="alternate"></link><published>2011-12-27T11:37:00+01:00</published><updated>2011-12-27T11:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-12-27:/pysnake.html</id><summary type="html">&lt;p&gt;Weihnachten. Auch wenn man sein Studium sehr mag, ist es doch
schön, wenn man mal zwei Wochen frei hat (&amp;#8230;als ob ich das
irgendjemandem erklären müsste).
Man kann sich um Dinge kümmern, die man immer nochmal machen wollte.
Da ich ein Snake-Fan bin, habe ich &lt;a href="https://blog.schawe.me/snake.html"&gt;noch eine&lt;/a&gt;
Version&amp;nbsp;geschrieben.&lt;/p&gt;
&lt;video controls loop height="384" width="432"&gt;
&lt;source src="/vid/pySnake.webm" type="video/webm"&gt;&lt;/source&gt;
&lt;source src="/vid/pySnake.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your …&lt;/video&gt;</summary><content type="html">&lt;p&gt;Weihnachten. Auch wenn man sein Studium sehr mag, ist es doch
schön, wenn man mal zwei Wochen frei hat (&amp;#8230;als ob ich das
irgendjemandem erklären müsste).
Man kann sich um Dinge kümmern, die man immer nochmal machen wollte.
Da ich ein Snake-Fan bin, habe ich &lt;a href="https://blog.schawe.me/snake.html"&gt;noch eine&lt;/a&gt;
Version&amp;nbsp;geschrieben.&lt;/p&gt;
&lt;video controls loop height="384" width="432"&gt;
&lt;source src="/vid/pySnake.webm" type="video/webm"&gt;&lt;/source&gt;
&lt;source src="/vid/pySnake.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Ich würde euch zwar gerne erzählen, dass ich die Schlange da so
geschickt gesteuert habe, andererseits möchte ich auch nicht den
&amp;#8220;Automatikmodus&amp;#8221;&amp;nbsp;verschweigen.&lt;/p&gt;
&lt;p&gt;Im Gegensatz zum &lt;a href="https://blog.schawe.me/snake.html"&gt;Konsolen/ncurses Snake&lt;/a&gt;,
das in C geschrieben war, ist
diese Version jetzt in Python3 mit &lt;span class="caps"&gt;QT4&lt;/span&gt; (pyqt) als Gui Toolkit&amp;nbsp;ausgestattet.&lt;/p&gt;
&lt;p&gt;Quellen auf &lt;a href="https://github.com/surt91/PySnake"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category><category term="Game"></category><category term="Snake"></category></entry><entry><title>Snake</title><link href="https://blog.schawe.me/snake.html" rel="alternate"></link><published>2011-10-03T14:16:00+02:00</published><updated>2011-10-03T14:16:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-10-03:/snake.html</id><summary type="html">&lt;p&gt;Und wenn ich Snake sage, meine ich das Beste, was Nokia Handys zu bieten
haben. Jedenfalls vor 10 Jahren &amp;#8212; vermutlich immer noch. Aber weil ich
kein Nokia Handy habe, habe ich mir Snake schnell selbst geschrieben &amp;#8212; in&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snake" src="/img/snake_scr.png"&gt;&lt;/p&gt;
&lt;p&gt;Jetzt gibt es eine neue Version, die auf
&lt;a href="http://de.wikipedia.org/wiki/Ncurses"&gt;ncurses&lt;/a&gt; aufsetzt. Neben der …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Und wenn ich Snake sage, meine ich das Beste, was Nokia Handys zu bieten
haben. Jedenfalls vor 10 Jahren &amp;#8212; vermutlich immer noch. Aber weil ich
kein Nokia Handy habe, habe ich mir Snake schnell selbst geschrieben &amp;#8212; in&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snake" src="/img/snake_scr.png"&gt;&lt;/p&gt;
&lt;p&gt;Jetzt gibt es eine neue Version, die auf
&lt;a href="http://de.wikipedia.org/wiki/Ncurses"&gt;ncurses&lt;/a&gt; aufsetzt. Neben der
verbesserten &amp;#8220;Grafik&amp;#8221; kann man jetzt auch die Pfeiltasten zur Steuerung
benutzen. Außerdem wirkt es sehr viel&amp;nbsp;eleganter.&lt;/p&gt;
&lt;p&gt;Der Code ist auf &lt;a href="https://github.com/surt91/snake"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Conway’s Game of Life</title><link href="https://blog.schawe.me/conways-game-of-life.html" rel="alternate"></link><published>2011-09-27T13:57:00+02:00</published><updated>2011-09-27T13:57:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-09-27:/conways-game-of-life.html</id><summary type="html">&lt;p&gt;Damit man mental nicht ganz einrostet, habe ich gestern Abend
&lt;a href="http://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;
in C geschrieben (&lt;a href="https://github.com/surt91/conway"&gt;GitHub&lt;/a&gt;). Mit
&lt;a href="http://cairographics.org/"&gt;cairo&lt;/a&gt; (deren Logo eine stabile
Konfiguration von Conway&amp;#8217;s Game of Life ist) werden die einzelnen Runden dann als
&lt;code&gt;.png&lt;/code&gt; gespeichert. Und wenn ihr selber ein paar Startkonfigurartionen
schreiben wollt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Damit man mental nicht ganz einrostet, habe ich gestern Abend
&lt;a href="http://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;
in C geschrieben (&lt;a href="https://github.com/surt91/conway"&gt;GitHub&lt;/a&gt;). Mit
&lt;a href="http://cairographics.org/"&gt;cairo&lt;/a&gt; (deren Logo eine stabile
Konfiguration von Conway&amp;#8217;s Game of Life ist) werden die einzelnen Runden dann als
&lt;code&gt;.png&lt;/code&gt; gespeichert. Und wenn ihr selber ein paar Startkonfigurartionen
schreiben wollt, sollte der Quellcode nicht allzu undurchschaubar&amp;nbsp;sein.&lt;/p&gt;
&lt;p&gt;Hier ein paar Ergebnisse mit imagemagick animiert:
&lt;code&gt;convert -delay 20 ./*png ./out2.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="HWSS" class="invertable" src="/img/conway1.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pulsator" class="invertable" src="/img/conway2.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Oktagon" class="invertable" src="/img/conway3.gif"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="GitHub"></category><category term="C"></category><category term="Video"></category></entry><entry><title>Der grüne Punkt</title><link href="https://blog.schawe.me/der-grune-punkt.html" rel="alternate"></link><published>2011-09-17T08:23:00+02:00</published><updated>2011-09-17T08:23:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-09-17:/der-grune-punkt.html</id><content type="html">&lt;p&gt;&lt;img alt="Der Grüne Punkt" src="/img/grunerPunkt.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Das Yin und Yang der&amp;nbsp;Moderne.&lt;/p&gt;</content><category term="Misc"></category><category term="Bild"></category></entry><entry><title>Regenbogen</title><link href="https://blog.schawe.me/regenbogen.html" rel="alternate"></link><published>2011-07-11T14:03:00+02:00</published><updated>2011-07-11T14:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-07-11:/regenbogen.html</id><content type="html">&lt;p&gt;Man sollte alles nach Wellenlänge&amp;nbsp;sortieren!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stifte sortiert nach Wellenlänge" src="/img/regenbogen.jpg"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Bild"></category></entry><entry><title>Come to the dark side, our theme song is better</title><link href="https://blog.schawe.me/come-to-the-dark-side-our-theme-song-is-better.html" rel="alternate"></link><published>2011-04-05T11:22:00+02:00</published><updated>2011-04-05T11:22:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-04-05:/come-to-the-dark-side-our-theme-song-is-better.html</id><content type="html">&lt;p&gt;Der Imperiale Marsch, gespielt auf einem Telefonlautsprecher von einem
&lt;span class="caps"&gt;AVR&lt;/span&gt; &lt;span class="caps"&gt;ATMEGA8&lt;/span&gt;.&lt;/p&gt;
&lt;video controls="controls" height="240" type="video/webm" width="320"&gt;
&lt;source src="/vid/IM2.webm"&gt;&lt;/source&gt;
&lt;source src="/vid/IM2.ogv"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Code für den Microcontroller ist als &lt;a href="https://gist.github.com/surt91/91e65a50b5a0d3a59f5eacb967bea039"&gt;Gist auf GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Tech"></category><category term="C"></category><category term="Video"></category><category term="GitHub"></category><category term="Microcontroller"></category></entry><entry><title>ssh-password</title><link href="https://blog.schawe.me/ssh-password.html" rel="alternate"></link><published>2010-12-11T18:26:00+01:00</published><updated>2010-12-11T18:26:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-12-11:/ssh-password.html</id><content type="html">&lt;p&gt;Um das Passwort des ssh-rsa-Schlüssels zu&amp;nbsp;ändern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;id_rsa&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>ssh password</title><link href="https://blog.schawe.me/en/ssh-password.html" rel="alternate"></link><published>2010-12-11T18:26:00+01:00</published><updated>2010-12-11T18:26:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-12-11:/en/ssh-password.html</id><content type="html">&lt;p&gt;Change the password of your &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;keypair.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;id_rsa&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snip"></category></entry><entry><title>TicTacToe</title><link href="https://blog.schawe.me/tictactoe.html" rel="alternate"></link><published>2010-05-01T16:49:00+02:00</published><updated>2010-05-01T16:49:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-05-01:/tictactoe.html</id><content type="html">&lt;p&gt;&lt;center&gt;&lt;object style="background-color:#bbbbbb;border-style:dashed;border-color:#000" id="Frame" data="/js/ttt/ttt.html" width="200" height="270"&gt;&lt;/object&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="Code"></category><category term="JavaScript"></category><category term="Game"></category></entry><entry><title>Binär Uhr</title><link href="https://blog.schawe.me/binar-uhr.html" rel="alternate"></link><published>2009-11-13T18:46:00+01:00</published><updated>2009-11-13T18:46:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2009-11-13:/binar-uhr.html</id><content type="html">&lt;p&gt;&lt;center&gt;&lt;object id="Frame" style="background-color:#ddd" data="/js/uhr/uhr.html" width="180" height="115"&gt;&lt;/object&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="JavaScript"></category></entry></feed>