<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>möchte­gern­geek - Code</title><link href="https://blog.schawe.me/" rel="alternate"></link><link href="https://blog.schawe.me/feeds/code.atom.xml" rel="self"></link><id>https://blog.schawe.me/</id><updated>2023-09-23T19:45:00+02:00</updated><entry><title>Osteralbtraum</title><link href="https://blog.schawe.me/easter.html" rel="alternate"></link><published>2023-09-23T19:45:00+02:00</published><updated>2023-09-23T19:45:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2023-09-23:/easter.html</id><summary type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ostern ist ein Feiertag, dessen Zeitpunkt mit einer Regel festgelegt wird, die unnötig kompliziert scheint. Der erste Sonntag nach dem ersten Vollmond im Frühling. Den meisten bleibt da als Lösung nicht viel mehr übrig als in einem Kalender nachzusehen welches Datum es denn wohl ist und sich auf den Kalenderhersteller zu verlassen. Aber nicht mit mir! Ich werde es Big-Calendar zeigen und hier die geheime Formel veröffentlichen, mit der man das Osterdatum&amp;nbsp;berechnet!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# golden number&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;# century&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;             &lt;span class="c1"&gt;# correction: dropped leap years&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;# correction: synchronize with moon&amp;#39;s orbit&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;         &lt;span class="c1"&gt;# find sunday&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;    &lt;span class="c1"&gt;# epact&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;                        &lt;span class="c1"&gt;# full moon in march&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;           &lt;span class="c1"&gt;# advance to next sunday&lt;/span&gt;
    &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mir persönlich gefällt besonders gut, dass jede Zeile schlimmer ist als die&amp;nbsp;vorherige.&lt;/p&gt;
&lt;p&gt;Dieser Algorithmus ist übrigens von Lilius und Clavius Ende des 16. Jahrunderts entwickelt worden. Ich bin durch eine Erwähnung in einer Übungsaufgabe in Donald Knuths &lt;em&gt;The Art of Computer Programming 1&lt;/em&gt; (Third edition, S. 159f) darauf&amp;nbsp;gestoßen.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Code"></category></entry><entry><title>pirShow</title><link href="https://blog.schawe.me/pirshow.html" rel="alternate"></link><published>2022-10-08T12:31:00+02:00</published><updated>2022-10-08T12:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-10-08:/pirshow.html</id><summary type="html">&lt;p&gt;Alte Monitore sind zu Schade zum Entsorgen. Als Upcycling habe ich deshalb
einen alten Monitor zu einem digitalen Bilderrahmen in meinem Flur umfunktioniert.
Sinnvollerweise sollte er natürlich nur dann ein Bild zeigen, wenn auch jemand da ist,
der es betrachten kann. Hier möchte ich einmal kurz beschreiben, wie ich einen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alte Monitore sind zu Schade zum Entsorgen. Als Upcycling habe ich deshalb
einen alten Monitor zu einem digitalen Bilderrahmen in meinem Flur umfunktioniert.
Sinnvollerweise sollte er natürlich nur dann ein Bild zeigen, wenn auch jemand da ist,
der es betrachten kann. Hier möchte ich einmal kurz beschreiben, wie ich einen
Raspberry Pi, einen passiven Bewegungssensor und etwas Python-Code zu diesem Zweck&amp;nbsp;benutze.&lt;/p&gt;
&lt;h2&gt;Bildquellen&amp;nbsp;definieren&lt;/h2&gt;
&lt;p&gt;Die Hauptfunktionalität eines digitalen Bilderrahmens ist es natürlich Bilder anzuzeigen.
Diese Bilder sollen aus mehreren Quellen zufällig ausgewählt werden. Dabei habe ich mir
einige Flickr-Accounts über Raumfahrt und meine Twitter-Bots ausgesucht. Zuerst brauchen
wir also etwas Code, um die Bilder&amp;nbsp;herunterzuladen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flickr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flickrapi&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keys_and_secrets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;

    &lt;span class="n"&gt;url_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://farm&lt;/span&gt;&lt;span class="si"&gt;%(farm_id)s&lt;/span&gt;&lt;span class="s1"&gt;.staticflickr.com/&lt;/span&gt;&lt;span class="si"&gt;%(server_id)s&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%(photo_id)s&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="si"&gt;%(secret)s&lt;/span&gt;&lt;span class="s1"&gt;_b.jpg&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_for_photo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url_template&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;server_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;farm_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;farm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;photo_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;flickr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flickrapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FlickrAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flickr_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flickr_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flickr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;purl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for_photo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keys_and_secrets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;

    &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consumer_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consumer_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;keys_and_secrets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;media&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;media&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;media_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thumb&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;purl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dann bauen wir uns einen praktischen Decorator, den wir nutzen, um unterschiedliche Accounts
als Bildquellen zu&amp;nbsp;registrieren.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;source_decorator&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apollo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flickr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;projectapolloarchive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;randomGraphs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomGraphs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@randomGraphs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AFractalADay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AFractalADay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@AFractalADay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dies ermöglicht es dann sehr komfortabel zufällige Bilder herunterzuladen und&amp;nbsp;anzuzeigen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_image&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;image_getter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_getter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# show image&lt;/span&gt;
    &lt;span class="c1"&gt;# skipped terminating old instance of feh and aquiring a mutex&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DISPLAY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;VIEWER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-FZYx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Monitor ein- und&amp;nbsp;ausschalten&lt;/h2&gt;
&lt;p&gt;Jetzt, da wir Bilder zum Anzeigen haben, müssen wir den Monitor ein- und ausschalten, damit man sie sieht
bzw. damit wir nicht sinnlos Strom verbrauchen. Hier rufen wir wieder Kommandozeilen-Werkzeuge auf:
&lt;code&gt;tvservice&lt;/code&gt; schaltet den Standby-Modus des Monitors um und &lt;code&gt;chvt&lt;/code&gt; wechselt einmal vom X-Server weg und
wieder zurück, was den Bildschirmschoner&amp;nbsp;beendet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;

&lt;span class="n"&gt;MUTEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;
    &lt;span class="c1"&gt;# needs to run as root&lt;/span&gt;
    &lt;span class="c1"&gt;# make sure that sudo will not ask for a password for these commands&lt;/span&gt;
    &lt;span class="c1"&gt;# e.g. use visudo to add&lt;/span&gt;
    &lt;span class="c1"&gt;# piruser ALL=(ALL) NOPASSWD: /usr/bin/tvservice, /bin/chvt&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MUTEX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo tvservice -p; sleep 0.5; sudo chvt 6; sleep 0.5; sudo chvt 7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sudo tvservice -o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# download and show the next image&lt;/span&gt;
                &lt;span class="n"&gt;random_image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span class="caps"&gt;PIR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Jetzt müssen wir diese Funktionalität nur noch durch einen Bewegungssensor auslösen. Dazu
schließen wir einfach einen Pyroelektrischen Infrarot Sensor (&lt;span class="caps"&gt;PIR&lt;/span&gt;) an beispielsweise Pin 23 und
sagen dem Raspberry, dass er dort horchen soll, ob ein Signal&amp;nbsp;anliegt.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/pirShow.webp"&gt;&lt;img alt="Ein PIR Bewegungsensor, der an einen Raspberry Pi angeschlossen ist" src="/img/pirShow1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;GPIO&lt;/span&gt;

&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;

&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BCM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SENSOR_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RISING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pir_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Der &lt;code&gt;pir_callback&lt;/code&gt; schaltet dann einfach den Monitor an und startet einen Timer,
der den Monitor wieder ausstellt (dieser Timer wird abgebrochen sobald der Callback
erneut aufgerufen wird, damit der Monitor an bleibt, solange jemand das Bild&amp;nbsp;betrachtet.)&lt;/p&gt;
&lt;p&gt;Der &lt;code&gt;pir_callback&lt;/code&gt; sendet außerdem auch eine &lt;span class="caps"&gt;MQTT&lt;/span&gt;-Nachricht, um die Bewegungsmeldung
auch für Home-Assistant-Automatisierungen zu nutzen, sodass die Beleuchtung im Flur
nach Sonnenuntergang nun auch durch Bewegungen ausgelöst&amp;nbsp;wird.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category></entry><entry><title>Künstliche Kunst</title><link href="https://blog.schawe.me/kunstliche-kunst.html" rel="alternate"></link><published>2022-10-05T18:05:00+02:00</published><updated>2022-10-05T18:05:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-10-05:/kunstliche-kunst.html</id><summary type="html">&lt;p&gt;Seit der Vorstellung von &lt;a href="https://de.wikipedia.org/wiki/DALL-E"&gt;&lt;span class="caps"&gt;DALL&lt;/span&gt;-E&lt;/a&gt; Anfang 2021 sind Text-zu-Bild-Programme
im Bewusstsein der Öffentlichkeit angekommen. &lt;span class="caps"&gt;DALL&lt;/span&gt;-E 2.0 und &lt;a href="https://en.wikipedia.org/wiki/Midjourney"&gt;Midjourney&lt;/a&gt;
haben immer wieder mit interessanten, verrückten und überraschend gut aussehenden Bildern auf sich aufmerksam
gemacht, die aber immer nur in sehr begrenztem Umfang von ausgewählten Usern auf Servern der …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seit der Vorstellung von &lt;a href="https://de.wikipedia.org/wiki/DALL-E"&gt;&lt;span class="caps"&gt;DALL&lt;/span&gt;-E&lt;/a&gt; Anfang 2021 sind Text-zu-Bild-Programme
im Bewusstsein der Öffentlichkeit angekommen. &lt;span class="caps"&gt;DALL&lt;/span&gt;-E 2.0 und &lt;a href="https://en.wikipedia.org/wiki/Midjourney"&gt;Midjourney&lt;/a&gt;
haben immer wieder mit interessanten, verrückten und überraschend gut aussehenden Bildern auf sich aufmerksam
gemacht, die aber immer nur in sehr begrenztem Umfang von ausgewählten Usern auf Servern der Betreibern
generiert werden konnten. Aber seit August 2022 gibt es mit &lt;a href="https://en.wikipedia.org/wiki/Stable_Diffusion"&gt;Stable Diffusion&lt;/a&gt;
das erste hochwertige Text-zu-Bild-Modell, dessen Neuronales Netzwerk offen ist und von
jedem (der eine Grafikkarte mit genügend Speicher hat) auf dem eigenen Computer genutzt werden&amp;nbsp;kann!&lt;/p&gt;
&lt;p&gt;Die grundlegende Funktionsweise ist, dass man dem Modell eine Bildbeschreibung, sogenannte &lt;em&gt;Prompts&lt;/em&gt;, gibt und das Modell
versucht ein Bild zu rendern, das möglichst gut zu der Beschreibung passt. Die Kunst liegt nun darin,
die Bildbeschreibung so zu formulieren, dass das resultierende Bild möglichst gut wird.
Wenn wir wissen wollen, wie so eine künstliche Intelligenz überhaupt aussieht, können wir Stable Diffusion
darum bitten uns ein Bild von einer zu malen mit dem Prompt &amp;#8220;a painting of an artificial&amp;nbsp;intelligence&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="a painting of an artificial intelligence" src="img/painting_of_ai.webp"&gt;&lt;/p&gt;
&lt;p&gt;In der Community findet man häufig Prompts, die mit vielen Adjektiven (wie &amp;#8220;intricate&amp;#8221; oder &amp;#8220;highly detailed&amp;#8221;)
oder Künstlernamen (vor allem &amp;#8220;Greg Rutkowski&amp;#8221;) gespickt sind. Für mich persönlich klingt es nach zu viel Arbeit
eine solche Liste von Schlüsselworten an eine knappe Bildbeschreibung zu hängen &amp;#8212; ich benutze schließlich
eine künstliche Intelligenz, die Bilder zeichnet, damit ich wenig Arbeit&amp;nbsp;habe!&lt;/p&gt;
&lt;p&gt;Die offensichtliche Lösung für dieses Problem ist es natürlich ein Sprachmodell zu benutzen, um Prompts zu
generieren. Glücklicherweise gibt es mit &lt;a href="https://lexica.art"&gt;lexica.art&lt;/a&gt; eine Datenbank von Prompts, die
man nutzen kann, um ein &lt;a href="https://en.wikipedia.org/wiki/GPT-2"&gt;&lt;span class="caps"&gt;GPT&lt;/span&gt;-2&lt;/a&gt; Modell zu finetunen. So kann man &lt;span class="caps"&gt;GPT&lt;/span&gt;-2
Modell mit &amp;#8220;four dimensional space whale&amp;#8221; füttern, &lt;span class="caps"&gt;GPT&lt;/span&gt;-2 macht daraus den Prompt
&amp;#8220;four dimensional space whale, with recursive spiral eyes, concept art, high detail, intimidating, cinematic, Artstation trending, octane render&amp;#8221;,
der von Stable Diffusion zu diesem Bild gerendert&amp;nbsp;wird:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein vierdimensionaler Weltraumwal" src="img/SpaceWhale2.webp"&gt;&lt;/p&gt;
&lt;p&gt;Und damit ich auch keine Arbeit damit habe, die Bilder selbst zu generieren, habe ich einen Twitter-Bot
damit beauftragt täglich ein lovecraft&amp;#8217;sches Bild zu tweeten: &lt;a href="https://twitter.com/ACthulhuADay"&gt;@ACthulhuADay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Der Glue-Code, der diesen text2prompt2image-Ablauf implementiert (also
hauptsächlich Modelle von Huggingface herunterlädt) und diesen Bot antreibt, findet
sich auf &lt;a href="https://github.com/surt91/ACthulhuADay"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Bild"></category><category term="Neural Networks"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>Perfect Snake</title><link href="https://blog.schawe.me/perfect-snake.html" rel="alternate"></link><published>2022-05-21T11:03:00+02:00</published><updated>2022-05-21T11:03:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2022-05-21:/perfect-snake.html</id><summary type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/pysnake.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ich habe auf diesem Blog schon über eine Reihe von Snake Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;5&lt;/a&gt;] geschrieben, die zum Teil auch Autopilot-Strategien hatten [&lt;a href="https://blog.schawe.me/pysnake.html"&gt;6&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;7&lt;/a&gt;].
Die Autopiloten waren zwar meist interessant anzusehen &amp;#8212; vor allem bei hohen Geschwindigkeiten &amp;#8212; aber bei weitem nicht&amp;nbsp;perfekt.&lt;/p&gt;
&lt;p&gt;Auch wenn der Titel etwas zu viel verspricht, schafft es dieser Autopilot (zumindest manchmal) perfekte Spiele zu&amp;nbsp;spielen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eine perfekte Partie Snake" src="/img/perfectsnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Und falls dieses gif nicht überzeugt, kann man den Autopiloten online
&amp;#8212; dank TensorFlow.js &amp;#8212; direkt im Browser ausprobieren auf &lt;a href="https://snake.schawe.me/"&gt;snake.schawe.me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aber was steckt&amp;nbsp;dahinter?&lt;/p&gt;
&lt;h2&gt;Neuronale&amp;nbsp;Netze&lt;/h2&gt;
&lt;p&gt;Wenn man nicht clever genug ist, eine direkte Lösung für ein Problem zu finden, kann man
versuchen ein neuronales Netz auf die Lösung des Problems zu trainieren. Vor einigen Jahren
hat ein &lt;a href="https://arxiv.org/abs/1312.5602"&gt;Artikel&lt;/a&gt;, in dem ein neuronales Netz trainiert
wurde alte Atari-Spiele zu spielen, für mediale Aufmerksamkeit gesorgt. Und die gleiche
Idee des &lt;em&gt;Reinforcement Learning&lt;/em&gt; werde ich hier (nicht als erster
[&lt;a href="https://github.com/pawel-kieliszczyk/snake-reinforcement-learning"&gt;8&lt;/a&gt;,
&lt;a href="https://towardsdatascience.com/learning-to-play-snake-at-1-million-fps-4aae8d36d2f1"&gt;9&lt;/a&gt;])
auf Snake&amp;nbsp;anwenden.&lt;/p&gt;
&lt;p&gt;Die grundlegende Idee von Reinforcement Learning ist relativ einsichtig: Wir belohnen
das Modell für gute Entscheidungen, sodass es lernt mehr gute Entscheidungen zu treffen.
In unserem Fall werden gute Entscheidungen dadurch definiert, dass sie zu einer
hohen Punktzahl, also Länge der Schlange am Spielende,&amp;nbsp;führen.&lt;/p&gt;
&lt;p&gt;Glücklicherweise können wir auf die Literatur zurückgreifen, wie wir diese grundsätzliche
Idee umsetzen können. Das Modell, für das ich mich entschieden habe, ist ein Actor-Critic
Ansatz. Dabei nutze ich ein neuronales Netz, das als Input den aktuellen Zustand des
Spielfeldes bekommt &amp;#8212; wie genau dieser Zustand aussieht, diskutieren wir weiter unten.
Dann geht es durch ein paar Schichten und endet in zwei &amp;#8220;Köpfen&amp;#8221;. Einer ist der &lt;em&gt;Actor&lt;/em&gt;,
mit drei Output-Neuronen, die für &amp;#8220;nach links&amp;#8221;, &amp;#8220;nach rechts&amp;#8221; und &amp;#8220;geradeaus weiter&amp;#8221; stehen.
Der andere ist der &lt;em&gt;Critic&lt;/em&gt;, der ein Output-Neuron hat, das abschätzt wie lang die
Schlange, ausgehend von der aktuellen Situation, noch werden kann &amp;#8212; also wie gut die aktuelle
Situation&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Das Training läuft dann so ab, dass ein ganzes Spiel gespielt wird, folgend den Vorschlägen
des Actors mit etwas rauschen, um neue Strategien zu erkunden. Sobald es beendet ist, weil
die Schlange sich oder eine Wand gebissen hat, wird
der Critic mit allen Zuständen des Spielverlaufs darauf trainiert, Schätzungen
abzugeben, die möglichst gut zu der tatsächlich erreichten Länge am Spielende passen.
Außerdem wird der Actor darauf trainiert gute Entscheidungen zu treffen, indem zu den
Zuständen des Spielverlaufs andere Entscheidungen getroffen werden und die Bewertung
des Critic der resultierenden Situationen als Qualität der Entscheidung genutzt wird.
Actor und Critic helfen sich also gegenseitig besser zu werden.
Der gemeinsame Teil des neuronalen Netzes sollte im Idealfall nach genügend gespielten
Spielen dabei ein &amp;#8220;Verständnis&amp;#8221; für Snake entwickeln.&amp;nbsp;Genial!&lt;/p&gt;
&lt;h2&gt;Technische&amp;nbsp;Nebensächlichkeiten&lt;/h2&gt;
&lt;p&gt;Meine Implementierung benutzt die Python Bibliotheken Keras und Tensorflow zum Training
und &lt;a href="https://blog.schawe.me/multijsnake.html"&gt;multiJSnake&lt;/a&gt; als &lt;em&gt;Environment&lt;/em&gt;. Wir steuern also einen
Java-Prozess, um unser neuronales Netz in Python zu trainieren.
Diese Entscheidung ist etwas unorthodox, aber bot Potential für einen Blogpost auf dem
&lt;a href="https://blog.codecentric.de/2021/11/java-klassen-python/"&gt;Blog meines Arbeitgebers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wir können das Environment getrost als Black-Box betrachten, die dafür sorgt, dass die Regeln
von Snake befolgt&amp;nbsp;werden.&lt;/p&gt;
&lt;h2&gt;Lokale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Eine der wichtigsten Entscheidungen ist nun, wie der Input in das Modell aussieht.
Die einfachste Variante, die sich auch gut zum Testen eignet, ist die lokale
Information rund um den Kopf der Schlange: Drei Neuronen, die jeweils 1 oder 0 sind,
wenn das Feld links, rechts und geradeaus vom Kopf belegt sind (und acht weitere für
etwas mehr Weitsicht auf die Diagonalen und übernächste Felder vorne, rechts, links und
diesmal auch zurück). Damit die Schlange
auch das Futter finden kann, fügen wir noch 4 weitere Neuronen hinzu, die per 1 oder 0
anzeigen, ob das Futter in, rechts, links oder entgegengesetzt der Bewegungsrichtung
der Schlange&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;Mit diesem Input füttern wir eine einzelne vollvernetzte Schicht, hinter der wir
direkt die Actor und Critic Köpfe&amp;nbsp;anschließen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des neuronalen Netzes mit lokaler Information (Visualisierung: netron)" class="invertable" src="/img/nn_local.svg"&gt;&lt;/p&gt;
&lt;p&gt;Das reicht aus, damit die Schlange nach ein paar tausend Trainingsspielen zielstrebig auf das Futter
zusteuert und sich selbst ausweicht. Allerdings reicht es noch nicht, um zu verhindern,
dass sie sich selbst in Schlaufen fängt. Da war der Autopilot von
&lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake&lt;/a&gt;&amp;nbsp;besser.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ein paar Spiele mit lokaler Information" src="/img/nn_local_game.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Globale&amp;nbsp;Informationen&lt;/h2&gt;
&lt;p&gt;Um der Schlange eine Chance zu geben zu erkennen, dass sie sich gerade selbst fängt,
sollte man ihr erlauben das ganze Spielfeld zu sehen &amp;#8212; schließlich sehen menschliche
Spieler auch das ganze Spielfeld. Bei einem &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld haben wir also
schon mindestens 100 Input-Neuronen, sodass vollvernetzte Schichten zu sehr großen
Modellen führen würden. Stattdessen bietet es sich bei solchen zweidimensionalen
Daten an &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;&lt;em&gt;convolutional&lt;/em&gt; neuronale Netze&lt;/a&gt;
zu nutzen. Um es unserer Schlange etwas einfacher zu machen, werden wir unser Spielfeld
in drei Kanäle&amp;nbsp;aufteilen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;der Kopf: nur an der Position des Kopfes ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;li&gt;der Körper: die Positionen an denen sich der Körper befindet zeigen wie viele Zeitschritte der Körper noch an dieser Position sein&amp;nbsp;wird&lt;/li&gt;
&lt;li&gt;das Futter: nur an der Position des Futters ist eine 1, der Rest ist&amp;nbsp;0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Was ein Mensch sieht und was wir unserem neuronalen Netz zeigen" src="/img/nn_snake_channels.png"&gt;&lt;/p&gt;
&lt;p&gt;Dies ist auch kein unfairer Vorteil, schließlich sehen menschliche Spieler das Bild auch
mit drei&amp;nbsp;Farbkanälen.&lt;/p&gt;
&lt;p&gt;Und damit die Schlange nicht auch noch lernen muss was rechts und links bedeutet,
geben wir dem Actor 4 Outputs, die für Norden, Osten, Süden und Westen&amp;nbsp;stehen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layout des Convolutional-Neural-Networks (Visualisierung: netron)" class="invertable" src="/img/nn_global.svg"&gt;&lt;/p&gt;
&lt;p&gt;Dieses Modell-Layout verdient es dann schon eher als &lt;em&gt;Deep Learning&lt;/em&gt; bezeichnet zu werden.
Weitere Modell-Parameter, können auf &lt;a href="https://github.com/surt91/multiJSnake"&gt;github.com/surt91/multiJSnake&lt;/a&gt;
nachgeschlagen&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Nach einigen zehntausend Trainingsspielen funktioniert dieses Modell dann
tatsächlich gut genug, um regelmäßig perfekte Spiele auf einem
&lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt; Spielfeld zu erreichen. Aber da ich es nur auf  &lt;span class="math"&gt;\(10 \times 10\)&lt;/span&gt;
Feldern trainiert habe, versagt es leider auf jeder anderen&amp;nbsp;Größe.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Python"></category><category term="Neural Networks"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>multiJSnake</title><link href="https://blog.schawe.me/multijsnake.html" rel="alternate"></link><published>2021-09-26T09:27:00+02:00</published><updated>2021-09-26T09:27:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-09-26:/multijsnake.html</id><summary type="html">&lt;p&gt;Vor Kurzem habe ich ein Server-Client Snake in meine Liste von simplen
Snake-Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;6&lt;/a&gt;]
eingereiht. Wie ich in meinem Artikel &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;&amp;#8220;RestfulSnake&amp;#8221;&lt;/a&gt;
bereits angedeutet hatte, habe ich es um eine Multiplayer Komponente&amp;nbsp;erweitert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiJSnake" src="/img/multisnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Das grundlegende Design ist, dass der Server in festen Intervallen den nächsten Zeitschritt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor Kurzem habe ich ein Server-Client Snake in meine Liste von simplen
Snake-Clonen [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;, &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;6&lt;/a&gt;]
eingereiht. Wie ich in meinem Artikel &lt;a href="https://blog.schawe.me/restfulsnake.html"&gt;&amp;#8220;RestfulSnake&amp;#8221;&lt;/a&gt;
bereits angedeutet hatte, habe ich es um eine Multiplayer Komponente&amp;nbsp;erweitert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiJSnake" src="/img/multisnake.gif"&gt;&lt;/p&gt;
&lt;p&gt;Das grundlegende Design ist, dass der Server in festen Intervallen den nächsten Zeitschritt berechnet,
den Spielzustand an alle Spieler schickt und auf Steuerkommandos von den Spielern lauscht. Dass der
Server die gesamte Spiellogik verwaltet ist einerseits möglich, weil Snake einen relativ kleinen Zustand
hat und nicht extrem empfindlich auf Latenzen reagiert. Außerdem können Spieler nicht (so einfach) schummeln,
wenn der Spiel-Zustand auf dem Server berechnet&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Hier sehen wir auch schon das erste Problem für die alte Kommunikation per http: Da der Server nicht von sich aus
Nachrichten an die Clients schicken kann, müssten die Clients pollen, was zu einem ganzen Haufen an Problemen
führen kann (Poll kurz vor dem Tick zum nächsten Zeitschritt, Last, uneinheitliche Antwortzeiten und Races bei
schlechtem Netzwerk, &amp;#8230;)
Genau für diesen Zweck sind aber &lt;a href="https://de.wikipedia.org/wiki/WebSocket"&gt;Websocket&lt;/a&gt;-Verbindungen wie geschaffen!
Da SpringBoot vernünftige Mechanismen mitbringt, um Websockets zu handhaben, ist die Umstellung sogar
&lt;a href="https://github.com/surt91/multiJSnake/commit/927f3bc02c9a3e024048b7d7111969c3cc304aff"&gt;vergleichsweise schmerzfrei&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Das größte Problem ist nun, dass die meisten Leute &amp;#8220;Rest&amp;#8221; als synonym für &amp;#8220;json über http&amp;#8221; verstehen. Also
muss ein neuer Name her &amp;#8212; leider war &amp;#8220;multisnake&amp;#8221; auf Heroku schon belegt, sodass ich mit &amp;#8220;multiJSnake&amp;#8221;
subtil darauf hinweise, dass Java und JavaScript das fundament&amp;nbsp;bilden.&lt;/p&gt;
&lt;p&gt;Ausprobiert werden kann es auf &lt;a href="https://multijsnake.herokuapp.com/"&gt;multijsnake.herokuapp.com&lt;/a&gt; und weitere
Spieler können durch einen Einladungslink in die eigene Session eingeladen werden. Die Quellen sind natürlich
auf Github: &lt;a href="https://github.com/surt91/multiJSnake/tree/v0.2.0"&gt;github.com/surt91/multiJSnake&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>RestfulSnake</title><link href="https://blog.schawe.me/restfulsnake.html" rel="alternate"></link><published>2021-07-29T13:48:00+02:00</published><updated>2021-07-29T13:48:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-07-29:/restfulsnake.html</id><summary type="html">&lt;p&gt;Vor wenigen Monaten hatte ich eine handvoll Bewerbungsgespräche. Von &amp;#8220;Programmieraufgaben&amp;#8221;,
die durch das Erkennen der Fibonacci-Sequenz gelöst wurden bis zu &amp;#8220;Wie viele Grashalme
gibt es in deiner Heimatstadt?&amp;#8221; war alles dabei. Unter anderem auch &amp;#8220;Wir glauben,
dass du noch nie Java angefasst hast, deshalb sollst du ein Programm in Java …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor wenigen Monaten hatte ich eine handvoll Bewerbungsgespräche. Von &amp;#8220;Programmieraufgaben&amp;#8221;,
die durch das Erkennen der Fibonacci-Sequenz gelöst wurden bis zu &amp;#8220;Wie viele Grashalme
gibt es in deiner Heimatstadt?&amp;#8221; war alles dabei. Unter anderem auch &amp;#8220;Wir glauben,
dass du noch nie Java angefasst hast, deshalb sollst du ein Programm in Java schreiben,
über das wir nächste Woche reden&amp;nbsp;können!&amp;#8221;&lt;/p&gt;
&lt;p&gt;Also bin ich jetzt Java-Experte. Und das bedeutet, dass es Zeit ist für eine weitere
Snake-Version [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;, &lt;a href="https://blog.schawe.me/jsnake.html"&gt;5&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Um besonders professionell zu wirken, habe ich mich für eine &lt;em&gt;Client-Server-Architektur&lt;/em&gt;
entschieden. Steuerkommandos werden per &lt;code&gt;http&lt;/code&gt; &lt;code&gt;post&lt;/code&gt; zum Server geschickt und in der Antwort
steht die neue Position der Schlange.
Das Backend nutzt &lt;em&gt;Spring Boot&lt;/em&gt; und läuft auf einem Tomcat Server. Das
Frontend besteht hauptsächlich aus dem Visualisierungs-Code von &lt;a href="https://blog.schawe.me/jsnake.html"&gt;jsnake&lt;/a&gt;,
aber echte Nerds werden es natürlich bevorzugen per &lt;em&gt;curl&lt;/em&gt; zu&amp;nbsp;spielen.&lt;/p&gt;
&lt;p&gt;Normalerweise würde man es natürlich mittels Kubernetes und Docker auf &lt;span class="caps"&gt;AWS&lt;/span&gt; laufen lassen, aber
stattdessen habe ich mich dafür entschieden Heroku zu nutzen, um ein
&lt;a href="https://en.wikipedia.org/wiki/Salesforce"&gt;kleines Unternehmen&lt;/a&gt; zu unterstützen.
Auf &lt;a href="https://multijsnake.herokuapp.com/"&gt;multijsnake.herokuapp.com&lt;/a&gt; kann man also eine Partie
spielen. Und die Quellen liegen wie immer auf &lt;a href="https://github.com/surt91/multiJSnake/tree/RestfulSnake"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Überraschenderweise funktioniert das tatsächlich erstaunlich gut &amp;#8212; solange die Latenz unter ~150 ms bleibt.
Und dieses Design schreit geradezu nach einen&amp;nbsp;Multiplayer-Modus&amp;#8230;&lt;/p&gt;</content><category term="Code"></category><category term="Java"></category><category term="JavaScript"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Noch mehr Fraktale</title><link href="https://blog.schawe.me/more-fractals.html" rel="alternate"></link><published>2021-06-07T20:45:00+02:00</published><updated>2021-06-07T20:45:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-06-07:/more-fractals.html</id><summary type="html">&lt;p&gt;Seit meinem &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;ersten Eintrag&lt;/a&gt; über meinen
Fraktal-tweetenden Bot &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;,
habe ich selbigen noch um ein paar Fraktale erweitert, die ich hier kurz
festhalten möchte. Der ganze Code ist &lt;a href="https://github.com/surt91/AFractalADay"&gt;auf Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Chaotic&amp;nbsp;Maps&lt;/h3&gt;
&lt;p&gt;Eine &lt;em&gt;Quadratic Map&lt;/em&gt; ist eine Rekursionsgleichung mit einem quadratischen
Term, also&amp;nbsp;beispielsweise
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{i+1} = a_0 x …&lt;/div&gt;</summary><content type="html">&lt;p&gt;Seit meinem &lt;a href="https://blog.schawe.me/randomFractals.html"&gt;ersten Eintrag&lt;/a&gt; über meinen
Fraktal-tweetenden Bot &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;,
habe ich selbigen noch um ein paar Fraktale erweitert, die ich hier kurz
festhalten möchte. Der ganze Code ist &lt;a href="https://github.com/surt91/AFractalADay"&gt;auf Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Chaotic&amp;nbsp;Maps&lt;/h3&gt;
&lt;p&gt;Eine &lt;em&gt;Quadratic Map&lt;/em&gt; ist eine Rekursionsgleichung mit einem quadratischen
Term, also&amp;nbsp;beispielsweise
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{i+1} = a_0 x^2 + a_1 x + a_2.$$&lt;/div&gt;
&lt;p&gt;
Das berühmteste Mitglied dieser Familie ist die &lt;a href="https://de.wikipedia.org/wiki/Logistische_Gleichung"&gt;&lt;em&gt;Logistic-Map&lt;/em&gt;&lt;/a&gt;
mit &lt;span class="math"&gt;\(a_0=1, a_1=r, a_2=0\)&lt;/span&gt;, die chaotisches Verhalten für &lt;span class="math"&gt;\(3.56995 &amp;lt; r &amp;lt; 4\)&lt;/span&gt; zeigt.
Aber leider ist sie nur eindimensional und ihr Attraktor deshalb nicht besonders&amp;nbsp;hübsch.&lt;/p&gt;
&lt;p&gt;Um visuell ansprechende Fraktale daraus zu erzeugen, brauchen wir also ein System aus
zwei Rekursionsgleichungen, die wir als &lt;span class="math"&gt;\(x\)&lt;/span&gt;- und &lt;span class="math"&gt;\(y\)&lt;/span&gt;-Koordinaten betrachten&amp;nbsp;können:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
x_{i+1} &amp;amp;= a_{0} + a_{1} x + a_{2} x^2 + a_{3} x y + a_{4} y + a_{5} y^2\\
y_{i+1} &amp;amp;= a_{6} + a_{7} x + a_{8} x^2 + a_{9} x y + a_{10} y + a_{11} y^2.
\end{align*}&lt;/div&gt;
&lt;p&gt;Jetzt haben wir 12 freie Parameter, die einen riesigen Parameterraum aufspannen,
in dem &lt;a href="http://sprott.physics.wisc.edu/pubs/paper203.htm"&gt;etwa 1.6%&lt;/a&gt; aller Möglichkeiten
chaotisches Verhalten mit einem seltsamen Attraktor&amp;nbsp;zeigen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/quadraticMap.png"&gt;&lt;img alt="Quadratic Map" src="/img/quadraticMap1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chaotische&amp;nbsp;Differentialgleichungssysteme&lt;/h3&gt;
&lt;p&gt;Ein echter Klassiker ist das Differentialgleichungssystem, das die Chaostheorie
begründet hat und nach dem der &lt;em&gt;Schmetterlingseffekt&lt;/em&gt; benannt
ist [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;].
Für bestimmte Paramtersätze verlaufen die Bahnkurven entlang eines &lt;em&gt;seltsamen Attraktors&lt;/em&gt;,
dessen fraktale Dimension &lt;span class="math"&gt;\(\approx 2.06\)&lt;/span&gt; ist. Da der vollständige Attraktor somit in
einer zweidimensionalen Projektion &lt;a href="/img/lorenz_full_attractor.png"&gt;etwas langweilig&lt;/a&gt; aussieht,
habe ich hier nur eine Trajektorie über kurze Zeit&amp;nbsp;dargestellt.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/lorenzattraktor2.png"&gt;&lt;img alt="Lorenz-Attraktor" src="/img/lorenzattraktor2_1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und es gibt &lt;a href="https://en.wikipedia.org/wiki/List_of_chaotic_maps"&gt;eine ganze Menge&lt;/a&gt;
weitere Differntialgleichungssysteme (und &lt;em&gt;chaotic maps&lt;/em&gt;), die chaotische
Attraktoren aufweisen. Deshalb zeige ich hier noch einen Rössler-Attraktor, der
eine vereinfachte Version des Lorenz-Systems&amp;nbsp;ist:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
\frac{\mathrm{d}x}{\mathrm{d}t} &amp;amp;= -(y+z)\\
\frac{\mathrm{d}y}{\mathrm{d}t} &amp;amp;= x + ay\\
\frac{\mathrm{d}z}{\mathrm{d}t} &amp;amp;= b + xz - cz
\end{align*}&lt;/div&gt;
&lt;p&gt;Und hier haben wir das Glück, dass auch seine Projektion sehr ansehnlich&amp;nbsp;ist.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/rossler.png"&gt;&lt;img alt="Rössler-Attraktor" src="/img/rossler1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich persönlich frage mich, nun wie der Attraktor für das &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;Doppelpendel&lt;/a&gt;
aussieht. Es ist anscheinend kein Fraktal, aber es sieht dennoch ganz interessant&amp;nbsp;aus:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/doublePendulumLong.png"&gt;&lt;img alt="Doppelpendel" src="/img/doublePendulumLong1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ising&amp;nbsp;model&lt;/h3&gt;
&lt;p&gt;Das Ising Modell für Ferromagnetismus wird auch als Drosophila
der statistischen Physik bezeichnet: Es ist ein einfaches
Modell, dass einen Phasenübergang aufweist &amp;#8212; Eisen verliert
seine magnetischen Eigenschaften oberhalb der&amp;nbsp;Curie-Temperatur.&lt;/p&gt;
&lt;p&gt;Es besteht aus magnetischen Momenten, &lt;em&gt;Spins&lt;/em&gt;, die gerne in die
gleiche Richtung zeigen wie ihre Nachbarn, aber durch hohe Temperatur
gestört werden. Oder etwas formaler: Die innere Energie &lt;span class="math"&gt;\(U\)&lt;/span&gt; wird durch
den Hamiltonian &lt;span class="math"&gt;\(\mathcal{H} = - \sum_{&amp;lt;ij&amp;gt;} s_i s_j\)&lt;/span&gt; bestimmt, wobei
&lt;span class="math"&gt;\(s_i = \pm 1\)&lt;/span&gt;, je nachdem ob der Spin &lt;em&gt;up&lt;/em&gt; oder &lt;em&gt;down&lt;/em&gt; ist und die
Summe über benachbarte Spins läuft. Das System
wird immer einen Zustand anstreben, der die freie Energie &lt;span class="math"&gt;\(F=U-TS\)&lt;/span&gt;
minimiert. Das kann entweder passieren, indem &lt;span class="math"&gt;\(U\)&lt;/span&gt; möglichst klein
ist oder die Entropie &lt;span class="math"&gt;\(S\)&lt;/span&gt; möglichst hoch. Bei großen Werten der
Temperatur &lt;span class="math"&gt;\(T\)&lt;/span&gt; bekommt der Entropie-Term ein höheres Gewicht, sodass
Zustände mit hoher Entropie, also zufälligen Spinausrichtungen,
bevorzugt sind, bei niedrigen Temperaturen werden Konfigurationen
mit niedriger innerer Energie bevorzugt, also solche in denen alle Spins
in die selbe Richtung zeigen. Die Temperatur, bei der sich beide
Terme die Waage halten, nennt man kritische Temperatur. Hier bilden
sich Regionen von Spins, die in die gleiche Richtung zeigen, auf allen
Größenskalen. Die fraktale Dimension dieser Regionen ist
&lt;a href="https://doi.org/10.1103/PhysRevLett.62.1067"&gt;187/96&lt;/a&gt;,
was solche kritische Konfigurationen interessant anzusehen macht.
Ich empfehle auf das folgende Bild zu klicken und etwas&amp;nbsp;hineinzuzoomen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/ising.png"&gt;&lt;img alt="Kritisches Ising System" src="/img/ising1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Formel"></category><category term="Chaos"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>Twitter Profilhintergrundfarben</title><link href="https://blog.schawe.me/twitter-background.html" rel="alternate"></link><published>2021-05-11T18:30:00+02:00</published><updated>2021-05-11T18:30:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-11:/twitter-background.html</id><summary type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Für ein Projekt habe ich Tweets von &amp;gt;8&amp;#8216;000&amp;#8216;000 Twitter-Usern eingesammelt.
Dabei fallen noch eine Reihe weiterer Daten an, wie die Profilhintergrundfarbe.
Es wäre eine Schande diese Daten einfach verkommen zu lassen, also habe ich
nach einer Möglichkeit gesucht diese Information ansprechend darzustellen,
was sich als weniger trivial herausgestellt hat, als ich ursprünglich angenommen
hatte: Im Idealfall sollten ähnliche Farben nahe beieinander liegen, allerdings
ist der &lt;span class="caps"&gt;RGB&lt;/span&gt; Farbraum ein dreidimensionaler Kubus, ein Bild aber nur zweidimensional,
sodass es keine
&lt;a href="https://codegolf.stackexchange.com/q/22144"&gt;&amp;#8220;richtige&amp;#8221; Art und Weise gibt, ähnliche Farben nebeneinander&amp;nbsp;anzuordnen.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich habe mich hier dafür entschieden eine 2D &lt;a href="https://de.wikipedia.org/wiki/Hilbert-Kurve"&gt;Hilbert-Kurve&lt;/a&gt;
durch mein Bild zu legen und die Farben in der Reihenfolge zu zeichnen, in der
eine 3D Hilbert-Kurve ihnen im &lt;span class="caps"&gt;RGB&lt;/span&gt;-Kubus begegnet. Wenn man dann noch die beiden
Standardhintergrundfarben &lt;code&gt;#F5F8FA&lt;/code&gt; und &lt;code&gt;#C0DEED&lt;/code&gt; ignoriert, sieht das Ergebnis so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/twitter_background.png"&gt;&lt;img alt="Twitter-Profil-Hintergrundfarbe" src="/img/twitter_background1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und dank der Python Pakete &lt;code&gt;hilbertcurve&lt;/code&gt; und &lt;code&gt;pypng&lt;/code&gt; ist der Code sogar ziemlich&amp;nbsp;harmlos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hilbertcurve.hilbertcurve&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;png&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    turn an RGB string like `#C0DEED` into a tuple of integers,&lt;/span&gt;
&lt;span class="sd"&gt;    i.e., coordinates of the RGB cube&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    `color_histogram` is a dict mapping an rgb string like `#F5F8FA`&lt;/span&gt;
&lt;span class="sd"&gt;    to the number of usages of this color&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_background_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_histogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colors.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;F5F8FA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0DEED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_histogram&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate the size of the resulting image&lt;/span&gt;
    &lt;span class="c1"&gt;# for a 2D Hilbert curve, it mus be square with a width, which is a power of 2&lt;/span&gt;
    &lt;span class="n"&gt;num_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;min_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pixels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;

    &lt;span class="c1"&gt;# output buffer for a width x width png, with 4 color values per pixel&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;hc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# there are 256 = 2^8 values in each direction of the RGB cube&lt;/span&gt;
    &lt;span class="n"&gt;hc3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HilbertCurve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hc3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance_from_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sorted_rgbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="c1"&gt;# get the coordinate of the next pixel&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;point_from_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign the RGBA values to the pixel&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RGBA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das Histogram, das als Input benötigt wird war in meinem Fall nur eine &lt;span class="caps"&gt;SQL&lt;/span&gt; Query&amp;nbsp;entfernt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;profile_background_color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Bild"></category><category term="Python"></category><category term="Twitter"></category><category term="Code"></category></entry><entry><title>inline-python</title><link href="https://blog.schawe.me/inline-python.html" rel="alternate"></link><published>2021-05-05T20:31:00+02:00</published><updated>2021-05-05T20:31:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2021-05-05:/inline-python.html</id><summary type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Für jeden Zweck das passende Werkzeug: In meinem Alltag bedeutet das, dass ich
Simulationen in Rust schreibe und in Python visualisiere. Dank &lt;a href="https://crates.io/crates/inline-python"&gt;&lt;code&gt;inline-python&lt;/code&gt;&lt;/a&gt;
geht das sogar sehr&amp;nbsp;reibungslos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inline_python&lt;/span&gt;::&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dieses Minimalbeispiel ist natürlich nicht nützlich, aber ich habe es bereits produktiv
genutzt, um Dynamik auf &lt;a href="https://docs.rs/petgraph/"&gt;petgraph&lt;/a&gt; Graphen zu
simulieren und ihren Zustand per &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; zu&amp;nbsp;visualisieren.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph state visualized with graph-tool" class="invertable" src="/img/inlinepy_graph.png"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Python"></category></entry><entry><title>Pebble Rules</title><link href="https://blog.schawe.me/pebble-rules.html" rel="alternate"></link><published>2017-12-10T15:57:00+01:00</published><updated>2017-12-10T15:57:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-12-10:/pebble-rules.html</id><summary type="html">&lt;p&gt;Im letzten Monat habe ich jemanden getroffen, auf dessen &lt;a href="http://clisby.net/projects/pebble_app/"&gt;Armbanduhr eine &lt;span class="caps"&gt;MCMC&lt;/span&gt; Simulation von Hamilton-Pfaden&lt;/a&gt;
auf einem quadratischen Gitter liefen. Ich war derartig begeistert, dass ich
beschlossen habe auch etwas auf meiner Pebble simulieren zu lassen. Aufgrund
der geringen Auflösung des Displays (&lt;span class="math"&gt;\(144 \times 168\)&lt;/span&gt;) bieten sich &amp;#8220;blockige&amp;#8221;
Visualisierungen an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Im letzten Monat habe ich jemanden getroffen, auf dessen &lt;a href="http://clisby.net/projects/pebble_app/"&gt;Armbanduhr eine &lt;span class="caps"&gt;MCMC&lt;/span&gt; Simulation von Hamilton-Pfaden&lt;/a&gt;
auf einem quadratischen Gitter liefen. Ich war derartig begeistert, dass ich
beschlossen habe auch etwas auf meiner Pebble simulieren zu lassen. Aufgrund
der geringen Auflösung des Displays (&lt;span class="math"&gt;\(144 \times 168\)&lt;/span&gt;) bieten sich &amp;#8220;blockige&amp;#8221;
Visualisierungen an. Glücklicherweise habe ich schon genügend Spielereien
geschrieben, die sich eignen
[&lt;a href="https://blog.schawe.me/labyrinthartiger-zellularer-automat.html"&gt;1&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html"&gt;2&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/rule-90.html"&gt;3&lt;/a&gt;,
    &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;4&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Pebble wurde zwar inzwischen von Fitbit aufgekauft, aber das &lt;span class="caps"&gt;SDK&lt;/span&gt; ist noch
verfügbar. Die neueren Exemplare lassen sich per JavaScript programmieren,
meine &amp;#8220;Kickstarter Edition&amp;#8221; aus der ersten Generation allerdings noch&amp;nbsp;nicht.&lt;/p&gt;
&lt;p&gt;Da ich meine Uhr also in C programmieren muss, konnte ich allerdings den
den alten Code aus &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Wolfram&amp;#8217;s Rules&lt;/a&gt;&amp;nbsp;wiederbenutzen.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/pebble-rules.jpg" width="800" height="1000" class="fixed-size-800"&gt;
&lt;source src="/vid/pebble-rules.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Code ist auf &lt;a href="https://github.com/surt91/pebble-wolfram"&gt;GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Bild"></category><category term="C"></category><category term="Code"></category><category term="GitHub"></category></entry><entry><title>A Fractal A Day</title><link href="https://blog.schawe.me/randomFractals.html" rel="alternate"></link><published>2017-11-29T10:47:00+01:00</published><updated>2017-11-29T10:47:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-11-29:/randomFractals.html</id><summary type="html">&lt;p&gt;Vor einiger Zeit habe ich ein Programm geschrieben, das verschiedene Typen von
Fraktalen generiert. Da viele Methoden Fraktale zu generieren relativ einfach
zu parallelisieren sind und großen Bedarf an Rechenkraft haben, habe ich mich
entschieden es in Rust zu implementieren. Bei Interesse kann das
&lt;a href="https://github.com/surt91/AFractalADay"&gt;Programm von Github bezogen&lt;/a&gt;&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor einiger Zeit habe ich ein Programm geschrieben, das verschiedene Typen von
Fraktalen generiert. Da viele Methoden Fraktale zu generieren relativ einfach
zu parallelisieren sind und großen Bedarf an Rechenkraft haben, habe ich mich
entschieden es in Rust zu implementieren. Bei Interesse kann das
&lt;a href="https://github.com/surt91/AFractalADay"&gt;Programm von Github bezogen&lt;/a&gt;&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Da Fraktale nett anzuschauen sind, ist dieser Beitrag voller hochaufgelöster
Bilder. Damit diese Seite dennoch flüssig geladen wird &amp;#8212; auch bei langsamen
Verbindungen, habe ich extra für diesen Eintrag in die
&lt;a href="https://blog.schawe.me/image-preview.html"&gt;Technik dieses Blogs&lt;/a&gt; eingegriffen.
Außerdem gibt es &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt; auf
Twitter, der täglich ein zufälliges Fraktal&amp;nbsp;tweetet.&lt;/p&gt;
&lt;h3&gt;Escape&amp;nbsp;Time&lt;/h3&gt;
&lt;p&gt;Die erste Klasse von Fraktalen, die ich hier zeigen möchte, wird definiert durch
das Konvergenzverhalten des wiederholten Anwendens einer Funktion. Was genau
dieser Satz bedeutet, lässt sich am besten an einem Beispiel&amp;nbsp;erklären.&lt;/p&gt;
&lt;h4&gt;Mandelbrot-Menge&lt;/h4&gt;
&lt;p&gt;Das vermutlich bekannteste Fraktal ist das Apfelmännchen, das die
Mandelbrotmenge visualisiert. Das ist die Menge der komplexen Zahlen
&lt;span class="math"&gt;\(c = x + iy,\)&lt;/span&gt; die nicht konvergieren, wenn die Funktion &lt;span class="math"&gt;\(f_c(z) = z^2 + c\)&lt;/span&gt;
wiederholt angewendet wird. Also wenn die&amp;nbsp;Folge
&lt;/p&gt;
&lt;div class="math"&gt;$$f_c(0), f_c(f_c(0)), f_c(f_c(f_c(0))), ...$$&lt;/div&gt;
&lt;p&gt;
gegen einen endlichen Wert&amp;nbsp;strebt.&lt;/p&gt;
&lt;p&gt;Wenn man jeden Punkt &lt;span class="math"&gt;\(c\)&lt;/span&gt; auf der komplexen Ebene entsprechend des Konvergenzverhaltens
bezüglich dieser Folge einfärbt &amp;#8212; schwarz wenn es konvergiert, blau für langsame
Divergenz, rot für schnelle Divergenz &amp;#8212; erhält man ein solches&amp;nbsp;Bild:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/mandelbrot.png"&gt;&lt;img alt="Zoom auf das Apfelmännchen" src="/img/mandelbrot1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dies ist ein Zoom auf den Rand des Apfelmännchens. Tatsächlich ist die
Mandelbrotmenge kein Fraktal im eigentlichen Sinne, da seine fraktale Dimension
2 ist &amp;#8212; der schwarze Bereich füllt eine&amp;nbsp;Fläche.&lt;/p&gt;
&lt;p&gt;Es einfach möglich dieses Fraktal zu rastern und dabei jeden Pixel parallel zu
berechnen. Eine naive Implementierung könnte wie folgt&amp;nbsp;aussehen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// convenient iterators&lt;/span&gt;
&lt;span class="cp"&gt;#[macro_use]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;::&lt;span class="n"&gt;Itertools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// parallelism&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rayon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rayon&lt;/span&gt;::&lt;span class="n"&gt;prelude&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// complex numbers&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;::&lt;span class="n"&gt;complex&lt;/span&gt;::&lt;span class="n"&gt;Complex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;raster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;: &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// generate the points, we want to raster&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iproduct&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// start a parallel iterator on the points ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;par_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// ... mapping every point ...&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;map_to_cplx_plane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// ... to the number of iterations needed to diverge&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;time_to_diverge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;map_to_cplx_plane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// TODO: here we need to get the offset and scale somehow&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x_scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y_scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;: &lt;span class="nc"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;: &lt;span class="nc"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;time_to_diverge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;: &lt;span class="nc"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;u64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// threshold is 2^2, since we compare to the square of the norm&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// as soon as the norm is &amp;gt;= 2 it is sure to diverge&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// abort after 1000 iterations&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm_sqr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_count&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ctr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Julia-Mengen&lt;/h4&gt;
&lt;p&gt;Nahe verwandt sind die Julia-Mengen. Hier benutzt man die gleiche Funktion &lt;span class="math"&gt;\(f_c\)&lt;/span&gt;,
allerdings färbt man jeden Punkt &lt;span class="math"&gt;\(z\)&lt;/span&gt; entsprechend seines Konvergenzverhaltens
bei einem festen Parameter &lt;span class="math"&gt;\(c\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/julia.png"&gt;&lt;img alt="Ein Julia-Fraktal" src="/img/julia1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tatsächlich ist jede beliebige Funktion &lt;span class="math"&gt;\(f\)&lt;/span&gt; erlaubt und nicht nur die oben erwähnte
quadratische. Mit unkonventioneller Zuordnung von Farben zu Divergenzzeiten
ergibt sich mit &lt;span class="math"&gt;\(f(z) = (-2.6-i) \cosh(z)\)&lt;/span&gt; dieses&amp;nbsp;Bild:&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/julia2.png"&gt;&lt;img alt="Ein weiteres Julia-Fraktal" src="/img/julia2_1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Newton-Fraktal&lt;/h4&gt;
&lt;p&gt;Das &lt;a href="https://de.wikipedia.org/wiki/Newton-Verfahren"&gt;Newton-Verfahren zur Findung von Nullstellen&lt;/a&gt;
startet an einem beliebigen Punkt auf einer Kurve, und berechnet die Nullstelle
der Tangente an diesem Punkt. Mit der Tangente dieses Punktes wird genauso
verfahren. Dabei sollten sich die so erhaltenen Punkte immer dichter einer
Nullstelle nähern. Bei einer komplexen Funktion können wir dies für jeden
Startpunkt iterieren. Jeder Punkt wird gegen eine Nullstelle konvergieren, der
wir eine Farbe zuordnen und den Punkt mit dieser Farbe einfärben. Wenn wir die
Sättigung davon abhängig machen, wie schnell die Konvergenz ist, sieht das
Ergebnis für &lt;span class="math"&gt;\(f(x) = z^4 + 5^{z+i} + 15\)&lt;/span&gt; so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/newton.png"&gt;&lt;img alt="Newton Fraktal für f(x) = z^4 + 5^{z+i} + 15" src="/img/newton1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chaos&amp;nbsp;Game&lt;/h3&gt;
&lt;p&gt;Eine große Klasse von Fraktalen lässt sich mit dem Chaos Game erzeugen. Man
benutzt dazu mindestens zwei Abbildungen &lt;span class="math"&gt;\(f_1(z)\)&lt;/span&gt; und &lt;span class="math"&gt;\(f_2(z)\)&lt;/span&gt;, die jeweils einen
Punkt &lt;span class="math"&gt;\(z\)&lt;/span&gt; auf einen anderen Punkt abbilden. Man wählt einen Punkt zum Starten,
bildet ihn mit einer Zufälligen der beiden Abbildungen ab, zeichnet den
resultierenden Punkt ein und wiederholt dies sehr&amp;nbsp;oft.&lt;/p&gt;
&lt;p&gt;Dieser Algorithmus ist inherent sequenziell, allerdings kann man parallel an
vielen verschiedenen Punkten starten und die Ergebnisse dieser unabhängigen
Markovketten in einem Bild&amp;nbsp;zusammenführen.&lt;/p&gt;
&lt;p&gt;In Rust könnte der entsprechende Codeschnipsel so&amp;nbsp;aussehen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_cpus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;sync&lt;/span&gt;::&lt;span class="n"&gt;mpsc&lt;/span&gt;::&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_cpus&lt;/span&gt;::&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// create a transmitter, receiver pair&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// clone a transmitter for each thread&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// generator yielding the points from the chaos game&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// using a random seed&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sampler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_sampler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// we need some histogram implementation&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Histogram&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;::&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// feed the samples into the histogram&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations_per_task&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// send the finished histogram to the receiver&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// collect all parallel computed histograms into main_hist&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main_hist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Histogram&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;main_hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Sierpinski-Dreieck und&amp;nbsp;Barnsley-Farn&lt;/h4&gt;
&lt;p&gt;Mit dieser Methode kann man alte Bekannte wie das &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Sierpinski-Dreieck&lt;/a&gt;&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/sierpinski.png"&gt;&lt;img alt="Sierpinski-Dreieck" src="/img/sierpinski.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dazu benötigt man die drei affinen Transformationen, die man alle mit gleicher
Wahrscheinlichkeit&amp;nbsp;auswählt:
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}
f_1(\vec z) &amp;amp;=\begin{pmatrix}
            -1/4         &amp;amp; \sqrt 3 / 4 \\
            -\sqrt 3 / 4 &amp;amp; -1/4
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                -1/4\\
                \sqrt 3 / 4
        \end{pmatrix}\\
f_2(\vec z) &amp;amp;=\begin{pmatrix}
            1/2 &amp;amp; 0 \\
            0   &amp;amp; 1/2
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                1/4\\
                \sqrt 3 / 4
        \end{pmatrix}\\
f_3(\vec z) &amp;amp;=\begin{pmatrix}
            -1/4 &amp;amp; -\sqrt 3 / 4 \\
            \sqrt 3 / 4   &amp;amp; 1/4
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                1\\
                0
        \end{pmatrix}
\end{align}$$&lt;/div&gt;
&lt;p&gt;Ein anderes berühmtes Beispiel ist der Barnsley-Farn. Um ihn zu erzeugen, benutzt
man die folgenden vier affinen Abbildungen, die man mit den&amp;nbsp;Wahrscheinlichkeiten
&lt;/p&gt;
&lt;div class="math"&gt;$$p_1 = 0.01, p_2 = 0.85, p_3 = 0.07, p_4 = 0.07$$&lt;/div&gt;
&lt;p&gt;
verwendet:
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}
f_1(z) &amp;amp;=\begin{pmatrix}
                0.16\\
                0
        \end{pmatrix}\\
f_2(z) &amp;amp;=\begin{pmatrix}
            0.85 &amp;amp; 0.04 \\
            0    &amp;amp; -0.04
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.85\\
                1.6
        \end{pmatrix}\\
f_3(z) &amp;amp;=\begin{pmatrix}
            0.2 &amp;amp; -0.26 \\
            0   &amp;amp; 0.23
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.22\\
                1.6
        \end{pmatrix}\\
f_4(z) &amp;amp;=\begin{pmatrix}
            -0.15 &amp;amp; 0.28 \\
            0     &amp;amp; 0.26
        \end{pmatrix}
        \cdot
        \begin{pmatrix}
            z_x \\
            z_y
        \end{pmatrix}
        +
        \begin{pmatrix}
                0.24\\
                0.44
        \end{pmatrix}\\
\end{align}$$&lt;/div&gt;
&lt;p&gt;Als Ergebnis erhält man diesen&amp;nbsp;Farn.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/fern.png"&gt;&lt;img alt="Bernsley-Farn" src="/img/fern.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Fractal&amp;nbsp;Flame&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://flam3.com/flame_draves.pdf"&gt;Fractal Flame&lt;/a&gt; ist der Name einer Klasse
von Zufallsfraktalen, die nach dem gleichen Muster wie oben aus einer Reihe
affiner Transformationen &lt;span class="math"&gt;\(A_i\)&lt;/span&gt; bestehen. Zusätzlich können die affinen
Transformationen mit einer nichtlinearen &lt;em&gt;Variation&lt;/em&gt; &lt;span class="math"&gt;\(V_j\)&lt;/span&gt; erweitert werden,
sodass &lt;span class="math"&gt;\(f_i(\vec z) = V_j(A_i(\vec z))\)&lt;/span&gt; (oder Linearkombinationen dieser Variationen).
Zur Visualisierung werden die Punkte nicht direkt gezeichnet, sondern in ein
Histogramm eingetragen, aus dem die Farbintensitäten typischerweise
logarithmisch berechnet&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/horseshoe.png"&gt;&lt;img alt="Fractal Flame, 'Horseshoe' Variation" src="/img/horseshoe1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hier wird jedem &lt;span class="math"&gt;\(f_i\)&lt;/span&gt; ein Farbton zugeordnet. Die Farbe eines Punktes ist eine
Mischung dieser Farben, die widerspiegelt, wie oft eine Abbildung genutzt wurde,
um an diesen Punkt zu&amp;nbsp;gelangen.&lt;/p&gt;
&lt;p&gt;Interessanterweise sind diese Systeme anscheinend sehr anfällig für schlechte
Zufallszahlen, was sich in &amp;#8220;Löchern&amp;#8221; in den ansonsten glatten Flächen bemerkbar&amp;nbsp;macht.&lt;/p&gt;
&lt;h4&gt;Möbius&amp;nbsp;Flame&lt;/h4&gt;
&lt;p&gt;Diese Fraktale sind nahezu identisch zu den Fractal Flames, nur dass anstatt von
affinen Transformationen Möbius Transformationen auf der komplexen Ebene genutzt&amp;nbsp;werden.&lt;/p&gt;
&lt;div class="math"&gt;$$f_i(z) = \frac{a_i z + b_i}{c_i z + d_i}$$&lt;/div&gt;
&lt;p&gt;&lt;a href="/img/mobius.png"&gt;&lt;img alt="Möbius Flame" src="/img/mobius1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Wie findet man &amp;#8220;gute&amp;#8221;&amp;nbsp;Parameter?&lt;/h4&gt;
&lt;p&gt;Offenbar hat dieser Typ von Fraktal sehr viele freie Parameter. Um hübsche
Resultate zu generieren, müssen sie angepasst werden. Tatsächlich gibt es mit
&lt;a href="https://electricsheep.org/"&gt;electric sheep&lt;/a&gt; (ich hoffe stark, dass es eine
&lt;a href="https://de.wikipedia.org/wiki/Tr%C3%A4umen_Androiden_von_elektrischen_Schafen%3F"&gt;Blade Runner&lt;/a&gt;
Referenz ist) ein Crowdsourcing-Projekt,
das mithilfe von evolutionären Algorithmen und dem Feedback von Menschen
besonders ansehnliche Fraktale&amp;nbsp;erzeugt.&lt;/p&gt;
&lt;p&gt;Für mein Programm habe ich eine simplere Methode genutzt. Damit man ein Fraktal
gut sehen kann, sollte seine fraktale Dimension größer als 1 sein. Abschätzbar
ist es relativ einfach über die &lt;a href="https://en.wikipedia.org/wiki/Correlation_dimension"&gt;Korrelations-Dimension&lt;/a&gt;.
Dazu misst man die paarweisen Abstände von Punkten und misst den Exponenten ihrer
kumulativen&amp;nbsp;Verteilungsfunktion.&lt;/p&gt;
&lt;p&gt;Kombiniert mit einigen Heuristiken, die zu langgestreckte Fraktale verhindert,
sind die Ergebnisse meist&amp;nbsp;ansprechend&lt;/p&gt;
&lt;h3&gt;Weitere&amp;nbsp;Fraktale&lt;/h3&gt;
&lt;p&gt;Es gibt natürlich viel mehr Typen von Fraktalen. Auch wenn &lt;a href="https://twitter.com/AFractalADay"&gt;@AFractalADay&lt;/a&gt;
sie bisher nicht zeichnen kann, habe ich einige Bilder angefertigt, die ich
hier auch gerne zeigen&amp;nbsp;möchte.&lt;/p&gt;
&lt;h4&gt;Diffusionsbegrenztes&amp;nbsp;Wachstum&lt;/h4&gt;
&lt;p&gt;Diffusionsbegrenztes Wachstum bildet das Wachstum von Kristallen in stark
verdünnten Lösungen ab. Man startet mit einem Seed und lässt dann einzelne
Teilchen diffundieren, bis sie auf dem Nachbarfeld eines Seeds landen, wo sie
dann bleiben und Teil des Seeds werden. Dieser Prozess bildet verästelte
Strukturen&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/dla_core.png"&gt;&lt;img alt="Diffusionsbegrenztes Wachstum" src="/img/dla_core1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Random&amp;nbsp;Walks&lt;/h4&gt;
&lt;p&gt;Einige Arten von Random Walks haben eine fraktale Dimension zwischen 1 und 2,
was sie zu ansehnlichen Fraktalen machen sollte. Der Smart Kinetic Self
Avoiding Walk, der in meinem &lt;a href="https://blog.schawe.me/rsnake.html"&gt;rsnake&lt;/a&gt; die Strategie des
Autopiloten ist, hat eine fraktale Dimension von &lt;span class="math"&gt;\(\frac{7}{4}\)&lt;/span&gt;. 100000 Schritte
sehen so&amp;nbsp;aus:&lt;/p&gt;
&lt;p&gt;&lt;a class="invertable" href="/img/sksaw.png"&gt;&lt;img alt="Smart Kinetic Self Avoiding Walk, 100000 Schritte" src="/img/sksaw1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Code"></category><category term="Chaos"></category><category term="Formel"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>jsnake</title><link href="https://blog.schawe.me/jsnake.html" rel="alternate"></link><published>2017-11-02T17:30:00+01:00</published><updated>2017-11-02T17:30:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2017-11-02:/jsnake.html</id><summary type="html">&lt;p&gt;Bisher habe ich immer nur kurze Fragmente in JavaScript geschrieben, die
meist nur Gimmicks bezweckten oder Bibliotheken aufrufen. JavaScript ist im
Moment möglicherweise die wichtigste Sprache: Schließlich ist sämtlicher
clientseitiger Code des Webs JavaScript &amp;#8212; und dank Node wohl auch nennenswerte
Teile des Servercodes. Zumindest macht man nichts falsch, wenn man …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bisher habe ich immer nur kurze Fragmente in JavaScript geschrieben, die
meist nur Gimmicks bezweckten oder Bibliotheken aufrufen. JavaScript ist im
Moment möglicherweise die wichtigste Sprache: Schließlich ist sämtlicher
clientseitiger Code des Webs JavaScript &amp;#8212; und dank Node wohl auch nennenswerte
Teile des Servercodes. Zumindest macht man nichts falsch, wenn man sich etwas
mit JavaScript vertraut macht.
Deshalb ist das neuste &amp;#8212; und simpelste &amp;#8212; Mitglied meiner Snake Sammlung
[&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/rsnake.html"&gt;4&lt;/a&gt;]
in JavaScript&amp;nbsp;gehalten.&lt;/p&gt;
&lt;p&gt;Ausprobieren kann man es gleich&amp;nbsp;hier:&lt;/p&gt;
&lt;canvas id="jsnake" class="fixed-size-400 center"&gt;&lt;/canvas&gt;
&lt;script async src="/js/jsnake/jsnake.js"&gt;&lt;/script&gt;

&lt;p&gt;In der Spielwelt herrschen helikale Randbedingungen, hauptsächlich weil es etwas
anderes ist als gewöhnliche periodische Ränder. Außerdem hat es den Vorteil,
dass man keinen Pause-Modus braucht, weil diese Randbedingungen dafür sorgen,
dass die Schlange sich nicht beißt, wenn man sie einfach geradeaus laufen&amp;nbsp;lässt.&lt;/p&gt;
&lt;p&gt;Ich habe gehört, dass JavaScript sich in den letzten Jahren stark
weiterentwickelt hat. Tatsächlich scheint mir
diese Sprache einige interessante Sprachelemente erhalten zu haben, wie &lt;em&gt;arrow
functions&lt;/em&gt; &lt;code&gt;x =&amp;gt; x*x&lt;/code&gt; für lambdas oder den &lt;em&gt;spread operator&lt;/em&gt; &lt;code&gt;...&lt;/code&gt; den ich am
ehesten mit Pythons &lt;em&gt;splat&lt;/em&gt; &lt;code&gt;*&lt;/code&gt; vergleichen möchte.
Ich will nicht behaupten, dass das folgende kartesische Produkt der beste Code
oder leserlich wäre, aber interessant&amp;nbsp;allemal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SIZE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anscheinend gibt es mit der nächsten geplanten Version (&lt;span class="caps"&gt;ES6&lt;/span&gt;) noch mehr nette
Sprachelemente. Unter anderem &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"&gt;Module&lt;/a&gt;.
Ich bin geradezu sprachlos, dass man bisher keine Sprachunterstützung für
die Verteilung des Quellcodes über mehrere Dateien hatte. Anscheinend bin ich
noch zu sehr von den Konzepten der &amp;#8220;C-artigen&amp;#8221; Sprachen&amp;nbsp;beeinflusst.&lt;/p&gt;
&lt;p&gt;Da &lt;code&gt;jsnake&lt;/code&gt; nur ein paar Zeilen in einer Datei sind und sich ein ganzes GitHub
Repository deshalb nicht lohnt, habe ich es in einen &lt;a href="https://gist.github.com/surt91/42eb076974e325433b66a5077d4623eb"&gt;Gist&lt;/a&gt;&amp;nbsp;hochgeladen.&lt;/p&gt;</content><category term="Code"></category><category term="JavaScript"></category><category term="Game"></category><category term="Snake"></category></entry><entry><title>rsnake</title><link href="https://blog.schawe.me/rsnake.html" rel="alternate"></link><published>2017-09-06T17:40:00+02:00</published><updated>2017-09-06T17:40:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-09-06:/rsnake.html</id><summary type="html">&lt;p&gt;In meinem letzten Einträgen ist bereits angeklungen, dass ich Rust mag. Und wie
die Erfahrung [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;]
zeigt, dauert es nie lange bis ich eine Snake-Abwandlung&amp;nbsp;programmiere.&lt;/p&gt;
&lt;p&gt;Dieses Mal verfolgt der Autopilot die Strategie des &lt;a href="https://doi.org/10.1103/PhysRevB.31.2993"&gt;smart kinetic walk&lt;/a&gt;,
(ein Model aus der statistischen Physik zur Simulation von Polymeren,)
um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In meinem letzten Einträgen ist bereits angeklungen, dass ich Rust mag. Und wie
die Erfahrung [&lt;a href="https://blog.schawe.me/snake.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/pysnake.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/msnake.html"&gt;3&lt;/a&gt;]
zeigt, dauert es nie lange bis ich eine Snake-Abwandlung&amp;nbsp;programmiere.&lt;/p&gt;
&lt;p&gt;Dieses Mal verfolgt der Autopilot die Strategie des &lt;a href="https://doi.org/10.1103/PhysRevB.31.2993"&gt;smart kinetic walk&lt;/a&gt;,
(ein Model aus der statistischen Physik zur Simulation von Polymeren,)
um sich nicht selbst zu beißen &amp;#8212; leider setzt diese Strategie ein unendlich
großes Spielfeld&amp;nbsp;voraus.&lt;/p&gt;
&lt;p&gt;Die grundlegende Idee ist, dass die Schlange immer wenn sie sich selbst begegnet
prüft welcher nächste Schritt sie in einer Schlaufe fängt und welcher nach außen
führt. Mit offenen Randbedingungen, also auf einem unendlich großen Feld lässt
sich dass das in konstanter Zeit erledigen, wenn die Schlange an jedem Segment
ihres Körpers die Anzahl der Rechts- und Linksdrehungen speichert. Bei
periodischen Randbedingungen funktioniert das allerdings nicht mehr, sodass der
Autopilot eine Best-First-Search durchführt. Auf offenen Randbedingungen würde
es ausreichen einen Weg vom potentiell nächstem Schritt zu einem beliebigen
Punkt außerhalb eines Rechtecks, das die Schlange einschließt, zu finden.
Bei periodischen Randbedingungen ist es nicht so eindeutig. Ich habe mich
entschlossen, dass die Schlange sich nur so bewegen soll, dass immer ein Pfad
zu ihrem Schwanz existiert. Tatsächlich führt diese Strategie zu unterhaltsamen
und nicht perfekten&amp;nbsp;Spielverläufen.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/rsnake.png" width="400" height="400" class="fixed-size-400"&gt;
&lt;source src="/vid/rsnake.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Vollständigkeit halber sind noch ein nicht vorausplanender und ein
perfekter, aber langweiliger, Autopilot&amp;nbsp;dabei.&lt;/p&gt;
&lt;p&gt;Da die Quellen auf &lt;a href="https://github.com/surt91/rsnake"&gt;GitHub&lt;/a&gt; liegen, ist
es nur vier Zeilen entfernt &amp;#8212; weniger, wenn der Rustcompiler bereits installiert&amp;nbsp;ist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# curl https://sh.rustup.rs -sSf | sh  # never copy `| sh` in your terminal&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/surt91/rsnake
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rsnake
&lt;span class="w"&gt;    &lt;/span&gt;cargo&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="Rust"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Vicsek</title><link href="https://blog.schawe.me/vicsek.html" rel="alternate"></link><published>2017-08-08T21:46:00+02:00</published><updated>2017-08-08T21:46:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-08-08:/vicsek.html</id><summary type="html">&lt;p&gt;Das &lt;a href="https://doi.org/10.1103/PhysRevLett.75.1226"&gt;Vicsek-Modell&lt;/a&gt; wurde 1995
vorgeschlagen, um das Schwarmverhalten von Vögeln oder Fischen zu modellieren.
Die Idee ist, dass jedes Individuum seine Bewegungsrichtung an der seiner
Nachbarn anpasst. Wenn jedes Individuum genügend Nachbarn hat und die
Störeinflüsse nicht zu groß sind, bilden sich Schwärme. Videos von solchen
Schwärmen werden auf allen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Das &lt;a href="https://doi.org/10.1103/PhysRevLett.75.1226"&gt;Vicsek-Modell&lt;/a&gt; wurde 1995
vorgeschlagen, um das Schwarmverhalten von Vögeln oder Fischen zu modellieren.
Die Idee ist, dass jedes Individuum seine Bewegungsrichtung an der seiner
Nachbarn anpasst. Wenn jedes Individuum genügend Nachbarn hat und die
Störeinflüsse nicht zu groß sind, bilden sich Schwärme. Videos von solchen
Schwärmen werden auf allen größeren Konferenzen der Statistischen Physik
gezeigt &amp;#8212; und jetzt auch&amp;nbsp;hier.&lt;/p&gt;
&lt;video controls loop autoplay poster="/img/vicsek.png"&gt;
&lt;source src="/vid/vicsek.mp4" type="video/mp4"&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Auf &lt;a href="https://github.com/surt91/vicsek"&gt;GitHub&lt;/a&gt; findet sich das Programm,
das ich für obiges Video geschrieben habe. Es ist in Rust geschrieben und
zeigt die Simulation per Piston auf dem&amp;nbsp;Bildschirm.&lt;/p&gt;
&lt;p&gt;Ich habe sehr großen Gefallen an Rust gefunden &amp;#8212; gerade für ein Projekt wie
dieses scheint es ideal geeignet. Es ist so schnell wie C, aber man muss sich
keinerlei Gedanken um den Speicher machen und einige andere Fehlerklassen, die
der Compiler direkt verhindert. Rayon macht Parallelisierung so einfach wie
OpenMP &amp;#8212; mit dem Vorteil, dass der Compiler einen Fehler ausgibt, falls es
eine Variable gibt, aus der parallel gelesen und geschrieben&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Als Beispiel, warum ich Rust als sehr leserlich und elegant empfinde, möchte
ich folgendes (unvollständige) Beispiel&amp;nbsp;ansehen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Proximity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Vicsek&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;proximity&lt;/span&gt;: &lt;span class="nc"&gt;Proximity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vicsek&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proximity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Proximity&lt;/span&gt;::&lt;span class="n"&gt;Neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_direction_neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Proximity&lt;/span&gt;::&lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_direction_disk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Methode &lt;code&gt;update()&lt;/code&gt; passt die Richtung an, in die ihr Argument im nächsten
Zeitschritt fliegen soll. In meiner Simulation gibt es zwei Möglichkeiten:
entweder orientiert man sich an seinen &lt;code&gt;n&lt;/code&gt; nächsten Nachbarn oder an allen
Vögeln innerhalb eines Radius von &lt;code&gt;r&lt;/code&gt;. Der Datentyp &lt;code&gt;Proximity&lt;/code&gt; kann eines von
beiden beinhalten &amp;#8212; welches vorhanden ist, kann elegant per Pattern-Matching
ermittelt&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Brauche ich länger, um Rust zu schreiben als C oder C++? Vermutlich, aber ich
verbringe weniger Zeit mit dem Debuggen. Netto also mehr&amp;nbsp;Spaß.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Rust"></category><category term="Code"></category></entry><entry><title>A Graph a Day</title><link href="https://blog.schawe.me/randomGraphs.html" rel="alternate"></link><published>2017-05-13T17:36:00+02:00</published><updated>2017-05-13T17:36:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2017-05-13:/randomGraphs.html</id><summary type="html">&lt;p&gt;Vor einiger Zeit habe ich &lt;a href="https://twitter.com/randomGraphs"&gt;@randomGraphs&lt;/a&gt;
geschrieben: Ein Twitterbot, der einen Zufallsgraphen pro Tag&amp;nbsp;tweetet.&lt;/p&gt;
&lt;p&gt;Die meisten Graphtypen, die er darstellen kann stammen aus der NetworkX
Bibliothek oder sind reale Netzwerke. Ein paar &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Proximity&lt;/a&gt;
&lt;a href="https://blog.schawe.me/relative-neighborhood-graph.html"&gt;Graphs&lt;/a&gt; habe ich selbst geschrieben.
Die Darstellung und gegebenenfalls das Layout übernimmt Cytoscape oder
&lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; (dessen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor einiger Zeit habe ich &lt;a href="https://twitter.com/randomGraphs"&gt;@randomGraphs&lt;/a&gt;
geschrieben: Ein Twitterbot, der einen Zufallsgraphen pro Tag&amp;nbsp;tweetet.&lt;/p&gt;
&lt;p&gt;Die meisten Graphtypen, die er darstellen kann stammen aus der NetworkX
Bibliothek oder sind reale Netzwerke. Ein paar &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Proximity&lt;/a&gt;
&lt;a href="https://blog.schawe.me/relative-neighborhood-graph.html"&gt;Graphs&lt;/a&gt; habe ich selbst geschrieben.
Die Darstellung und gegebenenfalls das Layout übernimmt Cytoscape oder
&lt;a href="https://graph-tool.skewed.de/"&gt;graph-tool&lt;/a&gt; (dessen Autor diesem Bot&amp;nbsp;folgt).&lt;/p&gt;
&lt;p&gt;Bei diesem Projekt habe ich exzessiv Gebrauch von Pythons &lt;code&gt;Decorator&lt;/code&gt; und
&lt;code&gt;Introspection&lt;/code&gt; gemacht, sodass man, um einen neuen Graphtyp einzuführen
nur eine Methode schreiben muss, die eine Graph-Datenstruktur zurück gibt.
Einstellungen, welche Darstellungen erlaubt sind, werden per &lt;code&gt;decorator&lt;/code&gt;
getätigt und alle Methoden werden per Introspection automatisch zum Pool
hinzugefügt, aus dem der Zufallsgenerator&amp;nbsp;zieht.&lt;/p&gt;
&lt;p&gt;Eine typische Methode sieht etwa so&amp;nbsp;aus.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@synonym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Barabasi Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@synonym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;preferential attachment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;styles_all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@layout&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kamada-kawai&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;force-directed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sfdp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fruchterman_reingold&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;radial_tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generateBarabasiAlbert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barabasi_albert_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# gen is networkx Generator&lt;/span&gt;
    &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Barabási-Albert Graph&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{name}&lt;/span&gt;&lt;span class="s2"&gt;, N = &lt;/span&gt;&lt;span class="si"&gt;{N}&lt;/span&gt;&lt;span class="s2"&gt;, m = &lt;/span&gt;&lt;span class="si"&gt;{m}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Und liefert für &lt;span class="math"&gt;\(N=226, m=1\)&lt;/span&gt; und das &lt;code&gt;radial_tree&lt;/code&gt; Layout beispielsweise
diesen Graph. Die Größe der Knoten wird hier von der
&lt;a href="https://en.wikipedia.org/wiki/Betweenness_centrality"&gt;Betweenness Centrality&lt;/a&gt;&amp;nbsp;bestimmt.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph" src="/img/barabasi.png"&gt;&lt;/p&gt;
&lt;p&gt;Die &lt;code&gt;@synonym&lt;/code&gt; Decorators ermöglichen die zweite Funktion des Bots, denn
er tweetet nicht nur einmal am Tag einen zufälligen Graphen, sondern reagiert
auch auf Mentions. Falls in der Mention der Name der Methode oder eines der
per &lt;code&gt;@synonym&lt;/code&gt; registrierten Worte auftaucht, antwortet er mit einem Bild des
entsprechenden Graphen. Dank &lt;code&gt;fuzzywuzzy&lt;/code&gt; ist es sogar resistent gegen&amp;nbsp;Tippfehler.&lt;/p&gt;
&lt;p&gt;Twitter unterstützt leider keine Vektorgrafiken und wandelt Bilder gerne in
stark komprimierte &lt;code&gt;.jpg&lt;/code&gt;, was gerade bei diesen Graphen zu störenden
Artefakten führt. Dagegen hilft es, wenn ich einen Rand aus transparenten
Pixeln dem Bild hinzufüge. Das führt dazu, dass Twitter &lt;code&gt;.jpg&lt;/code&gt; nicht als
geeignetes Format ansieht und die Bilder im verlustfreien &lt;code&gt;.png&lt;/code&gt; ausliefert.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;-alpha&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;-channel&lt;span class="w"&gt; &lt;/span&gt;RGBA&lt;span class="w"&gt; &lt;/span&gt;-bordercolor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rgba(0,0,0,0)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-border&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1x1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;input.png&lt;span class="w"&gt; &lt;/span&gt;output.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Graph" src="/img/agraphaday.png"&gt;&lt;/p&gt;
&lt;p&gt;Der komplette Quellcode ist auf &lt;a href="https://github.com/surt91/AGraphADay"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Bild"></category><category term="Python"></category><category term="Code"></category><category term="GitHub"></category><category term="Twitter-Bot"></category></entry><entry><title>make</title><link href="https://blog.schawe.me/make.html" rel="alternate"></link><published>2016-11-02T15:41:00+01:00</published><updated>2016-11-02T15:41:00+01:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-11-02:/make.html</id><summary type="html">&lt;p&gt;Als Obi-Wan zu Luke gesagt&amp;nbsp;hat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the weapon of a Jedi Knight.
Not as clumsy or random as a blaster;
an elegant weapon for a more civilized&amp;nbsp;age.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Obi-Wan Kenobi&lt;/cite&gt; (1977)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meinte er vermutlich &lt;code&gt;make&lt;/code&gt;. (Fun Fact: &lt;code&gt;make&lt;/code&gt; wurde auch &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;1977 veröffentlicht&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Mit wenigen Zeilen im &lt;code&gt;Makefile&lt;/code&gt; kann …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Als Obi-Wan zu Luke gesagt&amp;nbsp;hat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the weapon of a Jedi Knight.
Not as clumsy or random as a blaster;
an elegant weapon for a more civilized&amp;nbsp;age.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Obi-Wan Kenobi&lt;/cite&gt; (1977)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meinte er vermutlich &lt;code&gt;make&lt;/code&gt;. (Fun Fact: &lt;code&gt;make&lt;/code&gt; wurde auch &lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;1977 veröffentlicht&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Mit wenigen Zeilen im &lt;code&gt;Makefile&lt;/code&gt; kann man nicht nur sein &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; Projekt
kompilieren, sondern auch alle Plots neu zeichnen, die sich geändert haben.
Für unser Beispiel gehen wir davon aus, dass zum Plotten Gnuplot mit dem &lt;code&gt;epslatex&lt;/code&gt; Terminal genutzt
wird und folgende Verzeichnisstruktur des Projektes&amp;nbsp;vorliegt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
+-- data
|   + datafile1.dat
|   + datafile2.dat
+-- images
|   +-- img1.svg
|   +-- img2.tex
+-- plots
|   +-- style.gps
|   +-- plot1.gp
|   +-- plot2.gp
+-- myDocument.tex
+-- chapter1.tex
+-- chapter2.tex
+-- lit.bib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dann kümmert sich das folgende &lt;code&gt;Makefile&lt;/code&gt; darum, dass die Daten für die Plots
heruntergeladen werden, alle Plots, TikZ und .svg parallel zu .pdf gerendert
werden und sobald das geschehen ist, das Dokument kompiliert&amp;nbsp;wird.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DOCUMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;myDocument

&lt;span class="c"&gt;# get all image files from their directories&lt;/span&gt;
&lt;span class="nv"&gt;PLOTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;plots/*.gp&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;TIKZ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;images/*.tex&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SVG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;images/*.svg&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# we want the images to be pdf&lt;/span&gt;
&lt;span class="nv"&gt;PLOTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:%.gp&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SVG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG:%.svg&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;TIKZ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ:%.tex&lt;span class="o"&gt;=&lt;/span&gt;%.pdf&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;IMAGES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# get all tex files&lt;/span&gt;
&lt;span class="nv"&gt;TEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wildcard&lt;span class="w"&gt; &lt;/span&gt;*.tex&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;BIBFILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lit.bib

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;DOKUMENT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.&lt;span class="n"&gt;pdf&lt;/span&gt;

&lt;span class="c"&gt;# we need chapters, images and the bib file to create our document&lt;/span&gt;
&lt;span class="c"&gt;# also recompile, whenever one of those changes&lt;/span&gt;
&lt;span class="nf"&gt;$(DOCUMENT).pdf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TEX&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;IMAGES&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;BIBFILE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;$(DOCUMENT).pdf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;tex&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;biber&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null

&lt;span class="c"&gt;# gnuplot generates texfiles from the .gp files&lt;/span&gt;
&lt;span class="c"&gt;# make sure to regenerate all tex files, if the style&lt;/span&gt;
&lt;span class="c"&gt;# or the data changes&lt;/span&gt;
&lt;span class="nf"&gt;%.tex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;gp&lt;/span&gt; &lt;span class="n"&gt;plots&lt;/span&gt;/&lt;span class="n"&gt;style&lt;/span&gt;.&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gnuplot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# use this rule to convert .svg to pdf&lt;/span&gt;
&lt;span class="nf"&gt;$(SVG)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;svg&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inkscape&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;*F&lt;span class="k"&gt;)&lt;/span&gt;.pdf&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# use this rule only to generate .pdf from the &amp;quot;image type&amp;quot; .tex files&lt;/span&gt;
&lt;span class="nf"&gt;$(TIKZ) $(PLOTS)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;pdf&lt;/span&gt;: %.&lt;span class="n"&gt;tex&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;D&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pdflatex&lt;span class="w"&gt; &lt;/span&gt;-interaction&lt;span class="o"&gt;=&lt;/span&gt;batchmode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&amp;lt;F&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;log,aux&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;-inc.eps&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;-inc-eps-converted-to.pdf

&lt;span class="c"&gt;# rule to extract data from its archive&lt;/span&gt;
&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%: %.&lt;span class="n"&gt;tar&lt;/span&gt;.&lt;span class="n"&gt;xz&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-xf&lt;span class="w"&gt; &lt;/span&gt;$&amp;lt;

&lt;span class="c"&gt;# rule to download the archive with the data&lt;/span&gt;
&lt;span class="nf"&gt;%.tar.xz&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;-nv&lt;span class="w"&gt; &lt;/span&gt;https://some.domain.tld/where/your/data/is/&lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proper&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;data
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DOCUMENT&lt;span class="k"&gt;)&lt;/span&gt;.pdf

&lt;span class="c"&gt;# delete temporary files&lt;/span&gt;
&lt;span class="nf"&gt;proper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;data.tar.xz
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:.pdf&lt;span class="o"&gt;=&lt;/span&gt;.eps&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*-inc.eps&lt;span class="w"&gt; &lt;/span&gt;*-inc-eps-converted-to.pdf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PLOTS:.pdf&lt;span class="o"&gt;=&lt;/span&gt;.tex&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;plots/fit.log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TIKZ&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SVG&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DOCUMENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;log,aux,bbl,blg,toc,out,lof,lot,snm,nav,tec,glg,glo,gls,xdy,acn,acr,alg,bcf,run.xml&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dazu baut &lt;code&gt;make&lt;/code&gt; einen gerichteten azyklischen Graphen (&lt;span class="caps"&gt;DAG&lt;/span&gt;) aus den
Abhängigkeiten auf und führt die Dinge, deren Abhängigkeiten erfüllt sind,
parallel&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;Das grundlegende Element einer &lt;code&gt;Makefile&lt;/code&gt; sind die Rules, die generell so
aufgebaut&amp;nbsp;sind&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prerequisites&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dabei gibt die erste Zeile die Abhängigkeiten welche &lt;code&gt;prerequisites&lt;/code&gt; bestehen
müssen, um durch Ausführung des &lt;code&gt;recipe&lt;/code&gt; die &lt;code&gt;targets&lt;/code&gt; zu&amp;nbsp;erstellen.&lt;/p&gt;
&lt;p&gt;Die Nützlichkeit von &lt;code&gt;make&lt;/code&gt; wird zu großen Teilen durch automatische
Variablen (zB. &lt;code&gt;$*&lt;/code&gt;) oder Pattern Rules (&lt;code&gt;%.pdf&lt;/code&gt;) hergestellt.
Dazu verweise ich allerdings lieber auf die &lt;a href="https://www.gnu.org/software/make/manual/"&gt;offizielle Dokumentation&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="make"></category><category term="LaTeX"></category><category term="TikZ"></category><category term="Gnuplot"></category></entry><entry><title>Labyrinthartiger Zellulärer Automat</title><link href="https://blog.schawe.me/labyrinthartiger-zellularer-automat.html" rel="alternate"></link><published>2016-10-14T21:38:00+02:00</published><updated>2016-10-14T21:38:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-10-14:/labyrinthartiger-zellularer-automat.html</id><summary type="html">&lt;p&gt;Der wohl berühmteste zelluläre Automat ist vermutlich &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;.
Er und nahe Verwandte sind geradezu lächerlich gut untersucht. &lt;a href="http://www.conwaylife.com/"&gt;Das LifeWiki&lt;/a&gt;
gibt einen ganz guten Überblick.
Die Regeln sind einfach: Jede Zelle hat 8 Nachbarn, wenn genau 3 Nachbarn leben,
erwacht sie auch zum Leben, bei weniger als …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Der wohl berühmteste zelluläre Automat ist vermutlich &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;.
Er und nahe Verwandte sind geradezu lächerlich gut untersucht. &lt;a href="http://www.conwaylife.com/"&gt;Das LifeWiki&lt;/a&gt;
gibt einen ganz guten Überblick.
Die Regeln sind einfach: Jede Zelle hat 8 Nachbarn, wenn genau 3 Nachbarn leben,
erwacht sie auch zum Leben, bei weniger als 2 oder mehr als 3 stirbt sie (23/3).
Wenn man die Regeln des Automaten ändert, kann man mit 12345/3 &lt;a href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html"&gt;labyrinth&lt;/a&gt;artige
Strukturen&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/cellular_maze.png"&gt;
&lt;source src="/vid/cellular_maze.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/610615d7204a8994ed1145be710df130"&gt;Gist auf GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category></entry><entry><title>Relative Neighborhood Graph</title><link href="https://blog.schawe.me/relative-neighborhood-graph.html" rel="alternate"></link><published>2016-10-02T15:34:00+02:00</published><updated>2016-10-02T15:34:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-10-02:/relative-neighborhood-graph.html</id><summary type="html">&lt;video controls loop autoplay poster="/img/rng.png" width="100%"&gt;
&lt;source src="/vid/rng.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Zu jedem Zeitpunkt ist im obigen Video ein Relative Neighborhood Graph (&lt;span class="caps"&gt;RNG&lt;/span&gt;) zu
sehen. Der &lt;span class="caps"&gt;RNG&lt;/span&gt; verbindet Knoten miteinander, die nahe beieinander sind.
Für die Knotenmenge &lt;span class="math"&gt;\(V\)&lt;/span&gt; muss also eine Metrik definiert sein, sodass eine
Distanz &lt;span class="math"&gt;\(d_{ij}\)&lt;/span&gt; zwischen zwei Knoten definiert …&lt;/p&gt;</summary><content type="html">&lt;video controls loop autoplay poster="/img/rng.png" width="100%"&gt;
&lt;source src="/vid/rng.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Zu jedem Zeitpunkt ist im obigen Video ein Relative Neighborhood Graph (&lt;span class="caps"&gt;RNG&lt;/span&gt;) zu
sehen. Der &lt;span class="caps"&gt;RNG&lt;/span&gt; verbindet Knoten miteinander, die nahe beieinander sind.
Für die Knotenmenge &lt;span class="math"&gt;\(V\)&lt;/span&gt; muss also eine Metrik definiert sein, sodass eine
Distanz &lt;span class="math"&gt;\(d_{ij}\)&lt;/span&gt; zwischen zwei Knoten definiert ist. Dann verbindet der &lt;span class="caps"&gt;RNG&lt;/span&gt;
alle Knoten, die die&amp;nbsp;Bedingung
&lt;/p&gt;
&lt;div class="math"&gt;$$
    d_{ij} \le \max(d_{ik}, d_{kj}) \quad \forall k \in V\setminus\{i, j\}
$$&lt;/div&gt;
&lt;p&gt;
erfüllen.&lt;/p&gt;
&lt;p&gt;Dementsprechend simpel kann man einen &lt;span class="caps"&gt;RNG&lt;/span&gt;&amp;nbsp;erzeugen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Euclidean distance&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Insert edges according to the RNG rules into the graph G&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;possible_blocker&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;distToC1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_blocker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;distToC2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_blocker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distToC1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;distToC2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# this node is in the lune and blocks&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# generate some random coordinates&lt;/span&gt;
    &lt;span class="n"&gt;coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# draw the graph G&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_networkx_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_networkx_edges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interessanterweise tauchen alle Kanten des &lt;span class="caps"&gt;RNG&lt;/span&gt; auch in der Delaunay Triangulation
der gleichen Knotenmenge auf. Dies kann man nutzen, um RNGs in &lt;span class="math"&gt;\(\mathcal{O}(N \log N)\)&lt;/span&gt;
zu&amp;nbsp;konstruieren.&lt;/p&gt;
&lt;p&gt;Meiner persönlichen Meinung nach, bildet der &lt;span class="caps"&gt;RNG&lt;/span&gt; mit dem Verhältnis von Knoten
zu Kanten ein ästhetisches&amp;nbsp;Optimum.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="Formel"></category></entry><entry><title>Perfect Dependencies</title><link href="https://blog.schawe.me/perfect-dependencies.html" rel="alternate"></link><published>2016-09-17T20:27:00+02:00</published><updated>2016-09-17T20:27:00+02:00</updated><author><name>Hendrik Schawe</name></author><id>tag:blog.schawe.me,2016-09-17:/perfect-dependencies.html</id><summary type="html">&lt;p&gt;Man hat ein großes C++ Projekt, ändert einen Header, führt &lt;code&gt;make&lt;/code&gt; aus und
ein seltsamer Fehler tritt im Programm auf. Das liegt natürlich daran, dass
&lt;code&gt;make&lt;/code&gt; nicht alle Quelldateien neu kompiliert hat, die den Header einbinden.
Woher sollte &lt;code&gt;make&lt;/code&gt; das auch wissen? Alle Header per Hand in der &lt;code&gt;Makefile&lt;/code&gt;
einzutragen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Man hat ein großes C++ Projekt, ändert einen Header, führt &lt;code&gt;make&lt;/code&gt; aus und
ein seltsamer Fehler tritt im Programm auf. Das liegt natürlich daran, dass
&lt;code&gt;make&lt;/code&gt; nicht alle Quelldateien neu kompiliert hat, die den Header einbinden.
Woher sollte &lt;code&gt;make&lt;/code&gt; das auch wissen? Alle Header per Hand in der &lt;code&gt;Makefile&lt;/code&gt;
einzutragen und zu pflegen, ist Wahnsinn und wird den Programmierer in denselben&amp;nbsp;treiben.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; ist ein sehr allgemein gehaltenes Programm, wie ich in einem &lt;a href="https://blog.schawe.me/make.html"&gt;vorherigen Eintrag&lt;/a&gt;
gezeigt habe. Sich um Eigenheiten von C oder C++ zu kümmern fällt also nicht
in den Aufgabenbereich von &lt;code&gt;make&lt;/code&gt;. Aber glücklicherweise gibt es ein Programm,
dessen Hauptaufgabe es ist, sich mit den Eigenheiten von C bzw. C++ auszukennen:
den Compiler.
Tatsächlich bietet (zumindest &lt;span class="caps"&gt;GCC&lt;/span&gt;) die Option eine C oder C++ Datei zu parsen
und alle inkludierten Header&amp;nbsp;auszugeben.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;g++&lt;span class="w"&gt; &lt;/span&gt;-MM&lt;span class="w"&gt; &lt;/span&gt;myCode.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das ausnutzend, bietet die &lt;a href="https://www.gnu.org/software/make/manual/"&gt;offizielle Dokumentation&lt;/a&gt;
von &lt;code&gt;GNU make&lt;/code&gt; folgende Rule, um je eine &amp;#8220;dependency&amp;#8221; &lt;code&gt;Makefile&lt;/code&gt;
pro &lt;code&gt;.c&lt;/code&gt; Datei zu erzeugen und automatisch&amp;nbsp;einzubinden.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%.d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;%.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;@set&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CPPFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;’s,&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="se"&gt;\)\.&lt;/span&gt;o&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;]&lt;/span&gt;*,&lt;span class="se"&gt;\1&lt;/span&gt;.o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;,g’&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;.&lt;span class="nv"&gt;$$$$&lt;/span&gt;

&lt;span class="cp"&gt;include $(sources:.c=.d)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Falls man &lt;code&gt;.o&lt;/code&gt; Dateien in ein &lt;code&gt;obj/&lt;/code&gt; Verzeichnis speichert, muss man die
Regex anpassen. In meinen Projekten leistet mir diese Rule gute&amp;nbsp;Dienste.&lt;/p&gt;
&lt;p&gt;Alternativ könnte man natürlich auf ein anderes Buildsystem statt handgepflegter
Makefiles&amp;nbsp;umsteigen.&lt;/p&gt;</content><category term="Code"></category><category term="make"></category><category term="C++"></category></entry><entry><title>TSPview</title><link href="https://blog.schawe.me/tspview.html" rel="alternate"></link><published>2016-09-17T15:41:00+02:00</published><updated>2016-09-17T15:41:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2016-09-17:/tspview.html</id><summary type="html">&lt;p&gt;Das Problem des Handlungsreisenden ist es, die kürzeste Rundtour zu planen,
sodass man alle Städte besucht. Es ist eines der berühmtesten
Optimierungsprobleme und gehört zur Klasse &lt;a href="https://de.wikipedia.org/wiki/NP-Schwere"&gt;&lt;span class="caps"&gt;NP&lt;/span&gt;-hard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Es gibt also (&lt;a href="https://de.wikipedia.org/wiki/P-NP-Problem"&gt;bis jetzt&lt;/a&gt;)
keine effiziente Möglichkeit zur Lösung. Allerdings gibt es
&lt;a href="https://scholar.google.fr/scholar?q=euclidean+tsp+ptas&amp;amp;hl=de"&gt;Näherungen&lt;/a&gt;,
&lt;a href="https://scholar.google.fr/scholar?q=tsp+linear+programming"&gt;untere Schranken&lt;/a&gt;
und unzählige&amp;nbsp;Heuristiken.&lt;/p&gt;
&lt;p&gt;Die einfachsten dieser …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Das Problem des Handlungsreisenden ist es, die kürzeste Rundtour zu planen,
sodass man alle Städte besucht. Es ist eines der berühmtesten
Optimierungsprobleme und gehört zur Klasse &lt;a href="https://de.wikipedia.org/wiki/NP-Schwere"&gt;&lt;span class="caps"&gt;NP&lt;/span&gt;-hard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Es gibt also (&lt;a href="https://de.wikipedia.org/wiki/P-NP-Problem"&gt;bis jetzt&lt;/a&gt;)
keine effiziente Möglichkeit zur Lösung. Allerdings gibt es
&lt;a href="https://scholar.google.fr/scholar?q=euclidean+tsp+ptas&amp;amp;hl=de"&gt;Näherungen&lt;/a&gt;,
&lt;a href="https://scholar.google.fr/scholar?q=tsp+linear+programming"&gt;untere Schranken&lt;/a&gt;
und unzählige&amp;nbsp;Heuristiken.&lt;/p&gt;
&lt;p&gt;Die einfachsten dieser Heuristiken habe ich in einem kleinen Programm TSPview
implementiert, mitsamt Visualisierung. Der Quellcode ist auf
&lt;a href="https://github.com/surt91/TSPview"&gt;GitHub&lt;/a&gt; zu&amp;nbsp;finden.&lt;/p&gt;
&lt;video controls loop width="100%"&gt;
&lt;source src="/vid/tspview2.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;h2&gt;Algorithmen&lt;/h2&gt;
&lt;p&gt;Hier folgt eine kurze Beschreibung der verwendeten Algorithmen und jeweils ein
Bild, welche Lösung die Methode auf einer berühmten Instanz des &lt;span class="caps"&gt;TSP&lt;/span&gt;&amp;nbsp;findet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="42 Hauptstädte in Amerika" class="invertable" src="/img/tsp.png"&gt;
Das sind 42 Hauptstädte der Vereinigten Staaten von Amerika und Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; (Hawaii und
Alaska, sowie einige Staaten an der Ostküste, die das Problem nicht schwieriger
machen, fehlen). Dieses Problem war das erste größere, das 1956 beweisbar
optimal gelöst&amp;nbsp;wurde.&lt;/p&gt;
&lt;h3&gt;Nearest&amp;nbsp;Neighbor&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Nearest Neighbor" class="invertable" src="/img/tsp_nearestNeighbor.png"&gt;
Die Nearest Neighbor Heuristik (&lt;span class="math"&gt;\(\mathcal{O}(N^2)\)&lt;/span&gt;) startet bei einer zufälligen Stadt und wählt
als nächste Stadt immer die Stadt, die am nächsten an der aktuellen Stadt ist und
noch nicht besucht&amp;nbsp;wurde.&lt;/p&gt;
&lt;h3&gt;Greedy&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Greedy" class="invertable" src="/img/tsp_greedy.png"&gt;
Diese Heuristik (&lt;span class="math"&gt;\(\mathcal{O}(N^2 \log N)\)&lt;/span&gt;) ist ähnlich zu &lt;a href="https://de.wikipedia.org/wiki/Algorithmus_von_Kruskal"&gt;Kruskals Algorithmus für minimal spannende Bäume&lt;/a&gt;.
Sie nimmt die kürzeste Verbindung zwischen zwei Städten und fügt sie der Tour
hinzu, wenn sie in der Tour noch erlaubt&amp;nbsp;ist.&lt;/p&gt;
&lt;h3&gt;Farthest&amp;nbsp;Insertion&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Farthest Insertion" class="invertable" src="/img/tsp_farIn.png"&gt;
Farthest Insertion (&lt;span class="math"&gt;\(\mathcal{O}(N^3)\)&lt;/span&gt;) startet bei einer zufälligen Stadt und fügt dann die Stadt,
die am weitesten von der aktuellen Tour entfernt ist an der Stelle in die Tour,
die dafür sorgt, dass die Tour möglichst kurz&amp;nbsp;bleibt.&lt;/p&gt;
&lt;h3&gt;Two-Opt&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Two-Opt" class="invertable" src="/img/tsp_twoOpt.png"&gt;
Two-Opt beginnt mit einer beliebigen Tour, die bspw. durch eine der obigen
Heuristken erstellt wurde und verbessert sie, indem sie zwei Verbindungen nimmt
und die Endpunkte über Kreuz austauscht, wenn die Tour dadurch verbunden bleibt
und kürzer&amp;nbsp;wird.&lt;/p&gt;
&lt;h3&gt;Lineare Programmierung mit &amp;#8220;Subtour Elimination&amp;nbsp;Cuts&amp;#8221;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Linear Programming" class="invertable" src="/img/tsp_LP.png"&gt;
Lineare Programmierung (&lt;span class="caps"&gt;LP&lt;/span&gt;) zu erklären, würde diesen Artikel sprengen. Aber diese Methode liefert
untere Schranken für die Tourlänge und kann somit benutzt werden, um die
Qualität einer heuristischen Lösung abzuschätzen. Falls man die optimale
Lösung durch lineare Programmierung findet, erkennt man sie auch sofort als&amp;nbsp;optimal.&lt;/p&gt;
&lt;p&gt;Für weitere Details, kann ich auf einen &lt;a href="http://arxiv.org/abs/1512.08554"&gt;arXiv Artikel&lt;/a&gt;
von mir&amp;nbsp;verweisen.&lt;/p&gt;
&lt;h3&gt;Concorde&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Optimale Tour" class="invertable" src="/img/tsp_opt.png"&gt;
&lt;a href="http://www.math.uwaterloo.ca/tsp/concorde.html"&gt;Concorde&lt;/a&gt;
ist der &amp;#8220;State of the Art&amp;#8221; Solver für das Problem des Handlungsreisenden
und löst problemlos Instanzen mit mehr als 1000 Städten.
Intern benutzt es zwar eine Menge Heuristiken, allerdings auch lineare
Programmierung, um nachzuweisen, dass die gefundene Lösung optimal&amp;nbsp;ist.&lt;/p&gt;
&lt;h2&gt;Technische&amp;nbsp;Details&lt;/h2&gt;
&lt;p&gt;TSPview ist ein Python3 Programm, das zur Darstellung PyQt5 benutzt, das sich
per &lt;code&gt;pip3 install PyQt5&lt;/code&gt; einfach installieren&amp;nbsp;lässt.&lt;/p&gt;
&lt;p&gt;Darüber hinaus enthält es eine optionale Abhängigkeit zu &lt;span class="caps"&gt;CPLEX&lt;/span&gt;, einem
kommerziellen &lt;span class="caps"&gt;LP&lt;/span&gt;&amp;nbsp;solver.&lt;/p&gt;
&lt;h3&gt;boost::python&lt;/h3&gt;
&lt;p&gt;Da das Hauptprogramm in Python geschrieben ist, aber der &lt;span class="caps"&gt;LP&lt;/span&gt;-Teil in C++,
braucht man eine Möglichkeit der Kommunikation. Glücklicherweise gibt es
mit &lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/python/doc/html/index.html"&gt;boost::python&lt;/a&gt;
eine Möglichkeit C++ Klassen in Python als Python-Klassen zu&amp;nbsp;benutzen.&lt;/p&gt;
&lt;p&gt;Um beispielsweise die C++ Klasse &lt;code&gt;MyClass&lt;/code&gt;, deren Konstruktor einen Integer und
eine Python-Liste entgegen nehmen soll, in Python benutzen und &lt;code&gt;myMethod&lt;/code&gt;
aufrufen zu können, reicht folgender&amp;nbsp;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;boost/python.hpp&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;python&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// implement MyClass&lt;/span&gt;

&lt;span class="n"&gt;BOOST_PYTHON_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyClass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myMethod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="C++"></category><category term="Python"></category><category term="GitHub"></category><category term="Code"></category><category term="Video"></category><category term="Bild"></category></entry><entry><title>SimulatedSort</title><link href="https://blog.schawe.me/simulatedsort.html" rel="alternate"></link><published>2014-06-14T15:20:00+02:00</published><updated>2014-06-14T15:20:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-06-14:/simulatedsort.html</id><summary type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Simulated_annealing"&gt;Simulated Annealing&lt;/a&gt;
ist eine Optimierungsmethode, die von natürlichen
Kristallisationsprozessen inspiriert ist. Man startet in der Schmelze
bei hohen Temperaturen und lässt es dann abkühlen, sodass die Atome sich
in einem Zustand minimaler Energie anordnen, dem Kristallgitter. Wenn
man also für ein Optimierungsproblem die zu optimierende Größe als
Energie ansieht, und …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://de.wikipedia.org/wiki/Simulated_annealing"&gt;Simulated Annealing&lt;/a&gt;
ist eine Optimierungsmethode, die von natürlichen
Kristallisationsprozessen inspiriert ist. Man startet in der Schmelze
bei hohen Temperaturen und lässt es dann abkühlen, sodass die Atome sich
in einem Zustand minimaler Energie anordnen, dem Kristallgitter. Wenn
man also für ein Optimierungsproblem die zu optimierende Größe als
Energie ansieht, und man eine Lösung durch eine kleine Änderung in eine
andere Lösung verwandeln kann, kann man mit dieser Methode eine Näherung
für das Optimum&amp;nbsp;finden.&lt;/p&gt;
&lt;p&gt;Wenn wir also eine Sequenz &lt;span class="math"&gt;\(S\)&lt;/span&gt; von &lt;span class="math"&gt;\(N\)&lt;/span&gt; Zahlen sortieren wollen, können wir die
Summe der Differenzen zwischen benachbarten Zahlen als Energie
betrachten, denn die ist minimal in einer sortierten&amp;nbsp;Liste.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \mathcal{H} = \sum_{i=1}^{N-1} \left| S_i - S_{i+1} \right|
\end{equation}&lt;/div&gt;
&lt;p&gt;
Um eine Lösung in eine andere zu verwandeln, reicht es zwei Elemente der Sequenz
zu&amp;nbsp;tauschen.&lt;/p&gt;
&lt;p&gt;Der Kern von Simulated Annealing ist der Metropolis&amp;nbsp;Algorithmus.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Starte bei einer hohen Temperatur &lt;span class="math"&gt;\(T\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Berechne die Energie &lt;span class="math"&gt;\(\mathcal{H}(S)\)&lt;/span&gt; der aktuellen Konfiguration &lt;span class="math"&gt;\(S\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Erzeuge eine neue Konfiguration &lt;span class="math"&gt;\(R\)&lt;/span&gt; durch eine kleine Änderunge von &lt;span class="math"&gt;\(S\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Akzeptiere &lt;span class="math"&gt;\(R\)&lt;/span&gt; mit der Wahscheinlichkeit
   &lt;div class="math"&gt;$$p_\mathrm{acc} = \min\left[1 ,\exp(-(\mathcal{H}(R) - \mathcal{H}(S))/T) \right],$$&lt;/div&gt;
   sodass eine &amp;#8220;sortiertere&amp;#8221; Sequenz immer akzeptiert wird und eine &amp;#8220;unsortiertere&amp;#8221;
   vor allem bei hohen Temperaturen. Wenn &lt;span class="math"&gt;\(R\)&lt;/span&gt; akzeptiert wird, gilt &lt;span class="math"&gt;\(S:=R\)&lt;/span&gt;,
   ansonsten wir die alte Konfiguration &lt;span class="math"&gt;\(S\)&lt;/span&gt; weiter&amp;nbsp;benutzt.&lt;/li&gt;
&lt;li&gt;Reduziere die Temperatur (beispielsweise durch Multiplikation mit einer Zahl
   etwas kleiner als 1) und breche ab, wenn die Zieltemperatur erreicht ist.
   Ansonsten beginne wieder bei Punkt&amp;nbsp;2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Genug der Theorie: In einem &lt;a href="https://gist.github.com/surt91/e399500e780e184d9ac7"&gt;Gist auf GitHub&lt;/a&gt;
präsentiere ich ein schnell terminierendes
Sortierprogramm, das zwar nicht immer eine sortierte Liste findet, aber
zumindest eine Näherung! Es ist also
&lt;a href="http://de.wikipedia.org/wiki/Bogosort"&gt;Bogosort&lt;/a&gt; in mehr als nur einer
Hinsicht&amp;nbsp;überlegen!&lt;/p&gt;
&lt;p&gt;Wer braucht da noch &lt;span class="math"&gt;\(\mathcal{O}(N \log(N))\)&lt;/span&gt;&amp;nbsp;Sortier-Algorithmen?!&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Physik"></category><category term="GitHub"></category></entry><entry><title>SHA-256 in 256 Zeilen</title><link href="https://blog.schawe.me/sha-256-in-256-zeilen.html" rel="alternate"></link><published>2014-04-23T20:27:00+02:00</published><updated>2014-04-23T20:27:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-04-23:/sha-256-in-256-zeilen.html</id><summary type="html">&lt;p&gt;Programmiersprachen muss man üben, um sie zu lernen und um sie nicht
wieder zu vergessen. Ich habe also meine Zeit damit vertrieben einen
&lt;a href="http://de.wikipedia.org/wiki/Sha256"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-256&lt;/a&gt; zu schreiben &amp;#8212; eine
&lt;a href="http://de.wikipedia.org/wiki/Kryptologische_Hashfunktion"&gt;kryptographische Hash&lt;/a&gt;
Funktion. Die &lt;a href="https://datatracker.ietf.org/doc/html/rfc6234"&gt;Spezifikation&lt;/a&gt; ist
glücklicherweise sehr sehr verständlich.
Und auch wenn es tausende andere Implementationen gibt, die schneller
sind, alle …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Programmiersprachen muss man üben, um sie zu lernen und um sie nicht
wieder zu vergessen. Ich habe also meine Zeit damit vertrieben einen
&lt;a href="http://de.wikipedia.org/wiki/Sha256"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-256&lt;/a&gt; zu schreiben &amp;#8212; eine
&lt;a href="http://de.wikipedia.org/wiki/Kryptologische_Hashfunktion"&gt;kryptographische Hash&lt;/a&gt;
Funktion. Die &lt;a href="https://datatracker.ietf.org/doc/html/rfc6234"&gt;Spezifikation&lt;/a&gt; ist
glücklicherweise sehr sehr verständlich.
Und auch wenn es tausende andere Implementationen gibt, die schneller
sind, alle Grenzfälle beachten (ich befürchte, dass mein Programm
Probleme auf Big Endian Systemen bekommt), und sogar Schaltkreise, die
hochoptimiert nur diese Operation beherrschen (Stichwort: Bitcoin &lt;span class="caps"&gt;ASIC&lt;/span&gt;), ist
meiner dennoch sehenswert, da er &lt;span class="caps"&gt;SHA&lt;/span&gt;-256 in 256 Zeilen&amp;nbsp;darstellt.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/surt91/11230311"&gt;Der Code ist als Gist auf GitHub&lt;/a&gt;, da
er in seinen 256 Zeilen ansonsten den Lesefluss stören&amp;nbsp;würde.&lt;/p&gt;
&lt;p&gt;In Python ist es übrigens etwas&amp;nbsp;kürzer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hallo Welt!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Code"></category><category term="C"></category><category term="Python"></category><category term="GitHub"></category></entry><entry><title>DGLshow</title><link href="https://blog.schawe.me/dglshow.html" rel="alternate"></link><published>2014-03-19T11:28:00+01:00</published><updated>2014-03-19T11:28:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-03-19:/dglshow.html</id><summary type="html">&lt;p&gt;Nachdem ich so vielen Differenzialgleichungssystemen [&lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;4&lt;/a&gt;]
begegnet bin, die sich nicht analytisch lösen lassen, habe ich mir ein
&lt;a href="https://github.com/surt91/DGLshow"&gt;Programm zur numerischen Lösung und Visualisierung derselben geschrieben&lt;/a&gt;.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
![Doppelpendel](/img/doublePendulum.png)
&lt;/video&gt;

&lt;p&gt;Die grundlegende Idee zur numerischen Lösung von Differentialgleichungen ist es, die Zeit
in diskreten Schritten &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; vergehen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nachdem ich so vielen Differenzialgleichungssystemen [&lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;2&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;3&lt;/a&gt;, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;4&lt;/a&gt;]
begegnet bin, die sich nicht analytisch lösen lassen, habe ich mir ein
&lt;a href="https://github.com/surt91/DGLshow"&gt;Programm zur numerischen Lösung und Visualisierung derselben geschrieben&lt;/a&gt;.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
![Doppelpendel](/img/doublePendulum.png)
&lt;/video&gt;

&lt;p&gt;Die grundlegende Idee zur numerischen Lösung von Differentialgleichungen ist es, die Zeit
in diskreten Schritten &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; vergehen zu lassen. Nach jedem Schritt wird der
Zustand so geändert, als ob sich während des Zeitschrittes nichts geändert
hätte und die &amp;#8220;Kräfte&amp;#8221; werden entsprechend der Bewegungsgleichungen neu berechnet.
Für infinitesimal kleine &lt;span class="math"&gt;\(\tau \to \mathrm{d}t\)&lt;/span&gt; ist diese Methode schließlich&amp;nbsp;exakt.&lt;/p&gt;
&lt;p&gt;Im einfachsten Fall, dem Euler Verfahren, sähe das für ein einfaches
Fadenpendel nach &lt;span class="math"&gt;\(k\)&lt;/span&gt; Zeitschritten so&amp;nbsp;aus
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\vartheta_{k+1} &amp;amp;= - mgl \sin(\vartheta_k)\\
    \dot\vartheta_{k+1} &amp;amp;= \tau \ddot\vartheta_{k} + \dot\vartheta_{k}\\
    \vartheta_{k+1} &amp;amp;= \tau \dot\vartheta_{k} + \vartheta_{k}
\end{align*}&lt;/div&gt;
&lt;p&gt;
Unglücklicherweise hat dieses Verfahren ernsthafte Probleme mit der Energieerhaltung
und braucht sehr kleine &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; für brauchbare Ergebnisse.
Es gibt deutlich ausgefeiltere Methoden, wie den &lt;a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods#The_Runge.E2.80.93Kutta_method"&gt;klassischen Runge-Kutta&lt;/a&gt;
Algorithmus. Es gibt Methoden, den Zeitschritt &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; während der Simulation
adaptiv anzupassen, um nur wenig Rechenaufwand in den wenig fehleranfälligen
Phasen zu verbringen. Es gibt spezialisierte Methoden, die sehr gut für bestimmte Bewegungsgleichungen
funktionieren, wie &lt;a href="https://en.wikipedia.org/wiki/Verlet_integration"&gt;Velocity-Verlet&lt;/a&gt;,
der oft für Molekulardynamiksimulationen eingesetzt&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Chaotische Systeme haben in der Regel etwas kompliziertere Bewegungsgleichungen. Das oben abgebildete
Doppelpendel etwa wird, &lt;a href="https://blog.schawe.me/double-pendulum.html"&gt;wie ich in einem anderen Post beschrieben habe&lt;/a&gt;
durch folgendes Ungetüm&amp;nbsp;beschrieben.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\theta_1 &amp;amp;= \frac{m_2 \cos(\theta_1 - \theta_2) (l_1 \sin(\theta_1 - \theta_2) \dot\theta_1^2 - g \sin(\theta_2)) + m_2 l_2 \sin(\theta_1 - \theta_2) \dot\theta_2^2 + (m_1 + m_2) g \sin(\theta_1)}{m_2 l_1 \cos^2(\theta_1 - \theta_2) - (m_1+m_2) l_1} \\
    \ddot\theta_2 &amp;amp;= \frac{m_2 l_2 \cos(\theta_1 - \theta_2) \sin(\theta_1 - \theta_2) \dot\theta_2^2 + (m_1+m_2) l_1 \sin(\theta_1 - \theta_2) \dot\theta_1^2 + (m_1+m_2) g \cos(\theta_1 - \theta_2) \sin(\theta_1) - (m_1+m_2) g \sin(\theta_2)}{(m_1+m_2) l_2 - m_2 l_2 \cos^2(\theta_1 - \theta_2)}
\end{align*}&lt;/div&gt;
&lt;p&gt;Anfangs empfiehlt es sich also etwas einfacheres und vertrauteres zu lösen,
wie den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Lorenz-Attraktor&lt;/a&gt;
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ \\
\end{align*}&lt;/div&gt;
&lt;p&gt;Oder das &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot{\vec{x}_1} &amp;amp;= -\frac{Gm_2}{\left(x_1 - x_2\right)^3} (\vec{x}_1 - \vec{x}_2) - \frac{Gm_3}{\left(x_1 - x_3\right)^3} (\vec{x}_1 - \vec{x}_3)\\
    \ddot{\vec{x}_2} &amp;amp;= -\frac{Gm_1}{\left(x_2 - x_1\right)^3} (\vec{x}_2 - \vec{x}_1) - \frac{Gm_3}{\left(x_2 - x_3\right)^3} (\vec{x}_2 - \vec{x}_3)\\
    \ddot{\vec{x}_3} &amp;amp;= -\frac{Gm_1}{\left(x_3 - x_1\right)^3} (\vec{x}_3 - \vec{x}_1) - \frac{Gm_2}{\left(x_3 - x_2\right)^3} (\vec{x}_3 - \vec{x}_2)\\
\end{align*}&lt;/div&gt;
&lt;p&gt;Da man das 3-Körperproblem trivial auf ein &lt;span class="math"&gt;\(N\)&lt;/span&gt;-Körperproblem erweitern kann,
habe ich hier ein &amp;#8220;Sonnensystem&amp;#8221; bzw. Bohrsches &amp;#8220;Atom&amp;#8221;-modell&amp;nbsp;simuliert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sonnensystem" src="/img/planets.png"&gt;&lt;/p&gt;
&lt;p&gt;Um die obigen (bewegten) Bilder zu erzeugen und um ein bewegtes Doppelpendel
für meinen Schreibtisch zu haben, &amp;#8212; wennauch nur auf einem Bildschirm &amp;#8212; habe
ich in C++ einen adaptiven Runge-Kutta-4 Löser geschrieben, der mit den Qt
Zeichenprimitiven animiert&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Auch wenn der Code nicht sehr aufgeräumt ist und Startwerte im Quellcode
angepasst werden müssen, sind die Quellen auf GitHub:
&lt;a href="https://github.com/surt91/DGLshow"&gt;github.com/surt91/DGLshow&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="C++"></category><category term="Physik"></category><category term="Video"></category><category term="Bild"></category><category term="GitHub"></category><category term="Formel"></category><category term="Chaos"></category></entry><entry><title>Doppelpendel</title><link href="https://blog.schawe.me/double-pendulum.html" rel="alternate"></link><published>2014-03-19T11:27:00+01:00</published><updated>2014-03-19T11:27:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2014-03-19:/double-pendulum.html</id><summary type="html">&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;/video&gt;

&lt;p&gt;Das ist ein Doppelpendel. Ein Doppelpendel ist neben dem &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
und dem Lorenz-Attraktor [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;]
das Paradebeispiel für analytisch unlösbare Bewegungsgleichungen
und chaotisches Verhalten. Aus diesem Grund sollte ein Doppelpendel auf keinem
Schreibtisch fehlen und bietet sich als grandiose Geschenkidee für Physiker&amp;nbsp;an.&lt;/p&gt;
&lt;p&gt;Dass es analytisch unlösbar ist, lässt sich …&lt;/p&gt;</summary><content type="html">&lt;video controls width="100%" poster="/img/doublePendulum.png"&gt;
&lt;source src="/vid/doppelpendel.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;/video&gt;

&lt;p&gt;Das ist ein Doppelpendel. Ein Doppelpendel ist neben dem &lt;a href="https://blog.schawe.me/dreikorperproblem.html"&gt;Dreikörperproblem&lt;/a&gt;
und dem Lorenz-Attraktor [&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;1&lt;/a&gt;, &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;2&lt;/a&gt;]
das Paradebeispiel für analytisch unlösbare Bewegungsgleichungen
und chaotisches Verhalten. Aus diesem Grund sollte ein Doppelpendel auf keinem
Schreibtisch fehlen und bietet sich als grandiose Geschenkidee für Physiker&amp;nbsp;an.&lt;/p&gt;
&lt;p&gt;Dass es analytisch unlösbar ist, lässt sich mit einem nicht rigorosen Argument
anschaulich machen: Ein Blick auf die&amp;nbsp;Bewegungsgleichungen:&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    (m_1 + m_2) l_1 \ddot\vartheta_1 + m_2 l_2 \ddot\vartheta_2 \cos(\vartheta_1 - \vartheta_2) + m_2 l_2 \dot\vartheta_2^2 \sin(\vartheta_1 - \vartheta_2) + g(m_1 + m_2) \sin(\vartheta_1) &amp;amp;= 0\\
    m_2 l_2 \ddot\vartheta_2 + m_2 l_1 \ddot\vartheta_1 \cos(\vartheta_1 - \vartheta_2) - m_2 l_1 \dot\vartheta_1^2 \sin(\vartheta_1 - \vartheta_2) + m_2 g \sin(\vartheta_2) &amp;amp;= 0
\end{align*}&lt;/div&gt;
&lt;p&gt;Das sind die Differentialgleichungen für die beiden Winkel &lt;span class="math"&gt;\(\vartheta_1\)&lt;/span&gt; und &lt;span class="math"&gt;\(\vartheta_2\)&lt;/span&gt;
des Doppelpendels. &lt;span class="math"&gt;\(m_i\)&lt;/span&gt; sind die beiden Massen und &lt;span class="math"&gt;\(l_i\)&lt;/span&gt; die&amp;nbsp;Fadenlängen.&lt;/p&gt;
&lt;p&gt;Unser Ziel ist es das obige Video zu erstellen, dazu müssen wir die Bahnkurve,
also &lt;span class="math"&gt;\(\vartheta_1(t)\)&lt;/span&gt; und &lt;span class="math"&gt;\(\vartheta_2(t)\)&lt;/span&gt; bestimmen.
Dazu müssen wir die obigen Gleichungen, die sich relativ simpel,
&lt;a href="/img/doppelpendel_math.webp"&gt;wenn auch mühsam, per Lagrange-Formalismus herleiten lassen&lt;/a&gt;,
zunächst nach den Winkelbeschleunigungen&amp;nbsp;aufgelösen.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    \ddot\vartheta_1 &amp;amp;= \frac{m_2 \cos(\vartheta_1 - \vartheta_2) (l_1 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_1^2 - g \sin(\vartheta_2)) + m_2 l_2 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_2^2 + (m_1 + m_2) g \sin(\vartheta_1)}{m_2 l_1 \cos^2(\vartheta_1 - \vartheta_2) - (m_1+m_2) l_1} \\
    \ddot\vartheta_2 &amp;amp;= \frac{m_2 l_2 \cos(\vartheta_1 - \vartheta_2) \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_2^2 + (m_1+m_2) l_1 \sin(\vartheta_1 - \vartheta_2) \dot\vartheta_1^2 + (m_1+m_2) g \cos(\vartheta_1 - \vartheta_2) \sin(\vartheta_1) - (m_1+m_2) g \sin(\vartheta_2)}{(m_1+m_2) l_2 - m_2 l_2 \cos^2(\vartheta_1 - \vartheta_2)}
\end{align*}&lt;/div&gt;
&lt;p&gt;Diese Gleichungen sind durchaus sehr unhandlich und können nicht analytisch,
gelöst werden &amp;#8212; aber &lt;a href="https://blog.schawe.me/dglshow.html"&gt;numerisch ist es kein Problem&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Video"></category><category term="Bild"></category><category term="Formel"></category><category term="Chaos"></category></entry><entry><title>Ising Modell zur Bildentrauschung</title><link href="https://blog.schawe.me/ising-modell-zur-bildentrauschung.html" rel="alternate"></link><published>2013-12-22T12:37:00+01:00</published><updated>2013-12-22T12:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-22:/ising-modell-zur-bildentrauschung.html</id><summary type="html">&lt;p&gt;Eines der bekanntesten Modelle der statistischen Physik ist das &lt;a href="http://de.wikipedia.org/wiki/Ising-Modell"&gt;Ising-Modell&lt;/a&gt;. Es besteht aus
(klassischen) Spins auf einem Gitter im Wärmebad und soll magnetische
Eigenschaften von Festkörpern modellieren. Es zeigt nämlich in 2D und 3D
(und 4D &amp;#8230; ) einen Phasenübergang zweiter Ordnung von &amp;#8220;magnetisch&amp;#8221; zu
&amp;#8220;nicht magnetisch&amp;#8221;, so wie ferromagnetische Materialien, die …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eines der bekanntesten Modelle der statistischen Physik ist das &lt;a href="http://de.wikipedia.org/wiki/Ising-Modell"&gt;Ising-Modell&lt;/a&gt;. Es besteht aus
(klassischen) Spins auf einem Gitter im Wärmebad und soll magnetische
Eigenschaften von Festkörpern modellieren. Es zeigt nämlich in 2D und 3D
(und 4D &amp;#8230; ) einen Phasenübergang zweiter Ordnung von &amp;#8220;magnetisch&amp;#8221; zu
&amp;#8220;nicht magnetisch&amp;#8221;, so wie ferromagnetische Materialien, die oberhalb
der Curie Temperatur nicht mehr ferromagnetisch&amp;nbsp;sind.&lt;/p&gt;
&lt;p&gt;In einfachen Worten: Die Spins des Ising-Modells richten sich so aus
wie ihre Nachbarn und die Temperatur bringt sie wieder&amp;nbsp;durcheinander.&lt;/p&gt;
&lt;p&gt;Aber es wäre natürlich langweilig das Modell so zu benutzen, wie alle
anderen auch. Deshalb stelle ich hier eine Anwendung aus
&lt;a href="http://scholar.google.de/scholar?q=bishop+pattern+recognition+and+machine+learning&amp;amp;hl=de"&gt;Pattern Recgonition and Machine Learning&lt;/a&gt;
vor, die nichts mehr mit Magneten zu tun hat: Rauschunterdrückung in&amp;nbsp;Bildern.&lt;/p&gt;
&lt;p&gt;Andererseits bin ich Physiker und darf deshalb nichts machen, was direkt
nützlich wäre, also beschränke ich mich auf schwarz-weiße Bilder, die
man direkt auf das &amp;#8220;spin up&amp;#8221;-&amp;#8220;spin down&amp;#8221; des Ising-Modells abbilden&amp;nbsp;kann.&lt;/p&gt;
&lt;p&gt;Die Idee ist, das jeder Spin einem Pixel &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; entspricht. Dann koppelt man
die Spins des Ising-Modells &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; an die Pixel &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; des verrauschten Bildes
über einen zusätzlichen&amp;nbsp;Energie-Term
&lt;/p&gt;
&lt;div class="math"&gt;$$\mathcal{H} = - \beta \sum_{\left&amp;lt; i,j \right&amp;gt;} x_i x_j - \eta \sum_i x_i y_i.$$&lt;/div&gt;
&lt;p&gt;
Dabei bedeutet &lt;span class="math"&gt;\(\left&amp;lt; i,j \right&amp;gt;\)&lt;/span&gt;, dass man über alle Nachbarn von &lt;span class="math"&gt;\(i\)&lt;/span&gt;&amp;nbsp;summiert.&lt;/p&gt;
&lt;p&gt;Von diesem Modell kann man dann per &lt;a href="https://blog.schawe.me/simulatedsort.html"&gt;Simulated Annealing&lt;/a&gt;
den Grundzustand suchen oder man macht es sich einfach equilibriert bei &lt;span class="math"&gt;\(T=0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ising-Modell" class="invertable" src="/img/standaloneIsing.svg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Das Schema dazu wurde bereits in
&lt;a href="https://blog.schawe.me/oberflachenkachelung-mit-tikz.html"&gt;diesem Post&lt;/a&gt;
gezeigt. Graue Knoten entsprechen den Pixeln des verrauschten Bilds &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; und weiße
Knoten den Ising-Spins &lt;span class="math"&gt;\(x_i\)&lt;/span&gt;, die am Ende als Pixel des entrauschten Bilds
interpretiert&amp;nbsp;werden.&lt;/p&gt;
&lt;p&gt;Genug der Theorie. Es wird Zeit für pixelige Bilder. Leider hatte ich
kein verrauschtes Bild, also habe ich ein beliebiges Bild gemalt und 10%
aller Pixel&amp;nbsp;invertiert.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vorher-Nachher Vergleich" class="invertable" src="/img/vorhernachher.png"&gt;&lt;/p&gt;
&lt;p&gt;Links das verrauschte Bild und rechts das entrauschte. Ja, nicht
perfekt. Und in dem zitierten Buch wird auf der gleichen Seite noch eine
sehr viel bessere Methode angesprochen. Aber die hatte nichts mit dem
Ising-Modell zu tun. Und man sieht ja auch eine Verbesserung.&amp;nbsp;Oder?&lt;/p&gt;
&lt;p&gt;Nebenbei bemerkt, kann man das Ising-Modell auch als
&lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;zellulären&lt;/a&gt; &lt;a href="https://blog.schawe.me/rule-90.html"&gt;Automaten&lt;/a&gt; mit
zufälligem Element betrachten, denn jeder Spin ist eine Zelle, die nur
lokal von seinen Nachbarn und zufällig durch die Temperatur beeinflusst&amp;nbsp;wird.&lt;/p&gt;
&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/7789753"&gt;Gist auf Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Physik"></category><category term="GitHub"></category><category term="Bild"></category></entry><entry><title>Depth First Search und Labyrinthe</title><link href="https://blog.schawe.me/depth-first-search-und-labyrinthe.html" rel="alternate"></link><published>2013-12-15T12:30:00+01:00</published><updated>2013-12-15T12:30:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-15:/depth-first-search-und-labyrinthe.html</id><summary type="html">&lt;p&gt;Ein Algorithmus, von dem jeder schoneinmal gehört haben sollte, ist die
Tiefensuche (Depth First Search). Wenn man Zusammenhangskomponenten in einem
Graphen finden will oder nach einem bestimmten Knoten in einem Graphen sucht,
ist die Tiefensuche meist der einfachste und oft ein geeigneter Algorithmus
mit einer Zeitkomplexität &lt;span class="math"&gt;\(\mathcal{O}(N+M …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ein Algorithmus, von dem jeder schoneinmal gehört haben sollte, ist die
Tiefensuche (Depth First Search). Wenn man Zusammenhangskomponenten in einem
Graphen finden will oder nach einem bestimmten Knoten in einem Graphen sucht,
ist die Tiefensuche meist der einfachste und oft ein geeigneter Algorithmus
mit einer Zeitkomplexität &lt;span class="math"&gt;\(\mathcal{O}(N+M)\)&lt;/span&gt;, die linear in der Anzahl der
Knoten und der Kanten ist. Da man gefühlt alle Graphalgorithmen am besten
rekursiv beschreiben kann, folgt hier eine (nichtrigorose)&amp;nbsp;Beschreibung.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Man startet die Tiefensuche an einem beliebigen&amp;nbsp;Knoten.&lt;/li&gt;
&lt;li&gt;Bei jedem noch nicht besuchten Nachbarn startet man wieder eine&amp;nbsp;Tiefensuche.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aber was macht man im Alltag mit einer Tiefensuche?
Meine Antwort darauf ist: Labyrinthe&amp;nbsp;bauen.&lt;/p&gt;
&lt;video controls width="100%" poster="/img/maze.png"&gt;
&lt;source src="/vid/maze.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Bei dieser Gelegenheit muss &lt;code&gt;NetworkX&lt;/code&gt; erwähnt werden. Ein Python
Modul, das sehr schöne Klassen für Graphen bereitstellt und perfekt geeignet
ist, um schnell Prototypen von Graphalgorithmen zu&amp;nbsp;testen.&lt;/p&gt;
&lt;p&gt;Der Code ist als &lt;a href="https://gist.github.com/surt91/7790052"&gt;Gist auf GitHub&lt;/a&gt;&amp;nbsp;verfügbar.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category></entry><entry><title>Oberflächenkachelung mit TikZ</title><link href="https://blog.schawe.me/oberflachenkachelung-mit-tikz.html" rel="alternate"></link><published>2013-12-08T12:37:00+01:00</published><updated>2013-12-08T12:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-08:/oberflachenkachelung-mit-tikz.html</id><summary type="html">&lt;p&gt;Man arbeitet an einem Seminarvortrag und will ein Modell auf einem
periodischen Gitter erklären. Natürlich kann man sich nicht entscheiden,
wie viele &lt;a href="http://de.wikipedia.org/wiki/Elementarzelle"&gt;Elementarzellen&lt;/a&gt;
man darstellen möchte. Außerdem ist es einem zuwider mehrere
Elementarzellen per Hand zu&amp;nbsp;schreiben.&lt;/p&gt;
&lt;p&gt;Wer kennt das&amp;nbsp;nicht?&lt;/p&gt;
&lt;p&gt;Glücklicherweise gibt es eine Lösung. Weil man alle seine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Man arbeitet an einem Seminarvortrag und will ein Modell auf einem
periodischen Gitter erklären. Natürlich kann man sich nicht entscheiden,
wie viele &lt;a href="http://de.wikipedia.org/wiki/Elementarzelle"&gt;Elementarzellen&lt;/a&gt;
man darstellen möchte. Außerdem ist es einem zuwider mehrere
Elementarzellen per Hand zu&amp;nbsp;schreiben.&lt;/p&gt;
&lt;p&gt;Wer kennt das&amp;nbsp;nicht?&lt;/p&gt;
&lt;p&gt;Glücklicherweise gibt es eine Lösung. Weil man alle seine Aufzeichnungen
sowieso in LaTeX setzt, benutzt
man &lt;a href="http://www.texample.net/tikz/examples/"&gt;TikZ&lt;/a&gt;, bastelt eine
Elementarzelle und kachelt sie über die Ebene, bis man das Gefühl hat,
dass es genau passend für die Präsentation ist.
Als Bonus kann man noch mit den Parametern spielen, um einen möglichst
überzeugenden pseudo 3D-Effekt zu&amp;nbsp;erzielen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;standalone&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikz&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\shear&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.2&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\height&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;1.0&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\radius&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.1&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\xspacing&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;\newcommand*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\yspacing&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.5&lt;span class="nb"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;% two-dimensional lattice, with three dimensional basis&lt;/span&gt;
        &lt;span class="c"&gt;% decreasing counter, otherwise there will be lines through the circles&lt;/span&gt;
        &lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\x&lt;/span&gt; in &lt;span class="nb"&gt;{&lt;/span&gt;4,...,0&lt;span class="nb"&gt;}{&lt;/span&gt;
            &lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\y&lt;/span&gt;/&lt;span class="k"&gt;\dx&lt;/span&gt; in &lt;span class="nb"&gt;{&lt;/span&gt;3,...,0&lt;span class="nb"&gt;}{&lt;/span&gt;
                &lt;span class="c"&gt;% primitive vectors&lt;/span&gt;
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;-&lt;span class="k"&gt;\xspacing&lt;/span&gt;/2 , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            )
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;+&lt;span class="k"&gt;\xspacing&lt;/span&gt;/2, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            );
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;-&lt;span class="k"&gt;\shear&lt;/span&gt;/2    , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;-&lt;span class="k"&gt;\yspacing&lt;/span&gt;/2)
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;+&lt;span class="k"&gt;\shear&lt;/span&gt;/2   , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\yspacing&lt;/span&gt;/2);
                &lt;span class="k"&gt;\draw&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;             , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;            )
                    -- (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;            , &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;    );

                &lt;span class="c"&gt;% base&lt;/span&gt;
                &lt;span class="k"&gt;\fill&lt;/span&gt;&lt;span class="na"&gt;[white]&lt;/span&gt; (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;        ) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
                &lt;span class="k"&gt;\draw&lt;/span&gt;        (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;        ) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);

                &lt;span class="k"&gt;\fill&lt;/span&gt;&lt;span class="na"&gt;[gray]&lt;/span&gt;  (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
                &lt;span class="k"&gt;\draw&lt;/span&gt;        (&lt;span class="k"&gt;\x&lt;/span&gt;+&lt;span class="k"&gt;\y*\shear&lt;/span&gt;, &lt;span class="k"&gt;\y*\yspacing&lt;/span&gt;+&lt;span class="k"&gt;\height&lt;/span&gt;) circle(&lt;span class="k"&gt;\radius&lt;/span&gt;);
            &lt;span class="nb"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Isingmodell mit Kopplung" class="invertable" src="/img/standaloneIsing.svg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Und damit wäre wiedereinmal die Vorliebe dieses Blogs für &lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;schwarz-weiße
Bilder&lt;/a&gt;,
die entweder &lt;a href="https://blog.schawe.me/drafts/proximity-graphs.html"&gt;Linien und Kreise&lt;/a&gt;
oder &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;zu große&lt;/a&gt;
&lt;a href="https://blog.schawe.me/rule-90.html"&gt;Pixel&lt;/a&gt;
enthalten,&amp;nbsp;bestätigt.&lt;/p&gt;</content><category term="Code"></category><category term="LaTeX"></category><category term="TikZ"></category><category term="Bild"></category><category term="Code"></category></entry><entry><title>Rule 90</title><link href="https://blog.schawe.me/rule-90.html" rel="alternate"></link><published>2013-12-01T15:11:00+01:00</published><updated>2013-12-01T15:11:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-12-01:/rule-90.html</id><summary type="html">&lt;p&gt;Vor kurzem habe ich angefangen &amp;#8220;&lt;a href="http://www.greenteapress.com/complexity/index.html"&gt;Think Complexity&lt;/a&gt;&amp;#8221; zu
lesen &amp;#8212; ein leicht verständliches, interessantes Buch, in dem unter
anderem &lt;a href="http://de.wikipedia.org/wiki/Zellul%C3%A4rer_Automat"&gt;Zelluläre Automaten&lt;/a&gt;
angesprochen werden. Und zwar die &lt;a href="http://www.stephenwolfram.com/publications/academic/?cat=cellular-automata"&gt;von Stephen Wolfram&lt;/a&gt;
&amp;#8212; ja der Stephen Wolfram, der
&lt;a href="http://www.wolfram.com/mathematica/"&gt;Mathematica&lt;/a&gt; und
&lt;a href="http://www.wolframalpha.com/"&gt;Wolfram|Alpha&lt;/a&gt; entwickelt hat (vermutlich
jedoch nicht allein).
Zelluläre Automaten eignen sich natürlich sehr gut …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vor kurzem habe ich angefangen &amp;#8220;&lt;a href="http://www.greenteapress.com/complexity/index.html"&gt;Think Complexity&lt;/a&gt;&amp;#8221; zu
lesen &amp;#8212; ein leicht verständliches, interessantes Buch, in dem unter
anderem &lt;a href="http://de.wikipedia.org/wiki/Zellul%C3%A4rer_Automat"&gt;Zelluläre Automaten&lt;/a&gt;
angesprochen werden. Und zwar die &lt;a href="http://www.stephenwolfram.com/publications/academic/?cat=cellular-automata"&gt;von Stephen Wolfram&lt;/a&gt;
&amp;#8212; ja der Stephen Wolfram, der
&lt;a href="http://www.wolfram.com/mathematica/"&gt;Mathematica&lt;/a&gt; und
&lt;a href="http://www.wolframalpha.com/"&gt;Wolfram|Alpha&lt;/a&gt; entwickelt hat (vermutlich
jedoch nicht allein).
Zelluläre Automaten eignen sich natürlich sehr gut, pixelige Bilder zu
erstellen, wie der
&lt;a href="https://blog.schawe.me/conways-game-of-life.html"&gt;Conways-Game-of-Life-Post&lt;/a&gt;
beweist. Daher, lasse ich erstmal ein Bild&amp;nbsp;sprechen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wolframs Rule 90" class="invertable" src="/img/wolfram090.png"&gt;&lt;/p&gt;
&lt;p&gt;Die Idee ist, dass man mit einem eindimensionalen Zustand startet, und
einen neuen Zustand daraus mit lokalen Regeln, die je einen rechten und
linken Nachbarn berücksichtigen, erzeugt. Stellt man diese Zustände
untereinander da, entstehen Strukturen, wie die, die an ein
&lt;a href="http://de.wikipedia.org/wiki/Sierpinski-Dreieck"&gt;Sierpinski-Dreieck&lt;/a&gt;
erinnert.
Die &lt;a href="http://www.wolframalpha.com/input/?i=rule+90"&gt;Erklärung&lt;/a&gt;, wie genau
diese Regeln lauten, und wie sie definiert sind, überlasse ich
passenderweise&amp;nbsp;Wolfram|Alpha.&lt;/p&gt;
&lt;p&gt;Und damit ich auch etwas sage, das tiefsinnig erscheint: Die Dreieckige
Form entspricht übrigens
dem &lt;a href="http://de.wikipedia.org/wiki/Lichtkegel"&gt;Vorwärtslichtkegel&lt;/a&gt; des
Startwertes in der ersten Zeile. Die &lt;span class="math"&gt;\(y\)&lt;/span&gt;-Achse entspricht hier schließlich
einer Zeit und die &amp;#8220;Lichtgeschwindigkeit&amp;#8221;, mit der Beeinflussungen
propagieren können, ist 1 Pixel pro&amp;nbsp;Iteration.&lt;/p&gt;
&lt;p&gt;Den Quellcode gibt es natürlich bei
&lt;a href="https://github.com/surt91/-bungen-in-C/blob/master/numeric/cellular_automata.c"&gt;GitHub&lt;/a&gt;.
Wenn auch nur in einem &amp;#8220;kleine Fingerübungen in&amp;nbsp;C&amp;#8221;-Repo.&lt;/p&gt;
&lt;p&gt;Für Liebhaber, hier noch eins im original 1982&amp;nbsp;Retro-Look.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wolframs Rule 150" src="/img/wolfram150.png"&gt;&lt;/p&gt;
&lt;p&gt;Passend zur Jahreszeit, wie ich&amp;nbsp;finde.&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Bild"></category><category term="GitHub"></category></entry><entry><title>Lissajous Figuren in Gnuplot</title><link href="https://blog.schawe.me/lissajous-figuren-in-gnuplot.html" rel="alternate"></link><published>2013-10-09T13:17:00+02:00</published><updated>2013-10-09T13:17:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-10-09:/lissajous-figuren-in-gnuplot.html</id><summary type="html">&lt;p&gt;Da nicht jeder das nötige Kleingeld für ein Oszilloskop und
Funktionsgenerator hat, aber jeder gerne eine
&lt;a href="http://de.wikipedia.org/wiki/Lissajous-Figur"&gt;Lissajous-Figur&lt;/a&gt; laufen
haben möchte, liefere ich hier den entsprechenden Gnuplot&amp;nbsp;Code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;reset&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lissajous.gif&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6250&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;yr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;parametric&lt;/span&gt;
&lt;span class="k"&gt;unset …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Da nicht jeder das nötige Kleingeld für ein Oszilloskop und
Funktionsgenerator hat, aber jeder gerne eine
&lt;a href="http://de.wikipedia.org/wiki/Lissajous-Figur"&gt;Lissajous-Figur&lt;/a&gt; laufen
haben möchte, liefere ich hier den entsprechenden Gnuplot&amp;nbsp;Code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;reset&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lissajous.gif&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6250&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;yr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;parametric&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;xtics&lt;/span&gt;
&lt;span class="k"&gt;unset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ytics&lt;/span&gt;

&lt;span class="nf"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;t&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;t&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.999&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;animateLissajou.gp&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Die Datei &amp;#8220;&lt;code&gt;animateLissajou.gp&lt;/code&gt;&amp;#8221; sieht dann so&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;trange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;plot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;notitle&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;reread&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Stark angelehnt an diesen
&lt;a href="http://gnuplot-surprising.blogspot.de/2011/09/creating-gif-animation-using-gnuplot.html"&gt;Blogeintrag&lt;/a&gt;.
Das Ergenis sieht dann so&amp;nbsp;aus.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lissajous Figur" class="invertable" src="/img/lissajous.gif"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Gnuplot"></category><category term="Code"></category><category term="Video"></category></entry><entry><title>Bootstrapping</title><link href="https://blog.schawe.me/bootstrapping.html" rel="alternate"></link><published>2013-09-26T19:13:00+02:00</published><updated>2013-09-26T19:13:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2013-09-26:/bootstrapping.html</id><summary type="html">&lt;p&gt;Wer kennt das nicht: Man hat sich ein Python Skript geschrieben, um
seine Daten per &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)"&gt;Bootstrap Resampling&lt;/a&gt;
auszuwerten und stellt fest, dass das Konstrukt zur Bildung des &amp;#8220;Samples
mit&amp;nbsp;Ersetzungen&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;einfach nicht schnell genug ist.&lt;br&gt;
Aber glücklicherweise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wer kennt das nicht: Man hat sich ein Python Skript geschrieben, um
seine Daten per &lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)"&gt;Bootstrap Resampling&lt;/a&gt;
auszuwerten und stellt fest, dass das Konstrukt zur Bildung des &amp;#8220;Samples
mit&amp;nbsp;Ersetzungen&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;einfach nicht schnell genug ist.&lt;br&gt;
Aber glücklicherweise gibt es &lt;a href="http://www.numpy.org/"&gt;numpy&lt;/a&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;bootstrapSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Das ist &amp;#8212; zumindest in meinem Anwendungsfall &amp;#8212; spürbar schneller. Ich
werde in Zukunft also immer optimale Fehlerbalken&amp;nbsp;erzeugen.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Statistik"></category><category term="Code"></category></entry><entry><title>Seltsamer Attraktor</title><link href="https://blog.schawe.me/seltsamer-attraktor.html" rel="alternate"></link><published>2012-10-11T00:24:00+02:00</published><updated>2012-10-11T00:24:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-10-11:/seltsamer-attraktor.html</id><summary type="html">&lt;p&gt;Zuvor habe ich bereits den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Schmetterlingseffekt&lt;/a&gt;
erwähnt. Um den Zusammenhang mit Chaos zu zeigen, betrachten wir folgendes
Video von der Projektion in die y-z-Ebene von 13
Teilchen, die den Attraktor&amp;nbsp;durchlaufen.&lt;/p&gt;
&lt;video controls="controls" poster="/img/lorenz13yz.png" height="624" width="624"&gt;
&lt;source src="/vid/lorenz13yz.m4v" /&gt;
&lt;source src="/vid/lorenz13yz.mp4" type="video/mp4" /&gt;
&lt;source src="/vid/lorenz13yz.webm" type="video/webm" /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Alle Teilchen starten auf fast dem selben Punkt, aber nehmen sehr …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Zuvor habe ich bereits den &lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Schmetterlingseffekt&lt;/a&gt;
erwähnt. Um den Zusammenhang mit Chaos zu zeigen, betrachten wir folgendes
Video von der Projektion in die y-z-Ebene von 13
Teilchen, die den Attraktor&amp;nbsp;durchlaufen.&lt;/p&gt;
&lt;video controls="controls" poster="/img/lorenz13yz.png" height="624" width="624"&gt;
&lt;source src="/vid/lorenz13yz.m4v" /&gt;
&lt;source src="/vid/lorenz13yz.mp4" type="video/mp4" /&gt;
&lt;source src="/vid/lorenz13yz.webm" type="video/webm" /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Alle Teilchen starten auf fast dem selben Punkt, aber nehmen sehr
verschiedene Wege. Nach kurzer Zeit kann man den einzelnen Teilchen nicht mehr
ansehen, dass sie fast die gleichen Anfangsbedingungen&amp;nbsp;hatten.&lt;/p&gt;
&lt;p&gt;Lorenz war Meteorologe und sein&amp;nbsp;Differentialgleichungssystem
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ, \\
\end{align}&lt;/div&gt;
&lt;p&gt;
das dieses chaotische Verhalten zeigt, sollte die Atmosphäre&amp;nbsp;modellieren.&lt;/p&gt;
&lt;p&gt;Jetzt kann man verstehen, was es mit dem Schmetterling aus &lt;em&gt;Jurassic Park&lt;/em&gt;
auf sich&amp;nbsp;hat.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Er bewegt in Peking die Flügel, und
im Central Park gibt&amp;#8217;s Regen statt&amp;nbsp;Sonne.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Dr. Ian Malcolm&lt;/cite&gt; (1993)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sein Flügelschlag ändert den Zustand eines chaotischen
Systems, dem Wetter, ein wenig und nach einiger Zeit hat das System einen
grundlegend anderen Weg eingeschlagen, als ohne diesen&amp;nbsp;Flügelschlag.&lt;/p&gt;
&lt;p&gt;Dennoch sieht das Video irgendwie geordnet aus. Fast schon vorhersagbar.
&lt;a href="http://de.wikipedia.org/wiki/Chaosforschung#Der_seltsame_Attraktor"&gt;Seltsam.&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Video"></category><category term="Physik"></category><category term="Chaos"></category></entry><entry><title>Dreikörperproblem</title><link href="https://blog.schawe.me/dreikorperproblem.html" rel="alternate"></link><published>2012-06-03T16:21:00+02:00</published><updated>2012-06-03T16:21:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-06-03:/dreikorperproblem.html</id><summary type="html">&lt;p&gt;Nein, ich habe keine analytische Lösung dafür gefunden. (Soweit ich mich
erinnere, hat Poincaré bewiesen, dass es nicht lösbar ist.)
Aber ich habe eine numerische Lösung mit dem vorher vorgestellten
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Runge-Kutta Löser&lt;/a&gt;
erstellt. Und ich habe einen hübschen Film daraus&amp;nbsp;gemacht.&lt;/p&gt;
&lt;video controls="controls" height="600" width="600"&gt;
&lt;source src="/vid/dreiKorper.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;source src="/vid/dreiKorper.webm" type="video/webm"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Als …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nein, ich habe keine analytische Lösung dafür gefunden. (Soweit ich mich
erinnere, hat Poincaré bewiesen, dass es nicht lösbar ist.)
Aber ich habe eine numerische Lösung mit dem vorher vorgestellten
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Runge-Kutta Löser&lt;/a&gt;
erstellt. Und ich habe einen hübschen Film daraus&amp;nbsp;gemacht.&lt;/p&gt;
&lt;video controls="controls" height="600" width="600"&gt;
&lt;source src="/vid/dreiKorper.mp4" type="video/mp4"&gt;&lt;/source&gt;
&lt;source src="/vid/dreiKorper.webm" type="video/webm"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Als Standbild ist es nicht ganz so ästhetisch, wie der
&lt;a href="https://blog.schawe.me/schmetterlingseffekt.html"&gt;Lorenz-Attraktor&lt;/a&gt;,
aber animiert ist es &amp;#8212; meiner Meinung nach &amp;#8212; wunderbar&amp;nbsp;anzusehen.&lt;/p&gt;
&lt;p&gt;Und hier die Startwerte: (bei einer Gravitationskonstanten von 1)
Blau: &lt;span class="math"&gt;\(M=5, x_0=0, y_0=0, v_x0=0, v_y0=0\)&lt;/span&gt;
Rot : &lt;span class="math"&gt;\(M=1, x_0=1, y_0=0, v_x0=0, v_y0=1\)&lt;/span&gt;
Grün: &lt;span class="math"&gt;\(M=1, x_0=1, y_0=1, v_x0=1,&amp;nbsp;v_y0=0\)&lt;/span&gt;&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="Video"></category><category term="Chaos"></category></entry><entry><title>Schmetterlingseffekt</title><link href="https://blog.schawe.me/schmetterlingseffekt.html" rel="alternate"></link><published>2012-05-15T23:04:00+02:00</published><updated>2012-05-15T23:04:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-05-15:/schmetterlingseffekt.html</id><summary type="html">&lt;p&gt;Differentialgleichungen numerisch zu lösen macht mehr Spaß, als man
erwarten würde, wenn man es hört. Und sobald man den ersten
&lt;a href="http://de.wikipedia.org/wiki/Klassisches_Runge-Kutta-Verfahren"&gt;Runge-Kutta&lt;/a&gt;-Algorithmus
in einer kommerziellen Interpretersprache geschrieben hat, bemerkt man,
dass dieses Skript doch recht lange&amp;nbsp;braucht.&lt;/p&gt;
&lt;p&gt;Für dieses Problem gibt es zwei Lösungen: Entweder wird man zum Guru und …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Differentialgleichungen numerisch zu lösen macht mehr Spaß, als man
erwarten würde, wenn man es hört. Und sobald man den ersten
&lt;a href="http://de.wikipedia.org/wiki/Klassisches_Runge-Kutta-Verfahren"&gt;Runge-Kutta&lt;/a&gt;-Algorithmus
in einer kommerziellen Interpretersprache geschrieben hat, bemerkt man,
dass dieses Skript doch recht lange&amp;nbsp;braucht.&lt;/p&gt;
&lt;p&gt;Für dieses Problem gibt es zwei Lösungen: Entweder wird man zum Guru und
wendet irgendeine okkulte Matlab-Magie an, um das Programm schneller
laufen zu lassen, oder man schreibt das Programm in einer schönen
Sprache neu. In C zum&amp;nbsp;Beispiel.&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/lorenzattraktor.png"&gt;&lt;img alt="Lorenzattraktor" src="/img/lorenzattraktor1200.webp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ich habe mich für den einfachen Weg
entschieden und wenig überraschend eine Tempoverbesserung von Faktor
&lt;span class="math"&gt;\(\sim 140\)&lt;/span&gt; festgestellt. Jedenfalls für diesen
&lt;a href="http://de.wikipedia.org/wiki/Lorenzattraktor"&gt;Lorenzattraktor&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \dot{X} &amp;amp;= a(Y - X) \\
    \dot{Y} &amp;amp;= X(b - Z) - Y \\
    \dot{Z} &amp;amp;= XY - cZ \\
\end{align}&lt;/div&gt;
&lt;p&gt;
Geplottet habe ich die Werte dann mit &lt;a href="http://matplotlib.sourceforge.net/examples/mplot3d/lines3d_demo.html"&gt;Python und matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Warum ich den Titel
&amp;#8220;&lt;a href="http://de.wikipedia.org/wiki/Schmetterlingseffekt#Wissenschaftlicher_Hintergrund"&gt;Schmetterlingseffekt&lt;/a&gt;&amp;#8221;
gewählt habe? Naja, das Bild hier sieht ein wenig nach einem
Schmetterling aus. Und tatsächlich wurde der Schmetterlingseffekt nach diesem
Differentialgleichungssystem benannt &amp;#8212; und nicht nach der Geschichte aus
&lt;em&gt;Jurassic Park&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Er bewegt in Peking die Flügel, und
im Central Park gibt&amp;#8217;s Regen statt&amp;nbsp;Sonne.&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;cite&gt;Dr. Ian Malcolm&lt;/cite&gt; (1993)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wie genau der &lt;a href="https://blog.schawe.me/seltsamer-attraktor.html"&gt;Lorenzattraktor mit Chaos zusammenhängt, habe ich in diesem
Post dargestellt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Der Quellcode ist als &lt;a href="https://gist.github.com/surt91/54cdc0bcd86bae19c22b4856889ea519"&gt;Gist auf GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Physik"></category><category term="C"></category><category term="Bild"></category><category term="Python"></category><category term="GitHub"></category><category term="Chaos"></category></entry><entry><title>mSnake - Noch ein Snake Clone</title><link href="https://blog.schawe.me/msnake.html" rel="alternate"></link><published>2012-04-22T14:50:00+02:00</published><updated>2012-04-22T14:50:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2012-04-22:/msnake.html</id><summary type="html">&lt;p&gt;Da ich gerade in der Uni mit Matlab zu tun habe, präsentiere ich &amp;#8220;stolz&amp;#8221;
&lt;code&gt;mSnake&lt;/code&gt;. (&lt;a href="https://github.com/surt91/mSnake"&gt;Quellen bei Github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/msnake.png"&gt;&lt;img alt="mSnake" height="286" src="/img/msnake.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Da ich so etwas schon &lt;a href="https://blog.schawe.me/snake.html"&gt;in C&lt;/a&gt; und
&lt;a href="https://blog.schawe.me/pysnake.html"&gt;in Python&lt;/a&gt;
geschrieben habe, möchte ich noch zum Ausdruck bringen, dass mir Python
davon am besten gefällt.
Matlab ist irgendwie anders. Vom Syntax ist …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da ich gerade in der Uni mit Matlab zu tun habe, präsentiere ich &amp;#8220;stolz&amp;#8221;
&lt;code&gt;mSnake&lt;/code&gt;. (&lt;a href="https://github.com/surt91/mSnake"&gt;Quellen bei Github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="/img/msnake.png"&gt;&lt;img alt="mSnake" height="286" src="/img/msnake.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Da ich so etwas schon &lt;a href="https://blog.schawe.me/snake.html"&gt;in C&lt;/a&gt; und
&lt;a href="https://blog.schawe.me/pysnake.html"&gt;in Python&lt;/a&gt;
geschrieben habe, möchte ich noch zum Ausdruck bringen, dass mir Python
davon am besten gefällt.
Matlab ist irgendwie anders. Vom Syntax ist es C und Python gar nicht
mal unähnlich, dennoch sieht der Code (meiner jedenfalls) ganz anders
aus: Aufgrund vieler spezialisierter Matrix Funktionen, ist im gesamten
Programm nur eine Schleife enthalten: Die while-Schleife, die abbricht,
wenn man verloren hat. Ob das jetzt gut oder schlecht&amp;nbsp;ist&amp;#8230;&lt;/p&gt;</content><category term="Code"></category><category term="Matlab"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>PySnake</title><link href="https://blog.schawe.me/pysnake.html" rel="alternate"></link><published>2011-12-27T11:37:00+01:00</published><updated>2011-12-27T11:37:00+01:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-12-27:/pysnake.html</id><summary type="html">&lt;p&gt;Weihnachten. Auch wenn man sein Studium sehr mag, ist es doch
schön, wenn man mal zwei Wochen frei hat (&amp;#8230;als ob ich das
irgendjemandem erklären müsste).
Man kann sich um Dinge kümmern, die man immer nochmal machen wollte.
Da ich ein Snake-Fan bin, habe ich &lt;a href="https://blog.schawe.me/snake.html"&gt;noch eine&lt;/a&gt;
Version&amp;nbsp;geschrieben.&lt;/p&gt;
&lt;video controls loop height="384" width="432"&gt;
&lt;source src="/vid/pySnake.webm" type="video/webm"&gt;&lt;/source&gt;
&lt;source src="/vid/pySnake.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your …&lt;/video&gt;</summary><content type="html">&lt;p&gt;Weihnachten. Auch wenn man sein Studium sehr mag, ist es doch
schön, wenn man mal zwei Wochen frei hat (&amp;#8230;als ob ich das
irgendjemandem erklären müsste).
Man kann sich um Dinge kümmern, die man immer nochmal machen wollte.
Da ich ein Snake-Fan bin, habe ich &lt;a href="https://blog.schawe.me/snake.html"&gt;noch eine&lt;/a&gt;
Version&amp;nbsp;geschrieben.&lt;/p&gt;
&lt;video controls loop height="384" width="432"&gt;
&lt;source src="/vid/pySnake.webm" type="video/webm"&gt;&lt;/source&gt;
&lt;source src="/vid/pySnake.mp4" type="video/mp4"&gt;&lt;/source&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Ich würde euch zwar gerne erzählen, dass ich die Schlange da so
geschickt gesteuert habe, andererseits möchte ich auch nicht den
&amp;#8220;Automatikmodus&amp;#8221;&amp;nbsp;verschweigen.&lt;/p&gt;
&lt;p&gt;Im Gegensatz zum &lt;a href="https://blog.schawe.me/snake.html"&gt;Konsolen/ncurses Snake&lt;/a&gt;,
das in C geschrieben war, ist
diese Version jetzt in Python3 mit &lt;span class="caps"&gt;QT4&lt;/span&gt; (pyqt) als Gui Toolkit&amp;nbsp;ausgestattet.&lt;/p&gt;
&lt;p&gt;Quellen auf &lt;a href="https://github.com/surt91/PySnake"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="Python"></category><category term="Video"></category><category term="GitHub"></category><category term="Game"></category><category term="Snake"></category></entry><entry><title>Snake</title><link href="https://blog.schawe.me/snake.html" rel="alternate"></link><published>2011-10-03T14:16:00+02:00</published><updated>2011-10-03T14:16:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-10-03:/snake.html</id><summary type="html">&lt;p&gt;Und wenn ich Snake sage, meine ich das Beste, was Nokia Handys zu bieten
haben. Jedenfalls vor 10 Jahren &amp;#8212; vermutlich immer noch. Aber weil ich
kein Nokia Handy habe, habe ich mir Snake schnell selbst geschrieben &amp;#8212; in&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snake" src="/img/snake_scr.png"&gt;&lt;/p&gt;
&lt;p&gt;Jetzt gibt es eine neue Version, die auf
&lt;a href="http://de.wikipedia.org/wiki/Ncurses"&gt;ncurses&lt;/a&gt; aufsetzt. Neben der …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Und wenn ich Snake sage, meine ich das Beste, was Nokia Handys zu bieten
haben. Jedenfalls vor 10 Jahren &amp;#8212; vermutlich immer noch. Aber weil ich
kein Nokia Handy habe, habe ich mir Snake schnell selbst geschrieben &amp;#8212; in&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snake" src="/img/snake_scr.png"&gt;&lt;/p&gt;
&lt;p&gt;Jetzt gibt es eine neue Version, die auf
&lt;a href="http://de.wikipedia.org/wiki/Ncurses"&gt;ncurses&lt;/a&gt; aufsetzt. Neben der
verbesserten &amp;#8220;Grafik&amp;#8221; kann man jetzt auch die Pfeiltasten zur Steuerung
benutzen. Außerdem wirkt es sehr viel&amp;nbsp;eleganter.&lt;/p&gt;
&lt;p&gt;Der Code ist auf &lt;a href="https://github.com/surt91/snake"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Code"></category><category term="C"></category><category term="Game"></category><category term="GitHub"></category><category term="Snake"></category></entry><entry><title>Conway’s Game of Life</title><link href="https://blog.schawe.me/conways-game-of-life.html" rel="alternate"></link><published>2011-09-27T13:57:00+02:00</published><updated>2011-09-27T13:57:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2011-09-27:/conways-game-of-life.html</id><summary type="html">&lt;p&gt;Damit man mental nicht ganz einrostet, habe ich gestern Abend
&lt;a href="http://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;
in C geschrieben (&lt;a href="https://github.com/surt91/conway"&gt;GitHub&lt;/a&gt;). Mit
&lt;a href="http://cairographics.org/"&gt;cairo&lt;/a&gt; (deren Logo eine stabile
Konfiguration von Conway&amp;#8217;s Game of Life ist) werden die einzelnen Runden dann als
&lt;code&gt;.png&lt;/code&gt; gespeichert. Und wenn ihr selber ein paar Startkonfigurartionen
schreiben wollt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Damit man mental nicht ganz einrostet, habe ich gestern Abend
&lt;a href="http://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens"&gt;Conway&amp;#8217;s Game of Life&lt;/a&gt;
in C geschrieben (&lt;a href="https://github.com/surt91/conway"&gt;GitHub&lt;/a&gt;). Mit
&lt;a href="http://cairographics.org/"&gt;cairo&lt;/a&gt; (deren Logo eine stabile
Konfiguration von Conway&amp;#8217;s Game of Life ist) werden die einzelnen Runden dann als
&lt;code&gt;.png&lt;/code&gt; gespeichert. Und wenn ihr selber ein paar Startkonfigurartionen
schreiben wollt, sollte der Quellcode nicht allzu undurchschaubar&amp;nbsp;sein.&lt;/p&gt;
&lt;p&gt;Hier ein paar Ergebnisse mit imagemagick animiert:
&lt;code&gt;convert -delay 20 ./*png ./out2.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="HWSS" class="invertable" src="/img/conway1.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pulsator" class="invertable" src="/img/conway2.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Oktagon" class="invertable" src="/img/conway3.gif"&gt;&lt;/p&gt;</content><category term="Code"></category><category term="GitHub"></category><category term="C"></category><category term="Video"></category></entry><entry><title>TicTacToe</title><link href="https://blog.schawe.me/tictactoe.html" rel="alternate"></link><published>2010-05-01T16:49:00+02:00</published><updated>2010-05-01T16:49:00+02:00</updated><author><name>surt91</name></author><id>tag:blog.schawe.me,2010-05-01:/tictactoe.html</id><content type="html">&lt;p&gt;&lt;center&gt;&lt;object style="background-color:#bbbbbb;border-style:dashed;border-color:#000" id="Frame" data="/js/ttt/ttt.html" width="200" height="270"&gt;&lt;/object&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="Code"></category><category term="JavaScript"></category><category term="Game"></category></entry></feed>